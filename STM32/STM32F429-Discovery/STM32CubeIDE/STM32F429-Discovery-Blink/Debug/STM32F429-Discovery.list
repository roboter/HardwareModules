
STM32F429-Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b858  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800ba08  0800ba08  0001ba08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba8c  0800ba8c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba8c  0800ba8c  0001ba8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba94  0800ba94  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba94  0800ba94  0001ba94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba98  0800ba98  0001ba98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800ba9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008d10  20000090  0800bb2c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008da0  0800bb2c  00028da0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e3ed  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006353  00000000  00000000  0004e4ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002298  00000000  00000000  00054800  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001fb0  00000000  00000000  00056a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d649  00000000  00000000  00058a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000225f8  00000000  00000000  00086091  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f1ccd  00000000  00000000  000a8689  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019a356  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000090e8  00000000  00000000  0019a3d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b9f0 	.word	0x0800b9f0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	0800b9f0 	.word	0x0800b9f0

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004f4:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <HAL_Init+0x40>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a0d      	ldr	r2, [pc, #52]	; (8000530 <HAL_Init+0x40>)
 80004fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000500:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <HAL_Init+0x40>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a0a      	ldr	r2, [pc, #40]	; (8000530 <HAL_Init+0x40>)
 8000506:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800050a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800050c:	4b08      	ldr	r3, [pc, #32]	; (8000530 <HAL_Init+0x40>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a07      	ldr	r2, [pc, #28]	; (8000530 <HAL_Init+0x40>)
 8000512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000516:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000518:	2003      	movs	r0, #3
 800051a:	f000 f8fa 	bl	8000712 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800051e:	2000      	movs	r0, #0
 8000520:	f00a fc4a 	bl	800adb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000524:	f00a fc1c 	bl	800ad60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000528:	2300      	movs	r3, #0
}
 800052a:	4618      	mov	r0, r3
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40023c00 	.word	0x40023c00

08000534 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <HAL_IncTick+0x20>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	461a      	mov	r2, r3
 800053e:	4b06      	ldr	r3, [pc, #24]	; (8000558 <HAL_IncTick+0x24>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4413      	add	r3, r2
 8000544:	4a04      	ldr	r2, [pc, #16]	; (8000558 <HAL_IncTick+0x24>)
 8000546:	6013      	str	r3, [r2, #0]
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20000000 	.word	0x20000000
 8000558:	20008468 	.word	0x20008468

0800055c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  return uwTick;
 8000560:	4b03      	ldr	r3, [pc, #12]	; (8000570 <HAL_GetTick+0x14>)
 8000562:	681b      	ldr	r3, [r3, #0]
}
 8000564:	4618      	mov	r0, r3
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	20008468 	.word	0x20008468

08000574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800057c:	f7ff ffee 	bl	800055c <HAL_GetTick>
 8000580:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800058c:	d005      	beq.n	800059a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800058e:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <HAL_Delay+0x40>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	461a      	mov	r2, r3
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	4413      	add	r3, r2
 8000598:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800059a:	bf00      	nop
 800059c:	f7ff ffde 	bl	800055c <HAL_GetTick>
 80005a0:	4602      	mov	r2, r0
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	1ad3      	subs	r3, r2, r3
 80005a6:	68fa      	ldr	r2, [r7, #12]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	d8f7      	bhi.n	800059c <HAL_Delay+0x28>
  {
  }
}
 80005ac:	bf00      	nop
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000000 	.word	0x20000000

080005b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f003 0307 	and.w	r3, r3, #7
 80005c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <__NVIC_SetPriorityGrouping+0x44>)
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ce:	68ba      	ldr	r2, [r7, #8]
 80005d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005d4:	4013      	ands	r3, r2
 80005d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ea:	4a04      	ldr	r2, [pc, #16]	; (80005fc <__NVIC_SetPriorityGrouping+0x44>)
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	60d3      	str	r3, [r2, #12]
}
 80005f0:	bf00      	nop
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000604:	4b04      	ldr	r3, [pc, #16]	; (8000618 <__NVIC_GetPriorityGrouping+0x18>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	0a1b      	lsrs	r3, r3, #8
 800060a:	f003 0307 	and.w	r3, r3, #7
}
 800060e:	4618      	mov	r0, r3
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062a:	2b00      	cmp	r3, #0
 800062c:	db0b      	blt.n	8000646 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	f003 021f 	and.w	r2, r3, #31
 8000634:	4907      	ldr	r1, [pc, #28]	; (8000654 <__NVIC_EnableIRQ+0x38>)
 8000636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063a:	095b      	lsrs	r3, r3, #5
 800063c:	2001      	movs	r0, #1
 800063e:	fa00 f202 	lsl.w	r2, r0, r2
 8000642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	e000e100 	.word	0xe000e100

08000658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	6039      	str	r1, [r7, #0]
 8000662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000668:	2b00      	cmp	r3, #0
 800066a:	db0a      	blt.n	8000682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	b2da      	uxtb	r2, r3
 8000670:	490c      	ldr	r1, [pc, #48]	; (80006a4 <__NVIC_SetPriority+0x4c>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	0112      	lsls	r2, r2, #4
 8000678:	b2d2      	uxtb	r2, r2
 800067a:	440b      	add	r3, r1
 800067c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000680:	e00a      	b.n	8000698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4908      	ldr	r1, [pc, #32]	; (80006a8 <__NVIC_SetPriority+0x50>)
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	f003 030f 	and.w	r3, r3, #15
 800068e:	3b04      	subs	r3, #4
 8000690:	0112      	lsls	r2, r2, #4
 8000692:	b2d2      	uxtb	r2, r2
 8000694:	440b      	add	r3, r1
 8000696:	761a      	strb	r2, [r3, #24]
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	e000e100 	.word	0xe000e100
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b089      	sub	sp, #36	; 0x24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f003 0307 	and.w	r3, r3, #7
 80006be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	f1c3 0307 	rsb	r3, r3, #7
 80006c6:	2b04      	cmp	r3, #4
 80006c8:	bf28      	it	cs
 80006ca:	2304      	movcs	r3, #4
 80006cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	3304      	adds	r3, #4
 80006d2:	2b06      	cmp	r3, #6
 80006d4:	d902      	bls.n	80006dc <NVIC_EncodePriority+0x30>
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	3b03      	subs	r3, #3
 80006da:	e000      	b.n	80006de <NVIC_EncodePriority+0x32>
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e0:	f04f 32ff 	mov.w	r2, #4294967295
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ea:	43da      	mvns	r2, r3
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	401a      	ands	r2, r3
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f4:	f04f 31ff 	mov.w	r1, #4294967295
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	fa01 f303 	lsl.w	r3, r1, r3
 80006fe:	43d9      	mvns	r1, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000704:	4313      	orrs	r3, r2
         );
}
 8000706:	4618      	mov	r0, r3
 8000708:	3724      	adds	r7, #36	; 0x24
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr

08000712 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	b082      	sub	sp, #8
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f7ff ff4c 	bl	80005b8 <__NVIC_SetPriorityGrouping>
}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]
 8000734:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800073a:	f7ff ff61 	bl	8000600 <__NVIC_GetPriorityGrouping>
 800073e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	68b9      	ldr	r1, [r7, #8]
 8000744:	6978      	ldr	r0, [r7, #20]
 8000746:	f7ff ffb1 	bl	80006ac <NVIC_EncodePriority>
 800074a:	4602      	mov	r2, r0
 800074c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000750:	4611      	mov	r1, r2
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ff80 	bl	8000658 <__NVIC_SetPriority>
}
 8000758:	bf00      	nop
 800075a:	3718      	adds	r7, #24
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800076a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff ff54 	bl	800061c <__NVIC_EnableIRQ>
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d101      	bne.n	800078e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800078a:	2301      	movs	r3, #1
 800078c:	e011      	b.n	80007b2 <HAL_CRC_Init+0x36>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	795b      	ldrb	r3, [r3, #5]
 8000792:	b2db      	uxtb	r3, r3
 8000794:	2b00      	cmp	r3, #0
 8000796:	d105      	bne.n	80007a4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2200      	movs	r2, #0
 800079c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f009 fc8c 	bl	800a0bc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2202      	movs	r2, #2
 80007a8:	715a      	strb	r2, [r3, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2201      	movs	r2, #1
 80007ae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80007b0:	2300      	movs	r3, #0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d101      	bne.n	80007cc <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80007c8:	2301      	movs	r3, #1
 80007ca:	e03b      	b.n	8000844 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d106      	bne.n	80007e6 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2200      	movs	r2, #0
 80007dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f009 fcbf 	bl	800a164 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2202      	movs	r2, #2
 80007ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	685a      	ldr	r2, [r3, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	430a      	orrs	r2, r1
 8000802:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800080a:	f023 0107 	bic.w	r1, r3, #7
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	689a      	ldr	r2, [r3, #8]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	430a      	orrs	r2, r1
 8000818:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000820:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000824:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	68d1      	ldr	r1, [r2, #12]
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	6812      	ldr	r2, [r2, #0]
 8000830:	430b      	orrs	r3, r1
 8000832:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2200      	movs	r2, #0
 8000838:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2201      	movs	r2, #1
 800083e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8000842:	2300      	movs	r3, #0
}
 8000844:	4618      	mov	r0, r3
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	2b00      	cmp	r3, #0
 800086c:	d026      	beq.n	80008bc <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000874:	2b00      	cmp	r3, #0
 8000876:	d021      	beq.n	80008bc <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000886:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800088c:	f043 0201 	orr.w	r2, r3, #1
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2201      	movs	r2, #1
 800089a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2204      	movs	r2, #4
 80008a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2200      	movs	r2, #0
 80008a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	695b      	ldr	r3, [r3, #20]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d003      	beq.n	80008bc <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	695b      	ldr	r3, [r3, #20]
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	f003 0320 	and.w	r3, r3, #32
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d026      	beq.n	8000914 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d021      	beq.n	8000914 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80008de:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2220      	movs	r2, #32
 80008e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008ec:	f043 0202 	orr.w	r2, r3, #2
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2204      	movs	r2, #4
 80008f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2200      	movs	r2, #0
 8000900:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	695b      	ldr	r3, [r3, #20]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d003      	beq.n	8000914 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	695b      	ldr	r3, [r3, #20]
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	f003 0308 	and.w	r3, r3, #8
 800091a:	2b00      	cmp	r3, #0
 800091c:	d026      	beq.n	800096c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000924:	2b00      	cmp	r3, #0
 8000926:	d021      	beq.n	800096c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000936:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2208      	movs	r2, #8
 800093e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000944:	f043 0204 	orr.w	r2, r3, #4
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2204      	movs	r2, #4
 8000950:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2200      	movs	r2, #0
 8000958:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	695b      	ldr	r3, [r3, #20]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d003      	beq.n	800096c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	695b      	ldr	r3, [r3, #20]
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	2b00      	cmp	r3, #0
 8000974:	d013      	beq.n	800099e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800097c:	2b00      	cmp	r3, #0
 800097e:	d00e      	beq.n	800099e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800098e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2204      	movs	r2, #4
 8000996:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f000 f853 	bl	8000a44 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	f003 0302 	and.w	r3, r3, #2
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d024      	beq.n	80009f2 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d01f      	beq.n	80009f2 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80009c0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2202      	movs	r2, #2
 80009c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2201      	movs	r2, #1
 80009d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2200      	movs	r2, #0
 80009de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	691b      	ldr	r3, [r3, #16]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d003      	beq.n	80009f2 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	691b      	ldr	r3, [r3, #16]
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	f003 0310 	and.w	r3, r3, #16
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d01f      	beq.n	8000a3c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d01a      	beq.n	8000a3c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000a14:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2210      	movs	r2, #16
 8000a1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2201      	movs	r2, #1
 8000a2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2200      	movs	r2, #0
 8000a32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f000 f80e 	bl	8000a58 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8000a3c:	bf00      	nop
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b087      	sub	sp, #28
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d101      	bne.n	8000a8c <HAL_DMA2D_ConfigLayer+0x20>
 8000a88:	2302      	movs	r3, #2
 8000a8a:	e079      	b.n	8000b80 <HAL_DMA2D_ConfigLayer+0x114>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2201      	movs	r2, #1
 8000a90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2202      	movs	r2, #2
 8000a98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	011b      	lsls	r3, r3, #4
 8000aa0:	3318      	adds	r3, #24
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	685a      	ldr	r2, [r3, #4]
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	689b      	ldr	r3, [r3, #8]
 8000ab0:	041b      	lsls	r3, r3, #16
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8000ab6:	4b35      	ldr	r3, [pc, #212]	; (8000b8c <HAL_DMA2D_ConfigLayer+0x120>)
 8000ab8:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	2b0a      	cmp	r3, #10
 8000ac0:	d003      	beq.n	8000aca <HAL_DMA2D_ConfigLayer+0x5e>
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	2b09      	cmp	r3, #9
 8000ac8:	d107      	bne.n	8000ada <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	68db      	ldr	r3, [r3, #12]
 8000ace:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000ad2:	697a      	ldr	r2, [r7, #20]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	617b      	str	r3, [r7, #20]
 8000ad8:	e005      	b.n	8000ae6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	061b      	lsls	r3, r3, #24
 8000ae0:	697a      	ldr	r2, [r7, #20]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d120      	bne.n	8000b2e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	43db      	mvns	r3, r3
 8000af6:	ea02 0103 	and.w	r1, r2, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	697a      	ldr	r2, [r7, #20]
 8000b00:	430a      	orrs	r2, r1
 8000b02:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	6812      	ldr	r2, [r2, #0]
 8000b0c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	2b0a      	cmp	r3, #10
 8000b14:	d003      	beq.n	8000b1e <HAL_DMA2D_ConfigLayer+0xb2>
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	2b09      	cmp	r3, #9
 8000b1c:	d127      	bne.n	8000b6e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	68da      	ldr	r2, [r3, #12]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000b2a:	629a      	str	r2, [r3, #40]	; 0x28
 8000b2c:	e01f      	b.n	8000b6e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	69da      	ldr	r2, [r3, #28]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	43db      	mvns	r3, r3
 8000b38:	ea02 0103 	and.w	r1, r2, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	697a      	ldr	r2, [r7, #20]
 8000b42:	430a      	orrs	r2, r1
 8000b44:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	6812      	ldr	r2, [r2, #0]
 8000b4e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	2b0a      	cmp	r3, #10
 8000b56:	d003      	beq.n	8000b60 <HAL_DMA2D_ConfigLayer+0xf4>
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	2b09      	cmp	r3, #9
 8000b5e:	d106      	bne.n	8000b6e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	68da      	ldr	r2, [r3, #12]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000b6c:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2201      	movs	r2, #1
 8000b72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8000b7e:	2300      	movs	r3, #0
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	371c      	adds	r7, #28
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	ff03000f 	.word	0xff03000f

08000b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b089      	sub	sp, #36	; 0x24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
 8000baa:	e177      	b.n	8000e9c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bac:	2201      	movs	r2, #1
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	697a      	ldr	r2, [r7, #20]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	f040 8166 	bne.w	8000e96 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	2b02      	cmp	r3, #2
 8000bd0:	d003      	beq.n	8000bda <HAL_GPIO_Init+0x4a>
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	2b12      	cmp	r3, #18
 8000bd8:	d123      	bne.n	8000c22 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	08da      	lsrs	r2, r3, #3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	3208      	adds	r2, #8
 8000be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	220f      	movs	r2, #15
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	691a      	ldr	r2, [r3, #16]
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	f003 0307 	and.w	r3, r3, #7
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	69ba      	ldr	r2, [r7, #24]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	08da      	lsrs	r2, r3, #3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3208      	adds	r2, #8
 8000c1c:	69b9      	ldr	r1, [r7, #24]
 8000c1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	2203      	movs	r2, #3
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43db      	mvns	r3, r3
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	4013      	ands	r3, r2
 8000c38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f003 0203 	and.w	r2, r3, #3
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d00b      	beq.n	8000c76 <HAL_GPIO_Init+0xe6>
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d007      	beq.n	8000c76 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c6a:	2b11      	cmp	r3, #17
 8000c6c:	d003      	beq.n	8000c76 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	2b12      	cmp	r3, #18
 8000c74:	d130      	bne.n	8000cd8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	2203      	movs	r2, #3
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	43db      	mvns	r3, r3
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	68da      	ldr	r2, [r3, #12]
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	69ba      	ldr	r2, [r7, #24]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	69ba      	ldr	r2, [r7, #24]
 8000ca4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cac:	2201      	movs	r2, #1
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	69ba      	ldr	r2, [r7, #24]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	091b      	lsrs	r3, r3, #4
 8000cc2:	f003 0201 	and.w	r2, r3, #1
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	2203      	movs	r2, #3
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	69ba      	ldr	r2, [r7, #24]
 8000cec:	4013      	ands	r3, r2
 8000cee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	689a      	ldr	r2, [r3, #8]
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	f000 80c0 	beq.w	8000e96 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	4b65      	ldr	r3, [pc, #404]	; (8000eb0 <HAL_GPIO_Init+0x320>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	4a64      	ldr	r2, [pc, #400]	; (8000eb0 <HAL_GPIO_Init+0x320>)
 8000d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d24:	6453      	str	r3, [r2, #68]	; 0x44
 8000d26:	4b62      	ldr	r3, [pc, #392]	; (8000eb0 <HAL_GPIO_Init+0x320>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d32:	4a60      	ldr	r2, [pc, #384]	; (8000eb4 <HAL_GPIO_Init+0x324>)
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	089b      	lsrs	r3, r3, #2
 8000d38:	3302      	adds	r3, #2
 8000d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	f003 0303 	and.w	r3, r3, #3
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	220f      	movs	r2, #15
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	4013      	ands	r3, r2
 8000d54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a57      	ldr	r2, [pc, #348]	; (8000eb8 <HAL_GPIO_Init+0x328>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d037      	beq.n	8000dce <HAL_GPIO_Init+0x23e>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a56      	ldr	r2, [pc, #344]	; (8000ebc <HAL_GPIO_Init+0x32c>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d031      	beq.n	8000dca <HAL_GPIO_Init+0x23a>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a55      	ldr	r2, [pc, #340]	; (8000ec0 <HAL_GPIO_Init+0x330>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d02b      	beq.n	8000dc6 <HAL_GPIO_Init+0x236>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a54      	ldr	r2, [pc, #336]	; (8000ec4 <HAL_GPIO_Init+0x334>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d025      	beq.n	8000dc2 <HAL_GPIO_Init+0x232>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a53      	ldr	r2, [pc, #332]	; (8000ec8 <HAL_GPIO_Init+0x338>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d01f      	beq.n	8000dbe <HAL_GPIO_Init+0x22e>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a52      	ldr	r2, [pc, #328]	; (8000ecc <HAL_GPIO_Init+0x33c>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d019      	beq.n	8000dba <HAL_GPIO_Init+0x22a>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a51      	ldr	r2, [pc, #324]	; (8000ed0 <HAL_GPIO_Init+0x340>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d013      	beq.n	8000db6 <HAL_GPIO_Init+0x226>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a50      	ldr	r2, [pc, #320]	; (8000ed4 <HAL_GPIO_Init+0x344>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d00d      	beq.n	8000db2 <HAL_GPIO_Init+0x222>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a4f      	ldr	r2, [pc, #316]	; (8000ed8 <HAL_GPIO_Init+0x348>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d007      	beq.n	8000dae <HAL_GPIO_Init+0x21e>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a4e      	ldr	r2, [pc, #312]	; (8000edc <HAL_GPIO_Init+0x34c>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d101      	bne.n	8000daa <HAL_GPIO_Init+0x21a>
 8000da6:	2309      	movs	r3, #9
 8000da8:	e012      	b.n	8000dd0 <HAL_GPIO_Init+0x240>
 8000daa:	230a      	movs	r3, #10
 8000dac:	e010      	b.n	8000dd0 <HAL_GPIO_Init+0x240>
 8000dae:	2308      	movs	r3, #8
 8000db0:	e00e      	b.n	8000dd0 <HAL_GPIO_Init+0x240>
 8000db2:	2307      	movs	r3, #7
 8000db4:	e00c      	b.n	8000dd0 <HAL_GPIO_Init+0x240>
 8000db6:	2306      	movs	r3, #6
 8000db8:	e00a      	b.n	8000dd0 <HAL_GPIO_Init+0x240>
 8000dba:	2305      	movs	r3, #5
 8000dbc:	e008      	b.n	8000dd0 <HAL_GPIO_Init+0x240>
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	e006      	b.n	8000dd0 <HAL_GPIO_Init+0x240>
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e004      	b.n	8000dd0 <HAL_GPIO_Init+0x240>
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	e002      	b.n	8000dd0 <HAL_GPIO_Init+0x240>
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e000      	b.n	8000dd0 <HAL_GPIO_Init+0x240>
 8000dce:	2300      	movs	r3, #0
 8000dd0:	69fa      	ldr	r2, [r7, #28]
 8000dd2:	f002 0203 	and.w	r2, r2, #3
 8000dd6:	0092      	lsls	r2, r2, #2
 8000dd8:	4093      	lsls	r3, r2
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000de0:	4934      	ldr	r1, [pc, #208]	; (8000eb4 <HAL_GPIO_Init+0x324>)
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	089b      	lsrs	r3, r3, #2
 8000de6:	3302      	adds	r3, #2
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dee:	4b3c      	ldr	r3, [pc, #240]	; (8000ee0 <HAL_GPIO_Init+0x350>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	43db      	mvns	r3, r3
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d003      	beq.n	8000e12 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e12:	4a33      	ldr	r2, [pc, #204]	; (8000ee0 <HAL_GPIO_Init+0x350>)
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e18:	4b31      	ldr	r3, [pc, #196]	; (8000ee0 <HAL_GPIO_Init+0x350>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	43db      	mvns	r3, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4013      	ands	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d003      	beq.n	8000e3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e3c:	4a28      	ldr	r2, [pc, #160]	; (8000ee0 <HAL_GPIO_Init+0x350>)
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e42:	4b27      	ldr	r3, [pc, #156]	; (8000ee0 <HAL_GPIO_Init+0x350>)
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d003      	beq.n	8000e66 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e66:	4a1e      	ldr	r2, [pc, #120]	; (8000ee0 <HAL_GPIO_Init+0x350>)
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ee0 <HAL_GPIO_Init+0x350>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	43db      	mvns	r3, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d003      	beq.n	8000e90 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e90:	4a13      	ldr	r2, [pc, #76]	; (8000ee0 <HAL_GPIO_Init+0x350>)
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	61fb      	str	r3, [r7, #28]
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	2b0f      	cmp	r3, #15
 8000ea0:	f67f ae84 	bls.w	8000bac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ea4:	bf00      	nop
 8000ea6:	3724      	adds	r7, #36	; 0x24
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40013800 	.word	0x40013800
 8000eb8:	40020000 	.word	0x40020000
 8000ebc:	40020400 	.word	0x40020400
 8000ec0:	40020800 	.word	0x40020800
 8000ec4:	40020c00 	.word	0x40020c00
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	40021400 	.word	0x40021400
 8000ed0:	40021800 	.word	0x40021800
 8000ed4:	40021c00 	.word	0x40021c00
 8000ed8:	40022000 	.word	0x40022000
 8000edc:	40022400 	.word	0x40022400
 8000ee0:	40013c00 	.word	0x40013c00

08000ee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	807b      	strh	r3, [r7, #2]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ef4:	787b      	ldrb	r3, [r7, #1]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000efa:	887a      	ldrh	r2, [r7, #2]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f00:	e003      	b.n	8000f0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f02:	887b      	ldrh	r3, [r7, #2]
 8000f04:	041a      	lsls	r2, r3, #16
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	619a      	str	r2, [r3, #24]
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b083      	sub	sp, #12
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
 8000f1e:	460b      	mov	r3, r1
 8000f20:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	695a      	ldr	r2, [r3, #20]
 8000f26:	887b      	ldrh	r3, [r7, #2]
 8000f28:	401a      	ands	r2, r3
 8000f2a:	887b      	ldrh	r3, [r7, #2]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d104      	bne.n	8000f3a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f30:	887b      	ldrh	r3, [r7, #2]
 8000f32:	041a      	lsls	r2, r3, #16
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000f38:	e002      	b.n	8000f40 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000f3a:	887a      	ldrh	r2, [r7, #2]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	619a      	str	r2, [r3, #24]
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f4e:	b08f      	sub	sp, #60	; 0x3c
 8000f50:	af0a      	add	r7, sp, #40	; 0x28
 8000f52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d101      	bne.n	8000f5e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e054      	b.n	8001008 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d106      	bne.n	8000f7e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f00a f953 	bl	800b224 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2203      	movs	r2, #3
 8000f82:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d102      	bne.n	8000f98 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f003 ff6b 	bl	8004e78 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	687e      	ldr	r6, [r7, #4]
 8000faa:	466d      	mov	r5, sp
 8000fac:	f106 0410 	add.w	r4, r6, #16
 8000fb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fb8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fbc:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fc0:	1d33      	adds	r3, r6, #4
 8000fc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fc4:	6838      	ldr	r0, [r7, #0]
 8000fc6:	f003 fee5 	bl	8004d94 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2101      	movs	r1, #1
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f003 ff62 	bl	8004e9a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	687e      	ldr	r6, [r7, #4]
 8000fde:	466d      	mov	r5, sp
 8000fe0:	f106 0410 	add.w	r4, r6, #16
 8000fe4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fe6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fe8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fec:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ff0:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ff4:	1d33      	adds	r3, r6, #4
 8000ff6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ff8:	6838      	ldr	r0, [r7, #0]
 8000ffa:	f004 f875 	bl	80050e8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2201      	movs	r2, #1
 8001002:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001006:	2300      	movs	r3, #0
}
 8001008:	4618      	mov	r0, r3
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001010 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b089      	sub	sp, #36	; 0x24
 8001014:	af04      	add	r7, sp, #16
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	4608      	mov	r0, r1
 800101a:	4611      	mov	r1, r2
 800101c:	461a      	mov	r2, r3
 800101e:	4603      	mov	r3, r0
 8001020:	70fb      	strb	r3, [r7, #3]
 8001022:	460b      	mov	r3, r1
 8001024:	70bb      	strb	r3, [r7, #2]
 8001026:	4613      	mov	r3, r2
 8001028:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001030:	2b01      	cmp	r3, #1
 8001032:	d101      	bne.n	8001038 <HAL_HCD_HC_Init+0x28>
 8001034:	2302      	movs	r3, #2
 8001036:	e07f      	b.n	8001138 <HAL_HCD_HC_Init+0x128>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2201      	movs	r2, #1
 800103c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001040:	78fa      	ldrb	r2, [r7, #3]
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	4613      	mov	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4413      	add	r3, r2
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	440b      	add	r3, r1
 800104e:	333d      	adds	r3, #61	; 0x3d
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001054:	78fa      	ldrb	r2, [r7, #3]
 8001056:	6879      	ldr	r1, [r7, #4]
 8001058:	4613      	mov	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	440b      	add	r3, r1
 8001062:	3338      	adds	r3, #56	; 0x38
 8001064:	787a      	ldrb	r2, [r7, #1]
 8001066:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001068:	78fa      	ldrb	r2, [r7, #3]
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	4613      	mov	r3, r2
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	4413      	add	r3, r2
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	440b      	add	r3, r1
 8001076:	3340      	adds	r3, #64	; 0x40
 8001078:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800107a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800107c:	78fa      	ldrb	r2, [r7, #3]
 800107e:	6879      	ldr	r1, [r7, #4]
 8001080:	4613      	mov	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4413      	add	r3, r2
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	440b      	add	r3, r1
 800108a:	3339      	adds	r3, #57	; 0x39
 800108c:	78fa      	ldrb	r2, [r7, #3]
 800108e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001090:	78fa      	ldrb	r2, [r7, #3]
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	4613      	mov	r3, r2
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	4413      	add	r3, r2
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	440b      	add	r3, r1
 800109e:	333f      	adds	r3, #63	; 0x3f
 80010a0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80010a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80010a6:	78fa      	ldrb	r2, [r7, #3]
 80010a8:	78bb      	ldrb	r3, [r7, #2]
 80010aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010ae:	b2d8      	uxtb	r0, r3
 80010b0:	6879      	ldr	r1, [r7, #4]
 80010b2:	4613      	mov	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	440b      	add	r3, r1
 80010bc:	333a      	adds	r3, #58	; 0x3a
 80010be:	4602      	mov	r2, r0
 80010c0:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80010c2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	da0a      	bge.n	80010e0 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80010ca:	78fa      	ldrb	r2, [r7, #3]
 80010cc:	6879      	ldr	r1, [r7, #4]
 80010ce:	4613      	mov	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	440b      	add	r3, r1
 80010d8:	333b      	adds	r3, #59	; 0x3b
 80010da:	2201      	movs	r2, #1
 80010dc:	701a      	strb	r2, [r3, #0]
 80010de:	e009      	b.n	80010f4 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80010e0:	78fa      	ldrb	r2, [r7, #3]
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	4613      	mov	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	440b      	add	r3, r1
 80010ee:	333b      	adds	r3, #59	; 0x3b
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80010f4:	78fa      	ldrb	r2, [r7, #3]
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	4613      	mov	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	440b      	add	r3, r1
 8001102:	333c      	adds	r3, #60	; 0x3c
 8001104:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001108:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6818      	ldr	r0, [r3, #0]
 800110e:	787c      	ldrb	r4, [r7, #1]
 8001110:	78ba      	ldrb	r2, [r7, #2]
 8001112:	78f9      	ldrb	r1, [r7, #3]
 8001114:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001116:	9302      	str	r3, [sp, #8]
 8001118:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	4623      	mov	r3, r4
 8001126:	f004 f961 	bl	80053ec <USB_HC_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001136:	7bfb      	ldrb	r3, [r7, #15]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	bd90      	pop	{r4, r7, pc}

08001140 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800114c:	2300      	movs	r3, #0
 800114e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001156:	2b01      	cmp	r3, #1
 8001158:	d101      	bne.n	800115e <HAL_HCD_HC_Halt+0x1e>
 800115a:	2302      	movs	r3, #2
 800115c:	e00f      	b.n	800117e <HAL_HCD_HC_Halt+0x3e>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2201      	movs	r2, #1
 8001162:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	78fa      	ldrb	r2, [r7, #3]
 800116c:	4611      	mov	r1, r2
 800116e:	4618      	mov	r0, r3
 8001170:	f004 fb9b 	bl	80058aa <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800117c:	7bfb      	ldrb	r3, [r7, #15]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	4608      	mov	r0, r1
 8001192:	4611      	mov	r1, r2
 8001194:	461a      	mov	r2, r3
 8001196:	4603      	mov	r3, r0
 8001198:	70fb      	strb	r3, [r7, #3]
 800119a:	460b      	mov	r3, r1
 800119c:	70bb      	strb	r3, [r7, #2]
 800119e:	4613      	mov	r3, r2
 80011a0:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 80011a2:	78fa      	ldrb	r2, [r7, #3]
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	4613      	mov	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	440b      	add	r3, r1
 80011b0:	333b      	adds	r3, #59	; 0x3b
 80011b2:	78ba      	ldrb	r2, [r7, #2]
 80011b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80011b6:	78fa      	ldrb	r2, [r7, #3]
 80011b8:	6879      	ldr	r1, [r7, #4]
 80011ba:	4613      	mov	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	440b      	add	r3, r1
 80011c4:	333f      	adds	r3, #63	; 0x3f
 80011c6:	787a      	ldrb	r2, [r7, #1]
 80011c8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80011ca:	7c3b      	ldrb	r3, [r7, #16]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d10a      	bne.n	80011e6 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80011d0:	78fa      	ldrb	r2, [r7, #3]
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	4613      	mov	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4413      	add	r3, r2
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	440b      	add	r3, r1
 80011de:	3342      	adds	r3, #66	; 0x42
 80011e0:	2203      	movs	r2, #3
 80011e2:	701a      	strb	r2, [r3, #0]
 80011e4:	e009      	b.n	80011fa <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80011e6:	78fa      	ldrb	r2, [r7, #3]
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	440b      	add	r3, r1
 80011f4:	3342      	adds	r3, #66	; 0x42
 80011f6:	2202      	movs	r2, #2
 80011f8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80011fa:	787b      	ldrb	r3, [r7, #1]
 80011fc:	2b03      	cmp	r3, #3
 80011fe:	f200 80d6 	bhi.w	80013ae <HAL_HCD_HC_SubmitRequest+0x226>
 8001202:	a201      	add	r2, pc, #4	; (adr r2, 8001208 <HAL_HCD_HC_SubmitRequest+0x80>)
 8001204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001208:	08001219 	.word	0x08001219
 800120c:	08001399 	.word	0x08001399
 8001210:	08001285 	.word	0x08001285
 8001214:	0800130f 	.word	0x0800130f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001218:	7c3b      	ldrb	r3, [r7, #16]
 800121a:	2b01      	cmp	r3, #1
 800121c:	f040 80c9 	bne.w	80013b2 <HAL_HCD_HC_SubmitRequest+0x22a>
 8001220:	78bb      	ldrb	r3, [r7, #2]
 8001222:	2b00      	cmp	r3, #0
 8001224:	f040 80c5 	bne.w	80013b2 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8001228:	8b3b      	ldrh	r3, [r7, #24]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d109      	bne.n	8001242 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800122e:	78fa      	ldrb	r2, [r7, #3]
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	4613      	mov	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	440b      	add	r3, r1
 800123c:	3351      	adds	r3, #81	; 0x51
 800123e:	2201      	movs	r2, #1
 8001240:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001242:	78fa      	ldrb	r2, [r7, #3]
 8001244:	6879      	ldr	r1, [r7, #4]
 8001246:	4613      	mov	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	440b      	add	r3, r1
 8001250:	3351      	adds	r3, #81	; 0x51
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d10a      	bne.n	800126e <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001258:	78fa      	ldrb	r2, [r7, #3]
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	4613      	mov	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4413      	add	r3, r2
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	440b      	add	r3, r1
 8001266:	3342      	adds	r3, #66	; 0x42
 8001268:	2200      	movs	r2, #0
 800126a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800126c:	e0a1      	b.n	80013b2 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800126e:	78fa      	ldrb	r2, [r7, #3]
 8001270:	6879      	ldr	r1, [r7, #4]
 8001272:	4613      	mov	r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	4413      	add	r3, r2
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	440b      	add	r3, r1
 800127c:	3342      	adds	r3, #66	; 0x42
 800127e:	2202      	movs	r2, #2
 8001280:	701a      	strb	r2, [r3, #0]
      break;
 8001282:	e096      	b.n	80013b2 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001284:	78bb      	ldrb	r3, [r7, #2]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d120      	bne.n	80012cc <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800128a:	78fa      	ldrb	r2, [r7, #3]
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	4613      	mov	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	440b      	add	r3, r1
 8001298:	3351      	adds	r3, #81	; 0x51
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d10a      	bne.n	80012b6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80012a0:	78fa      	ldrb	r2, [r7, #3]
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	4613      	mov	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4413      	add	r3, r2
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	440b      	add	r3, r1
 80012ae:	3342      	adds	r3, #66	; 0x42
 80012b0:	2200      	movs	r2, #0
 80012b2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80012b4:	e07e      	b.n	80013b4 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80012b6:	78fa      	ldrb	r2, [r7, #3]
 80012b8:	6879      	ldr	r1, [r7, #4]
 80012ba:	4613      	mov	r3, r2
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	4413      	add	r3, r2
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	440b      	add	r3, r1
 80012c4:	3342      	adds	r3, #66	; 0x42
 80012c6:	2202      	movs	r2, #2
 80012c8:	701a      	strb	r2, [r3, #0]
      break;
 80012ca:	e073      	b.n	80013b4 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80012cc:	78fa      	ldrb	r2, [r7, #3]
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	4613      	mov	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	440b      	add	r3, r1
 80012da:	3350      	adds	r3, #80	; 0x50
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d10a      	bne.n	80012f8 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80012e2:	78fa      	ldrb	r2, [r7, #3]
 80012e4:	6879      	ldr	r1, [r7, #4]
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	440b      	add	r3, r1
 80012f0:	3342      	adds	r3, #66	; 0x42
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
      break;
 80012f6:	e05d      	b.n	80013b4 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80012f8:	78fa      	ldrb	r2, [r7, #3]
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	4613      	mov	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4413      	add	r3, r2
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	440b      	add	r3, r1
 8001306:	3342      	adds	r3, #66	; 0x42
 8001308:	2202      	movs	r2, #2
 800130a:	701a      	strb	r2, [r3, #0]
      break;
 800130c:	e052      	b.n	80013b4 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800130e:	78bb      	ldrb	r3, [r7, #2]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d120      	bne.n	8001356 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001314:	78fa      	ldrb	r2, [r7, #3]
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	440b      	add	r3, r1
 8001322:	3351      	adds	r3, #81	; 0x51
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d10a      	bne.n	8001340 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800132a:	78fa      	ldrb	r2, [r7, #3]
 800132c:	6879      	ldr	r1, [r7, #4]
 800132e:	4613      	mov	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4413      	add	r3, r2
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	440b      	add	r3, r1
 8001338:	3342      	adds	r3, #66	; 0x42
 800133a:	2200      	movs	r2, #0
 800133c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800133e:	e039      	b.n	80013b4 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001340:	78fa      	ldrb	r2, [r7, #3]
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	4613      	mov	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4413      	add	r3, r2
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	440b      	add	r3, r1
 800134e:	3342      	adds	r3, #66	; 0x42
 8001350:	2202      	movs	r2, #2
 8001352:	701a      	strb	r2, [r3, #0]
      break;
 8001354:	e02e      	b.n	80013b4 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001356:	78fa      	ldrb	r2, [r7, #3]
 8001358:	6879      	ldr	r1, [r7, #4]
 800135a:	4613      	mov	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	440b      	add	r3, r1
 8001364:	3350      	adds	r3, #80	; 0x50
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d10a      	bne.n	8001382 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800136c:	78fa      	ldrb	r2, [r7, #3]
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	4613      	mov	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4413      	add	r3, r2
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	440b      	add	r3, r1
 800137a:	3342      	adds	r3, #66	; 0x42
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]
      break;
 8001380:	e018      	b.n	80013b4 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001382:	78fa      	ldrb	r2, [r7, #3]
 8001384:	6879      	ldr	r1, [r7, #4]
 8001386:	4613      	mov	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	440b      	add	r3, r1
 8001390:	3342      	adds	r3, #66	; 0x42
 8001392:	2202      	movs	r2, #2
 8001394:	701a      	strb	r2, [r3, #0]
      break;
 8001396:	e00d      	b.n	80013b4 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001398:	78fa      	ldrb	r2, [r7, #3]
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	4613      	mov	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	440b      	add	r3, r1
 80013a6:	3342      	adds	r3, #66	; 0x42
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]
      break;
 80013ac:	e002      	b.n	80013b4 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 80013ae:	bf00      	nop
 80013b0:	e000      	b.n	80013b4 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 80013b2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80013b4:	78fa      	ldrb	r2, [r7, #3]
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	4613      	mov	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	440b      	add	r3, r1
 80013c2:	3344      	adds	r3, #68	; 0x44
 80013c4:	697a      	ldr	r2, [r7, #20]
 80013c6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80013c8:	78fa      	ldrb	r2, [r7, #3]
 80013ca:	8b39      	ldrh	r1, [r7, #24]
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	4613      	mov	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	4403      	add	r3, r0
 80013d8:	3348      	adds	r3, #72	; 0x48
 80013da:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80013dc:	78fa      	ldrb	r2, [r7, #3]
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	4613      	mov	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	440b      	add	r3, r1
 80013ea:	335c      	adds	r3, #92	; 0x5c
 80013ec:	2200      	movs	r2, #0
 80013ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80013f0:	78fa      	ldrb	r2, [r7, #3]
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	4613      	mov	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	440b      	add	r3, r1
 80013fe:	334c      	adds	r3, #76	; 0x4c
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001404:	78fa      	ldrb	r2, [r7, #3]
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	4613      	mov	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	440b      	add	r3, r1
 8001412:	3339      	adds	r3, #57	; 0x39
 8001414:	78fa      	ldrb	r2, [r7, #3]
 8001416:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001418:	78fa      	ldrb	r2, [r7, #3]
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	4613      	mov	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	440b      	add	r3, r1
 8001426:	335d      	adds	r3, #93	; 0x5d
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6818      	ldr	r0, [r3, #0]
 8001430:	78fa      	ldrb	r2, [r7, #3]
 8001432:	4613      	mov	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	3338      	adds	r3, #56	; 0x38
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	18d1      	adds	r1, r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	b2db      	uxtb	r3, r3
 8001446:	461a      	mov	r2, r3
 8001448:	f004 f8da 	bl	8005600 <USB_HC_StartXfer>
 800144c:	4603      	mov	r3, r0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop

08001458 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f003 fdf7 	bl	8005062 <USB_GetMode>
 8001474:	4603      	mov	r3, r0
 8001476:	2b01      	cmp	r3, #1
 8001478:	f040 80f1 	bne.w	800165e <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f003 fddb 	bl	800503c <USB_ReadInterrupts>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 80e7 	beq.w	800165c <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f003 fdd2 	bl	800503c <USB_ReadInterrupts>
 8001498:	4603      	mov	r3, r0
 800149a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800149e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80014a2:	d104      	bne.n	80014ae <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80014ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f003 fdc2 	bl	800503c <USB_ReadInterrupts>
 80014b8:	4603      	mov	r3, r0
 80014ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014c2:	d104      	bne.n	80014ce <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f003 fdb2 	bl	800503c <USB_ReadInterrupts>
 80014d8:	4603      	mov	r3, r0
 80014da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80014e2:	d104      	bne.n	80014ee <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014ec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f003 fda2 	bl	800503c <USB_ReadInterrupts>
 80014f8:	4603      	mov	r3, r0
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d103      	bne.n	800150a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2202      	movs	r2, #2
 8001508:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f003 fd94 	bl	800503c <USB_ReadInterrupts>
 8001514:	4603      	mov	r3, r0
 8001516:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800151a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800151e:	d117      	bne.n	8001550 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800152e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001532:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f009 feef 	bl	800b318 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2101      	movs	r1, #1
 8001540:	4618      	mov	r0, r3
 8001542:	f003 fe8d 	bl	8005260 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800154e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f003 fd71 	bl	800503c <USB_ReadInterrupts>
 800155a:	4603      	mov	r3, r0
 800155c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001564:	d102      	bne.n	800156c <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f001 f8c8 	bl	80026fc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4618      	mov	r0, r3
 8001572:	f003 fd63 	bl	800503c <USB_ReadInterrupts>
 8001576:	4603      	mov	r3, r0
 8001578:	f003 0308 	and.w	r3, r3, #8
 800157c:	2b08      	cmp	r3, #8
 800157e:	d106      	bne.n	800158e <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f009 fead 	bl	800b2e0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2208      	movs	r2, #8
 800158c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f003 fd52 	bl	800503c <USB_ReadInterrupts>
 8001598:	4603      	mov	r3, r0
 800159a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80015a2:	d138      	bne.n	8001616 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f004 f96d 	bl	8005888 <USB_HC_ReadInterrupt>
 80015ae:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	e025      	b.n	8001602 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	f003 030f 	and.w	r3, r3, #15
 80015bc:	68ba      	ldr	r2, [r7, #8]
 80015be:	fa22 f303 	lsr.w	r3, r2, r3
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d018      	beq.n	80015fc <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	015a      	lsls	r2, r3, #5
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	4413      	add	r3, r2
 80015d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015e0:	d106      	bne.n	80015f0 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	4619      	mov	r1, r3
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 f8cf 	bl	800178c <HCD_HC_IN_IRQHandler>
 80015ee:	e005      	b.n	80015fc <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	4619      	mov	r1, r3
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 fc5f 	bl	8001eba <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	3301      	adds	r3, #1
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	697a      	ldr	r2, [r7, #20]
 8001608:	429a      	cmp	r2, r3
 800160a:	d3d4      	bcc.n	80015b6 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001614:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f003 fd0e 	bl	800503c <USB_ReadInterrupts>
 8001620:	4603      	mov	r3, r0
 8001622:	f003 0310 	and.w	r3, r3, #16
 8001626:	2b10      	cmp	r3, #16
 8001628:	d101      	bne.n	800162e <HAL_HCD_IRQHandler+0x1d6>
 800162a:	2301      	movs	r3, #1
 800162c:	e000      	b.n	8001630 <HAL_HCD_IRQHandler+0x1d8>
 800162e:	2300      	movs	r3, #0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d014      	beq.n	800165e <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	699a      	ldr	r2, [r3, #24]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 0210 	bic.w	r2, r2, #16
 8001642:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 ffad 	bl	80025a4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	699a      	ldr	r2, [r3, #24]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f042 0210 	orr.w	r2, r2, #16
 8001658:	619a      	str	r2, [r3, #24]
 800165a:	e000      	b.n	800165e <HAL_HCD_IRQHandler+0x206>
      return;
 800165c:	bf00      	nop
    }
  }
}
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001672:	2b01      	cmp	r3, #1
 8001674:	d101      	bne.n	800167a <HAL_HCD_Start+0x16>
 8001676:	2302      	movs	r3, #2
 8001678:	e013      	b.n	80016a2 <HAL_HCD_Start+0x3e>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2201      	movs	r2, #1
 800167e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f003 fbe5 	bl	8004e56 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2101      	movs	r1, #1
 8001692:	4618      	mov	r0, r3
 8001694:	f003 fe48 	bl	8005328 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d101      	bne.n	80016c0 <HAL_HCD_Stop+0x16>
 80016bc:	2302      	movs	r3, #2
 80016be:	e00d      	b.n	80016dc <HAL_HCD_Stop+0x32>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f004 fa27 	bl	8005b20 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f003 fdef 	bl	80052d4 <USB_ResetPort>
 80016f6:	4603      	mov	r3, r0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800170c:	78fa      	ldrb	r2, [r7, #3]
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	440b      	add	r3, r1
 800171a:	335c      	adds	r3, #92	; 0x5c
 800171c:	781b      	ldrb	r3, [r3, #0]
}
 800171e:	4618      	mov	r0, r3
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	460b      	mov	r3, r1
 8001734:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001736:	78fa      	ldrb	r2, [r7, #3]
 8001738:	6879      	ldr	r1, [r7, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	440b      	add	r3, r1
 8001744:	334c      	adds	r3, #76	; 0x4c
 8001746:	681b      	ldr	r3, [r3, #0]
}
 8001748:	4618      	mov	r0, r3
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f003 fe31 	bl	80053c8 <USB_GetCurrentFrame>
 8001766:	4603      	mov	r3, r0
}
 8001768:	4618      	mov	r0, r3
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f003 fe0c 	bl	800539a <USB_GetHostSpeed>
 8001782:	4603      	mov	r3, r0
}
 8001784:	4618      	mov	r0, r3
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80017a2:	78fb      	ldrb	r3, [r7, #3]
 80017a4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	015a      	lsls	r2, r3, #5
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	4413      	add	r3, r2
 80017ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b04      	cmp	r3, #4
 80017ba:	d119      	bne.n	80017f0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	015a      	lsls	r2, r3, #5
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	4413      	add	r3, r2
 80017c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017c8:	461a      	mov	r2, r3
 80017ca:	2304      	movs	r3, #4
 80017cc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	015a      	lsls	r2, r3, #5
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	4413      	add	r3, r2
 80017d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	0151      	lsls	r1, r2, #5
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	440a      	add	r2, r1
 80017e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80017e8:	f043 0302 	orr.w	r3, r3, #2
 80017ec:	60d3      	str	r3, [r2, #12]
 80017ee:	e095      	b.n	800191c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	015a      	lsls	r2, r3, #5
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	4413      	add	r3, r2
 80017f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 0320 	and.w	r3, r3, #32
 8001802:	2b20      	cmp	r3, #32
 8001804:	d109      	bne.n	800181a <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	015a      	lsls	r2, r3, #5
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	4413      	add	r3, r2
 800180e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001812:	461a      	mov	r2, r3
 8001814:	2320      	movs	r3, #32
 8001816:	6093      	str	r3, [r2, #8]
 8001818:	e080      	b.n	800191c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	015a      	lsls	r2, r3, #5
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	4413      	add	r3, r2
 8001822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 0308 	and.w	r3, r3, #8
 800182c:	2b08      	cmp	r3, #8
 800182e:	d134      	bne.n	800189a <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	015a      	lsls	r2, r3, #5
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	4413      	add	r3, r2
 8001838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	0151      	lsls	r1, r2, #5
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	440a      	add	r2, r1
 8001846:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800184a:	f043 0302 	orr.w	r3, r3, #2
 800184e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	440b      	add	r3, r1
 800185e:	335d      	adds	r3, #93	; 0x5d
 8001860:	2205      	movs	r2, #5
 8001862:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	015a      	lsls	r2, r3, #5
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	4413      	add	r3, r2
 800186c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001870:	461a      	mov	r2, r3
 8001872:	2310      	movs	r3, #16
 8001874:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	015a      	lsls	r2, r3, #5
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	4413      	add	r3, r2
 800187e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001882:	461a      	mov	r2, r3
 8001884:	2308      	movs	r3, #8
 8001886:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68fa      	ldr	r2, [r7, #12]
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	4611      	mov	r1, r2
 8001892:	4618      	mov	r0, r3
 8001894:	f004 f809 	bl	80058aa <USB_HC_Halt>
 8001898:	e040      	b.n	800191c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	015a      	lsls	r2, r3, #5
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	4413      	add	r3, r2
 80018a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018b0:	d134      	bne.n	800191c <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	015a      	lsls	r2, r3, #5
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	4413      	add	r3, r2
 80018ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	0151      	lsls	r1, r2, #5
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	440a      	add	r2, r1
 80018c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80018cc:	f043 0302 	orr.w	r3, r3, #2
 80018d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	b2d2      	uxtb	r2, r2
 80018da:	4611      	mov	r1, r2
 80018dc:	4618      	mov	r0, r3
 80018de:	f003 ffe4 	bl	80058aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	015a      	lsls	r2, r3, #5
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	4413      	add	r3, r2
 80018ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018ee:	461a      	mov	r2, r3
 80018f0:	2310      	movs	r3, #16
 80018f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	4613      	mov	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	440b      	add	r3, r1
 8001902:	335d      	adds	r3, #93	; 0x5d
 8001904:	2208      	movs	r2, #8
 8001906:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	015a      	lsls	r2, r3, #5
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	4413      	add	r3, r2
 8001910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001914:	461a      	mov	r2, r3
 8001916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800191a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	015a      	lsls	r2, r3, #5
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	4413      	add	r3, r2
 8001924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800192e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001932:	d122      	bne.n	800197a <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	015a      	lsls	r2, r3, #5
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	4413      	add	r3, r2
 800193c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	0151      	lsls	r1, r2, #5
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	440a      	add	r2, r1
 800194a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800194e:	f043 0302 	orr.w	r3, r3, #2
 8001952:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	4611      	mov	r1, r2
 800195e:	4618      	mov	r0, r3
 8001960:	f003 ffa3 	bl	80058aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	015a      	lsls	r2, r3, #5
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	4413      	add	r3, r2
 800196c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001970:	461a      	mov	r2, r3
 8001972:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001976:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001978:	e29b      	b.n	8001eb2 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	015a      	lsls	r2, r3, #5
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4413      	add	r3, r2
 8001982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b01      	cmp	r3, #1
 800198e:	f040 80c1 	bne.w	8001b14 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d01b      	beq.n	80019d2 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	440b      	add	r3, r1
 80019a8:	3348      	adds	r3, #72	; 0x48
 80019aa:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	0159      	lsls	r1, r3, #5
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	440b      	add	r3, r1
 80019b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80019be:	1ad1      	subs	r1, r2, r3
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	4403      	add	r3, r0
 80019ce:	334c      	adds	r3, #76	; 0x4c
 80019d0:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	4613      	mov	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4413      	add	r3, r2
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	440b      	add	r3, r1
 80019e0:	335d      	adds	r3, #93	; 0x5d
 80019e2:	2201      	movs	r2, #1
 80019e4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	4613      	mov	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	440b      	add	r3, r1
 80019f4:	3358      	adds	r3, #88	; 0x58
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	015a      	lsls	r2, r3, #5
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	4413      	add	r3, r2
 8001a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a06:	461a      	mov	r2, r3
 8001a08:	2301      	movs	r3, #1
 8001a0a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001a0c:	6879      	ldr	r1, [r7, #4]
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	4613      	mov	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	440b      	add	r3, r1
 8001a1a:	333f      	adds	r3, #63	; 0x3f
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00a      	beq.n	8001a38 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	4613      	mov	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	440b      	add	r3, r1
 8001a30:	333f      	adds	r3, #63	; 0x3f
 8001a32:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d121      	bne.n	8001a7c <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	015a      	lsls	r2, r3, #5
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	4413      	add	r3, r2
 8001a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	0151      	lsls	r1, r2, #5
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	440a      	add	r2, r1
 8001a4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a52:	f043 0302 	orr.w	r3, r3, #2
 8001a56:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	4611      	mov	r1, r2
 8001a62:	4618      	mov	r0, r3
 8001a64:	f003 ff21 	bl	80058aa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	015a      	lsls	r2, r3, #5
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4413      	add	r3, r2
 8001a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a74:	461a      	mov	r2, r3
 8001a76:	2310      	movs	r3, #16
 8001a78:	6093      	str	r3, [r2, #8]
 8001a7a:	e034      	b.n	8001ae6 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	440b      	add	r3, r1
 8001a8a:	333f      	adds	r3, #63	; 0x3f
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d129      	bne.n	8001ae6 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	015a      	lsls	r2, r3, #5
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4413      	add	r3, r2
 8001a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	0151      	lsls	r1, r2, #5
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	440a      	add	r2, r1
 8001aa8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001aac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ab0:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	440b      	add	r3, r1
 8001ac0:	335c      	adds	r3, #92	; 0x5c
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	b2d8      	uxtb	r0, r3
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	440b      	add	r3, r1
 8001ad8:	335c      	adds	r3, #92	; 0x5c
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	461a      	mov	r2, r3
 8001ade:	4601      	mov	r1, r0
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f009 fc27 	bl	800b334 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	4613      	mov	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	440b      	add	r3, r1
 8001af4:	3350      	adds	r3, #80	; 0x50
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	f083 0301 	eor.w	r3, r3, #1
 8001afc:	b2d8      	uxtb	r0, r3
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	4613      	mov	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4413      	add	r3, r2
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	440b      	add	r3, r1
 8001b0c:	3350      	adds	r3, #80	; 0x50
 8001b0e:	4602      	mov	r2, r0
 8001b10:	701a      	strb	r2, [r3, #0]
}
 8001b12:	e1ce      	b.n	8001eb2 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	015a      	lsls	r2, r3, #5
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	f040 80f1 	bne.w	8001d0e <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	015a      	lsls	r2, r3, #5
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	4413      	add	r3, r2
 8001b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	0151      	lsls	r1, r2, #5
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	440a      	add	r2, r1
 8001b42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b46:	f023 0302 	bic.w	r3, r3, #2
 8001b4a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001b4c:	6879      	ldr	r1, [r7, #4]
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	440b      	add	r3, r1
 8001b5a:	335d      	adds	r3, #93	; 0x5d
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d10a      	bne.n	8001b78 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	4613      	mov	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	440b      	add	r3, r1
 8001b70:	335c      	adds	r3, #92	; 0x5c
 8001b72:	2201      	movs	r2, #1
 8001b74:	701a      	strb	r2, [r3, #0]
 8001b76:	e0b0      	b.n	8001cda <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	440b      	add	r3, r1
 8001b86:	335d      	adds	r3, #93	; 0x5d
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b05      	cmp	r3, #5
 8001b8c:	d10a      	bne.n	8001ba4 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	4613      	mov	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	440b      	add	r3, r1
 8001b9c:	335c      	adds	r3, #92	; 0x5c
 8001b9e:	2205      	movs	r2, #5
 8001ba0:	701a      	strb	r2, [r3, #0]
 8001ba2:	e09a      	b.n	8001cda <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	440b      	add	r3, r1
 8001bb2:	335d      	adds	r3, #93	; 0x5d
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b06      	cmp	r3, #6
 8001bb8:	d00a      	beq.n	8001bd0 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	440b      	add	r3, r1
 8001bc8:	335d      	adds	r3, #93	; 0x5d
 8001bca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	d156      	bne.n	8001c7e <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	440b      	add	r3, r1
 8001bde:	3358      	adds	r3, #88	; 0x58
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	1c59      	adds	r1, r3, #1
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	4403      	add	r3, r0
 8001bf2:	3358      	adds	r3, #88	; 0x58
 8001bf4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	440b      	add	r3, r1
 8001c04:	3358      	adds	r3, #88	; 0x58
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b03      	cmp	r3, #3
 8001c0a:	d914      	bls.n	8001c36 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	4613      	mov	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	440b      	add	r3, r1
 8001c1a:	3358      	adds	r3, #88	; 0x58
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	4613      	mov	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	440b      	add	r3, r1
 8001c2e:	335c      	adds	r3, #92	; 0x5c
 8001c30:	2204      	movs	r2, #4
 8001c32:	701a      	strb	r2, [r3, #0]
 8001c34:	e009      	b.n	8001c4a <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	440b      	add	r3, r1
 8001c44:	335c      	adds	r3, #92	; 0x5c
 8001c46:	2202      	movs	r2, #2
 8001c48:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	015a      	lsls	r2, r3, #5
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	4413      	add	r3, r2
 8001c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001c60:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c68:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	015a      	lsls	r2, r3, #5
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	4413      	add	r3, r2
 8001c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c76:	461a      	mov	r2, r3
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	e02d      	b.n	8001cda <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	4613      	mov	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	440b      	add	r3, r1
 8001c8c:	335d      	adds	r3, #93	; 0x5d
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b03      	cmp	r3, #3
 8001c92:	d122      	bne.n	8001cda <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001c94:	6879      	ldr	r1, [r7, #4]
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	440b      	add	r3, r1
 8001ca2:	335c      	adds	r3, #92	; 0x5c
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	015a      	lsls	r2, r3, #5
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	4413      	add	r3, r2
 8001cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001cbe:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001cc6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	015a      	lsls	r2, r3, #5
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	4413      	add	r3, r2
 8001cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	015a      	lsls	r2, r3, #5
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	2302      	movs	r3, #2
 8001cea:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	b2d8      	uxtb	r0, r3
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	440b      	add	r3, r1
 8001cfe:	335c      	adds	r3, #92	; 0x5c
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	461a      	mov	r2, r3
 8001d04:	4601      	mov	r1, r0
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f009 fb14 	bl	800b334 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001d0c:	e0d1      	b.n	8001eb2 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	015a      	lsls	r2, r3, #5
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4413      	add	r3, r2
 8001d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d20:	2b80      	cmp	r3, #128	; 0x80
 8001d22:	d13e      	bne.n	8001da2 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	015a      	lsls	r2, r3, #5
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	0151      	lsls	r1, r2, #5
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	440a      	add	r2, r1
 8001d3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d3e:	f043 0302 	orr.w	r3, r3, #2
 8001d42:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	440b      	add	r3, r1
 8001d52:	3358      	adds	r3, #88	; 0x58
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	1c59      	adds	r1, r3, #1
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4403      	add	r3, r0
 8001d66:	3358      	adds	r3, #88	; 0x58
 8001d68:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	440b      	add	r3, r1
 8001d78:	335d      	adds	r3, #93	; 0x5d
 8001d7a:	2206      	movs	r2, #6
 8001d7c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	4611      	mov	r1, r2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f003 fd8e 	bl	80058aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	015a      	lsls	r2, r3, #5
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4413      	add	r3, r2
 8001d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	6093      	str	r3, [r2, #8]
}
 8001da0:	e087      	b.n	8001eb2 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	015a      	lsls	r2, r3, #5
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4413      	add	r3, r2
 8001daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 0310 	and.w	r3, r3, #16
 8001db4:	2b10      	cmp	r3, #16
 8001db6:	d17c      	bne.n	8001eb2 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	440b      	add	r3, r1
 8001dc6:	333f      	adds	r3, #63	; 0x3f
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d122      	bne.n	8001e14 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	440b      	add	r3, r1
 8001ddc:	3358      	adds	r3, #88	; 0x58
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	015a      	lsls	r2, r3, #5
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4413      	add	r3, r2
 8001dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	0151      	lsls	r1, r2, #5
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	440a      	add	r2, r1
 8001df8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dfc:	f043 0302 	orr.w	r3, r3, #2
 8001e00:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	4611      	mov	r1, r2
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f003 fd4c 	bl	80058aa <USB_HC_Halt>
 8001e12:	e045      	b.n	8001ea0 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	440b      	add	r3, r1
 8001e22:	333f      	adds	r3, #63	; 0x3f
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00a      	beq.n	8001e40 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	440b      	add	r3, r1
 8001e38:	333f      	adds	r3, #63	; 0x3f
 8001e3a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d12f      	bne.n	8001ea0 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	440b      	add	r3, r1
 8001e4e:	3358      	adds	r3, #88	; 0x58
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d121      	bne.n	8001ea0 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	440b      	add	r3, r1
 8001e6a:	335d      	adds	r3, #93	; 0x5d
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	015a      	lsls	r2, r3, #5
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4413      	add	r3, r2
 8001e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	0151      	lsls	r1, r2, #5
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	440a      	add	r2, r1
 8001e86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e8a:	f043 0302 	orr.w	r3, r3, #2
 8001e8e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	4611      	mov	r1, r2
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f003 fd05 	bl	80058aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	015a      	lsls	r2, r3, #5
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eac:	461a      	mov	r2, r3
 8001eae:	2310      	movs	r3, #16
 8001eb0:	6093      	str	r3, [r2, #8]
}
 8001eb2:	bf00      	nop
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b086      	sub	sp, #24
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	015a      	lsls	r2, r3, #5
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	4413      	add	r3, r2
 8001edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 0304 	and.w	r3, r3, #4
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	d119      	bne.n	8001f1e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	015a      	lsls	r2, r3, #5
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	2304      	movs	r3, #4
 8001efa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	015a      	lsls	r2, r3, #5
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	4413      	add	r3, r2
 8001f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	0151      	lsls	r1, r2, #5
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	440a      	add	r2, r1
 8001f12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f16:	f043 0302 	orr.w	r3, r3, #2
 8001f1a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8001f1c:	e33e      	b.n	800259c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	015a      	lsls	r2, r3, #5
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4413      	add	r3, r2
 8001f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 0320 	and.w	r3, r3, #32
 8001f30:	2b20      	cmp	r3, #32
 8001f32:	d141      	bne.n	8001fb8 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	015a      	lsls	r2, r3, #5
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f40:	461a      	mov	r2, r3
 8001f42:	2320      	movs	r3, #32
 8001f44:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	440b      	add	r3, r1
 8001f54:	333d      	adds	r3, #61	; 0x3d
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	f040 831f 	bne.w	800259c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	4613      	mov	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	440b      	add	r3, r1
 8001f6c:	333d      	adds	r3, #61	; 0x3d
 8001f6e:	2200      	movs	r2, #0
 8001f70:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	440b      	add	r3, r1
 8001f80:	335c      	adds	r3, #92	; 0x5c
 8001f82:	2202      	movs	r2, #2
 8001f84:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	015a      	lsls	r2, r3, #5
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	0151      	lsls	r1, r2, #5
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	440a      	add	r2, r1
 8001f9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fa0:	f043 0302 	orr.w	r3, r3, #2
 8001fa4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	4611      	mov	r1, r2
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f003 fc7a 	bl	80058aa <USB_HC_Halt>
}
 8001fb6:	e2f1      	b.n	800259c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	015a      	lsls	r2, r3, #5
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fca:	2b40      	cmp	r3, #64	; 0x40
 8001fcc:	d13f      	bne.n	800204e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	440b      	add	r3, r1
 8001fdc:	335d      	adds	r3, #93	; 0x5d
 8001fde:	2204      	movs	r2, #4
 8001fe0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	440b      	add	r3, r1
 8001ff0:	333d      	adds	r3, #61	; 0x3d
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	440b      	add	r3, r1
 8002004:	3358      	adds	r3, #88	; 0x58
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	015a      	lsls	r2, r3, #5
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	4413      	add	r3, r2
 8002012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	0151      	lsls	r1, r2, #5
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	440a      	add	r2, r1
 8002020:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002024:	f043 0302 	orr.w	r3, r3, #2
 8002028:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	4611      	mov	r1, r2
 8002034:	4618      	mov	r0, r3
 8002036:	f003 fc38 	bl	80058aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	015a      	lsls	r2, r3, #5
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4413      	add	r3, r2
 8002042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002046:	461a      	mov	r2, r3
 8002048:	2340      	movs	r3, #64	; 0x40
 800204a:	6093      	str	r3, [r2, #8]
}
 800204c:	e2a6      	b.n	800259c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	015a      	lsls	r2, r3, #5
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	4413      	add	r3, r2
 8002056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002064:	d122      	bne.n	80020ac <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	015a      	lsls	r2, r3, #5
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4413      	add	r3, r2
 800206e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	0151      	lsls	r1, r2, #5
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	440a      	add	r2, r1
 800207c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002080:	f043 0302 	orr.w	r3, r3, #2
 8002084:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	4611      	mov	r1, r2
 8002090:	4618      	mov	r0, r3
 8002092:	f003 fc0a 	bl	80058aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	015a      	lsls	r2, r3, #5
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	4413      	add	r3, r2
 800209e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a2:	461a      	mov	r2, r3
 80020a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020a8:	6093      	str	r3, [r2, #8]
}
 80020aa:	e277      	b.n	800259c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	015a      	lsls	r2, r3, #5
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4413      	add	r3, r2
 80020b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d135      	bne.n	800212e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	440b      	add	r3, r1
 80020d0:	3358      	adds	r3, #88	; 0x58
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	015a      	lsls	r2, r3, #5
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4413      	add	r3, r2
 80020de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	0151      	lsls	r1, r2, #5
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	440a      	add	r2, r1
 80020ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020f0:	f043 0302 	orr.w	r3, r3, #2
 80020f4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	4611      	mov	r1, r2
 8002100:	4618      	mov	r0, r3
 8002102:	f003 fbd2 	bl	80058aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	015a      	lsls	r2, r3, #5
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4413      	add	r3, r2
 800210e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002112:	461a      	mov	r2, r3
 8002114:	2301      	movs	r3, #1
 8002116:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	440b      	add	r3, r1
 8002126:	335d      	adds	r3, #93	; 0x5d
 8002128:	2201      	movs	r2, #1
 800212a:	701a      	strb	r2, [r3, #0]
}
 800212c:	e236      	b.n	800259c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	015a      	lsls	r2, r3, #5
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	4413      	add	r3, r2
 8002136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f003 0308 	and.w	r3, r3, #8
 8002140:	2b08      	cmp	r3, #8
 8002142:	d12b      	bne.n	800219c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	015a      	lsls	r2, r3, #5
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4413      	add	r3, r2
 800214c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002150:	461a      	mov	r2, r3
 8002152:	2308      	movs	r3, #8
 8002154:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	015a      	lsls	r2, r3, #5
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4413      	add	r3, r2
 800215e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	0151      	lsls	r1, r2, #5
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	440a      	add	r2, r1
 800216c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002170:	f043 0302 	orr.w	r3, r3, #2
 8002174:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	4611      	mov	r1, r2
 8002180:	4618      	mov	r0, r3
 8002182:	f003 fb92 	bl	80058aa <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	440b      	add	r3, r1
 8002194:	335d      	adds	r3, #93	; 0x5d
 8002196:	2205      	movs	r2, #5
 8002198:	701a      	strb	r2, [r3, #0]
}
 800219a:	e1ff      	b.n	800259c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	015a      	lsls	r2, r3, #5
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4413      	add	r3, r2
 80021a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 0310 	and.w	r3, r3, #16
 80021ae:	2b10      	cmp	r3, #16
 80021b0:	d155      	bne.n	800225e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	4613      	mov	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	440b      	add	r3, r1
 80021c0:	3358      	adds	r3, #88	; 0x58
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	4613      	mov	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	440b      	add	r3, r1
 80021d4:	335d      	adds	r3, #93	; 0x5d
 80021d6:	2203      	movs	r2, #3
 80021d8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	440b      	add	r3, r1
 80021e8:	333d      	adds	r3, #61	; 0x3d
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d114      	bne.n	800221a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	440b      	add	r3, r1
 80021fe:	333c      	adds	r3, #60	; 0x3c
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d109      	bne.n	800221a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	440b      	add	r3, r1
 8002214:	333d      	adds	r3, #61	; 0x3d
 8002216:	2201      	movs	r2, #1
 8002218:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	015a      	lsls	r2, r3, #5
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4413      	add	r3, r2
 8002222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	0151      	lsls	r1, r2, #5
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	440a      	add	r2, r1
 8002230:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002234:	f043 0302 	orr.w	r3, r3, #2
 8002238:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	4611      	mov	r1, r2
 8002244:	4618      	mov	r0, r3
 8002246:	f003 fb30 	bl	80058aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	015a      	lsls	r2, r3, #5
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	4413      	add	r3, r2
 8002252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002256:	461a      	mov	r2, r3
 8002258:	2310      	movs	r3, #16
 800225a:	6093      	str	r3, [r2, #8]
}
 800225c:	e19e      	b.n	800259c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	015a      	lsls	r2, r3, #5
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4413      	add	r3, r2
 8002266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002270:	2b80      	cmp	r3, #128	; 0x80
 8002272:	d12b      	bne.n	80022cc <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	015a      	lsls	r2, r3, #5
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4413      	add	r3, r2
 800227c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	0151      	lsls	r1, r2, #5
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	440a      	add	r2, r1
 800228a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800228e:	f043 0302 	orr.w	r3, r3, #2
 8002292:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	4611      	mov	r1, r2
 800229e:	4618      	mov	r0, r3
 80022a0:	f003 fb03 	bl	80058aa <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	4613      	mov	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	440b      	add	r3, r1
 80022b2:	335d      	adds	r3, #93	; 0x5d
 80022b4:	2206      	movs	r2, #6
 80022b6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	015a      	lsls	r2, r3, #5
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	4413      	add	r3, r2
 80022c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c4:	461a      	mov	r2, r3
 80022c6:	2380      	movs	r3, #128	; 0x80
 80022c8:	6093      	str	r3, [r2, #8]
}
 80022ca:	e167      	b.n	800259c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	015a      	lsls	r2, r3, #5
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4413      	add	r3, r2
 80022d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022e2:	d135      	bne.n	8002350 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	015a      	lsls	r2, r3, #5
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	0151      	lsls	r1, r2, #5
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	440a      	add	r2, r1
 80022fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022fe:	f043 0302 	orr.w	r3, r3, #2
 8002302:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	4611      	mov	r1, r2
 800230e:	4618      	mov	r0, r3
 8002310:	f003 facb 	bl	80058aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	015a      	lsls	r2, r3, #5
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4413      	add	r3, r2
 800231c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002320:	461a      	mov	r2, r3
 8002322:	2310      	movs	r3, #16
 8002324:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	015a      	lsls	r2, r3, #5
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4413      	add	r3, r2
 800232e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002332:	461a      	mov	r2, r3
 8002334:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002338:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	4613      	mov	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	440b      	add	r3, r1
 8002348:	335d      	adds	r3, #93	; 0x5d
 800234a:	2208      	movs	r2, #8
 800234c:	701a      	strb	r2, [r3, #0]
}
 800234e:	e125      	b.n	800259c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	015a      	lsls	r2, r3, #5
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4413      	add	r3, r2
 8002358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b02      	cmp	r3, #2
 8002364:	f040 811a 	bne.w	800259c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	015a      	lsls	r2, r3, #5
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4413      	add	r3, r2
 8002370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	0151      	lsls	r1, r2, #5
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	440a      	add	r2, r1
 800237e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002382:	f023 0302 	bic.w	r3, r3, #2
 8002386:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	4613      	mov	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	440b      	add	r3, r1
 8002396:	335d      	adds	r3, #93	; 0x5d
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d137      	bne.n	800240e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	4613      	mov	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	440b      	add	r3, r1
 80023ac:	335c      	adds	r3, #92	; 0x5c
 80023ae:	2201      	movs	r2, #1
 80023b0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	4613      	mov	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	440b      	add	r3, r1
 80023c0:	333f      	adds	r3, #63	; 0x3f
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d00b      	beq.n	80023e0 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	440b      	add	r3, r1
 80023d6:	333f      	adds	r3, #63	; 0x3f
 80023d8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80023da:	2b03      	cmp	r3, #3
 80023dc:	f040 80c5 	bne.w	800256a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	4613      	mov	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	440b      	add	r3, r1
 80023ee:	3351      	adds	r3, #81	; 0x51
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	f083 0301 	eor.w	r3, r3, #1
 80023f6:	b2d8      	uxtb	r0, r3
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	4613      	mov	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	440b      	add	r3, r1
 8002406:	3351      	adds	r3, #81	; 0x51
 8002408:	4602      	mov	r2, r0
 800240a:	701a      	strb	r2, [r3, #0]
 800240c:	e0ad      	b.n	800256a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	440b      	add	r3, r1
 800241c:	335d      	adds	r3, #93	; 0x5d
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2b03      	cmp	r3, #3
 8002422:	d10a      	bne.n	800243a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	4613      	mov	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	440b      	add	r3, r1
 8002432:	335c      	adds	r3, #92	; 0x5c
 8002434:	2202      	movs	r2, #2
 8002436:	701a      	strb	r2, [r3, #0]
 8002438:	e097      	b.n	800256a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	4613      	mov	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	440b      	add	r3, r1
 8002448:	335d      	adds	r3, #93	; 0x5d
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b04      	cmp	r3, #4
 800244e:	d10a      	bne.n	8002466 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002450:	6879      	ldr	r1, [r7, #4]
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	4613      	mov	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	440b      	add	r3, r1
 800245e:	335c      	adds	r3, #92	; 0x5c
 8002460:	2202      	movs	r2, #2
 8002462:	701a      	strb	r2, [r3, #0]
 8002464:	e081      	b.n	800256a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	440b      	add	r3, r1
 8002474:	335d      	adds	r3, #93	; 0x5d
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b05      	cmp	r3, #5
 800247a:	d10a      	bne.n	8002492 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	4613      	mov	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	440b      	add	r3, r1
 800248a:	335c      	adds	r3, #92	; 0x5c
 800248c:	2205      	movs	r2, #5
 800248e:	701a      	strb	r2, [r3, #0]
 8002490:	e06b      	b.n	800256a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	4613      	mov	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	440b      	add	r3, r1
 80024a0:	335d      	adds	r3, #93	; 0x5d
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b06      	cmp	r3, #6
 80024a6:	d00a      	beq.n	80024be <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	4613      	mov	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	440b      	add	r3, r1
 80024b6:	335d      	adds	r3, #93	; 0x5d
 80024b8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80024ba:	2b08      	cmp	r3, #8
 80024bc:	d155      	bne.n	800256a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	4613      	mov	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	440b      	add	r3, r1
 80024cc:	3358      	adds	r3, #88	; 0x58
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	1c59      	adds	r1, r3, #1
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	4403      	add	r3, r0
 80024e0:	3358      	adds	r3, #88	; 0x58
 80024e2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	4613      	mov	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	440b      	add	r3, r1
 80024f2:	3358      	adds	r3, #88	; 0x58
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b03      	cmp	r3, #3
 80024f8:	d914      	bls.n	8002524 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	4613      	mov	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	440b      	add	r3, r1
 8002508:	3358      	adds	r3, #88	; 0x58
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	4613      	mov	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	440b      	add	r3, r1
 800251c:	335c      	adds	r3, #92	; 0x5c
 800251e:	2204      	movs	r2, #4
 8002520:	701a      	strb	r2, [r3, #0]
 8002522:	e009      	b.n	8002538 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	440b      	add	r3, r1
 8002532:	335c      	adds	r3, #92	; 0x5c
 8002534:	2202      	movs	r2, #2
 8002536:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	015a      	lsls	r2, r3, #5
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	4413      	add	r3, r2
 8002540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800254e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002556:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	015a      	lsls	r2, r3, #5
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4413      	add	r3, r2
 8002560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002564:	461a      	mov	r2, r3
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	015a      	lsls	r2, r3, #5
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4413      	add	r3, r2
 8002572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002576:	461a      	mov	r2, r3
 8002578:	2302      	movs	r3, #2
 800257a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	b2d8      	uxtb	r0, r3
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	4613      	mov	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	440b      	add	r3, r1
 800258e:	335c      	adds	r3, #92	; 0x5c
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	461a      	mov	r2, r3
 8002594:	4601      	mov	r1, r0
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f008 fecc 	bl	800b334 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800259c:	bf00      	nop
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08a      	sub	sp, #40	; 0x28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	f003 030f 	and.w	r3, r3, #15
 80025c4:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	0c5b      	lsrs	r3, r3, #17
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	091b      	lsrs	r3, r3, #4
 80025d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025d8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d003      	beq.n	80025e8 <HCD_RXQLVL_IRQHandler+0x44>
 80025e0:	2b05      	cmp	r3, #5
 80025e2:	f000 8082 	beq.w	80026ea <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80025e6:	e083      	b.n	80026f0 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d07f      	beq.n	80026ee <HCD_RXQLVL_IRQHandler+0x14a>
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4613      	mov	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	440b      	add	r3, r1
 80025fc:	3344      	adds	r3, #68	; 0x44
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d074      	beq.n	80026ee <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6818      	ldr	r0, [r3, #0]
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4613      	mov	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	440b      	add	r3, r1
 8002616:	3344      	adds	r3, #68	; 0x44
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	b292      	uxth	r2, r2
 800261e:	4619      	mov	r1, r3
 8002620:	f002 fce3 	bl	8004fea <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4613      	mov	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	440b      	add	r3, r1
 8002632:	3344      	adds	r3, #68	; 0x44
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	18d1      	adds	r1, r2, r3
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4613      	mov	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4403      	add	r3, r0
 8002648:	3344      	adds	r3, #68	; 0x44
 800264a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4613      	mov	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	440b      	add	r3, r1
 800265a:	334c      	adds	r3, #76	; 0x4c
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	18d1      	adds	r1, r2, r3
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4613      	mov	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	4403      	add	r3, r0
 8002670:	334c      	adds	r3, #76	; 0x4c
 8002672:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	015a      	lsls	r2, r3, #5
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	4413      	add	r3, r2
 800267c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002680:	691a      	ldr	r2, [r3, #16]
 8002682:	4b1d      	ldr	r3, [pc, #116]	; (80026f8 <HCD_RXQLVL_IRQHandler+0x154>)
 8002684:	4013      	ands	r3, r2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d031      	beq.n	80026ee <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	015a      	lsls	r2, r3, #5
 800268e:	6a3b      	ldr	r3, [r7, #32]
 8002690:	4413      	add	r3, r2
 8002692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026a0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026a8:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	015a      	lsls	r2, r3, #5
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	4413      	add	r3, r2
 80026b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b6:	461a      	mov	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	440b      	add	r3, r1
 80026ca:	3350      	adds	r3, #80	; 0x50
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	f083 0301 	eor.w	r3, r3, #1
 80026d2:	b2d8      	uxtb	r0, r3
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4613      	mov	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	440b      	add	r3, r1
 80026e2:	3350      	adds	r3, #80	; 0x50
 80026e4:	4602      	mov	r2, r0
 80026e6:	701a      	strb	r2, [r3, #0]
      break;
 80026e8:	e001      	b.n	80026ee <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80026ea:	bf00      	nop
 80026ec:	e000      	b.n	80026f0 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80026ee:	bf00      	nop
  }
}
 80026f0:	bf00      	nop
 80026f2:	3728      	adds	r7, #40	; 0x28
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	1ff80000 	.word	0x1ff80000

080026fc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002728:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b02      	cmp	r3, #2
 8002732:	d113      	bne.n	800275c <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b01      	cmp	r3, #1
 800273c:	d10a      	bne.n	8002754 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	699a      	ldr	r2, [r3, #24]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800274c:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f008 fdd4 	bl	800b2fc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	f043 0302 	orr.w	r3, r3, #2
 800275a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f003 0308 	and.w	r3, r3, #8
 8002762:	2b08      	cmp	r3, #8
 8002764:	d147      	bne.n	80027f6 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	f043 0308 	orr.w	r3, r3, #8
 800276c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b04      	cmp	r3, #4
 8002776:	d129      	bne.n	80027cc <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	2b02      	cmp	r3, #2
 800277e:	d113      	bne.n	80027a8 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002786:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800278a:	d106      	bne.n	800279a <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2102      	movs	r1, #2
 8002792:	4618      	mov	r0, r3
 8002794:	f002 fd64 	bl	8005260 <USB_InitFSLSPClkSel>
 8002798:	e011      	b.n	80027be <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2101      	movs	r1, #1
 80027a0:	4618      	mov	r0, r3
 80027a2:	f002 fd5d 	bl	8005260 <USB_InitFSLSPClkSel>
 80027a6:	e00a      	b.n	80027be <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d106      	bne.n	80027be <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027b6:	461a      	mov	r2, r3
 80027b8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80027bc:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f008 fdca 	bl	800b358 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f008 fd99 	bl	800b2fc <HAL_HCD_Connect_Callback>
 80027ca:	e014      	b.n	80027f6 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f008 fdd1 	bl	800b374 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80027e0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80027e4:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	699a      	ldr	r2, [r3, #24]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80027f4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f003 0320 	and.w	r3, r3, #32
 80027fc:	2b20      	cmp	r3, #32
 80027fe:	d103      	bne.n	8002808 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	f043 0320 	orr.w	r3, r3, #32
 8002806:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800280e:	461a      	mov	r2, r3
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	6013      	str	r3, [r2, #0]
}
 8002814:	bf00      	nop
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e10f      	b.n	8002a4e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d106      	bne.n	8002848 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f007 ff4c 	bl	800a6e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2224      	movs	r2, #36	; 0x24
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0201 	bic.w	r2, r2, #1
 800285e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002860:	f001 f8f0 	bl	8003a44 <HAL_RCC_GetPCLK1Freq>
 8002864:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	4a7b      	ldr	r2, [pc, #492]	; (8002a58 <HAL_I2C_Init+0x23c>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d807      	bhi.n	8002880 <HAL_I2C_Init+0x64>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4a7a      	ldr	r2, [pc, #488]	; (8002a5c <HAL_I2C_Init+0x240>)
 8002874:	4293      	cmp	r3, r2
 8002876:	bf94      	ite	ls
 8002878:	2301      	movls	r3, #1
 800287a:	2300      	movhi	r3, #0
 800287c:	b2db      	uxtb	r3, r3
 800287e:	e006      	b.n	800288e <HAL_I2C_Init+0x72>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4a77      	ldr	r2, [pc, #476]	; (8002a60 <HAL_I2C_Init+0x244>)
 8002884:	4293      	cmp	r3, r2
 8002886:	bf94      	ite	ls
 8002888:	2301      	movls	r3, #1
 800288a:	2300      	movhi	r3, #0
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e0db      	b.n	8002a4e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	4a72      	ldr	r2, [pc, #456]	; (8002a64 <HAL_I2C_Init+0x248>)
 800289a:	fba2 2303 	umull	r2, r3, r2, r3
 800289e:	0c9b      	lsrs	r3, r3, #18
 80028a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	4a64      	ldr	r2, [pc, #400]	; (8002a58 <HAL_I2C_Init+0x23c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d802      	bhi.n	80028d0 <HAL_I2C_Init+0xb4>
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	3301      	adds	r3, #1
 80028ce:	e009      	b.n	80028e4 <HAL_I2C_Init+0xc8>
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028d6:	fb02 f303 	mul.w	r3, r2, r3
 80028da:	4a63      	ldr	r2, [pc, #396]	; (8002a68 <HAL_I2C_Init+0x24c>)
 80028dc:	fba2 2303 	umull	r2, r3, r2, r3
 80028e0:	099b      	lsrs	r3, r3, #6
 80028e2:	3301      	adds	r3, #1
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6812      	ldr	r2, [r2, #0]
 80028e8:	430b      	orrs	r3, r1
 80028ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	4956      	ldr	r1, [pc, #344]	; (8002a58 <HAL_I2C_Init+0x23c>)
 8002900:	428b      	cmp	r3, r1
 8002902:	d80d      	bhi.n	8002920 <HAL_I2C_Init+0x104>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	1e59      	subs	r1, r3, #1
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002912:	3301      	adds	r3, #1
 8002914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002918:	2b04      	cmp	r3, #4
 800291a:	bf38      	it	cc
 800291c:	2304      	movcc	r3, #4
 800291e:	e04f      	b.n	80029c0 <HAL_I2C_Init+0x1a4>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d111      	bne.n	800294c <HAL_I2C_Init+0x130>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	1e58      	subs	r0, r3, #1
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6859      	ldr	r1, [r3, #4]
 8002930:	460b      	mov	r3, r1
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	440b      	add	r3, r1
 8002936:	fbb0 f3f3 	udiv	r3, r0, r3
 800293a:	3301      	adds	r3, #1
 800293c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002940:	2b00      	cmp	r3, #0
 8002942:	bf0c      	ite	eq
 8002944:	2301      	moveq	r3, #1
 8002946:	2300      	movne	r3, #0
 8002948:	b2db      	uxtb	r3, r3
 800294a:	e012      	b.n	8002972 <HAL_I2C_Init+0x156>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	1e58      	subs	r0, r3, #1
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6859      	ldr	r1, [r3, #4]
 8002954:	460b      	mov	r3, r1
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	0099      	lsls	r1, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002962:	3301      	adds	r3, #1
 8002964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002968:	2b00      	cmp	r3, #0
 800296a:	bf0c      	ite	eq
 800296c:	2301      	moveq	r3, #1
 800296e:	2300      	movne	r3, #0
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <HAL_I2C_Init+0x15e>
 8002976:	2301      	movs	r3, #1
 8002978:	e022      	b.n	80029c0 <HAL_I2C_Init+0x1a4>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10e      	bne.n	80029a0 <HAL_I2C_Init+0x184>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	1e58      	subs	r0, r3, #1
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6859      	ldr	r1, [r3, #4]
 800298a:	460b      	mov	r3, r1
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	440b      	add	r3, r1
 8002990:	fbb0 f3f3 	udiv	r3, r0, r3
 8002994:	3301      	adds	r3, #1
 8002996:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800299a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800299e:	e00f      	b.n	80029c0 <HAL_I2C_Init+0x1a4>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	1e58      	subs	r0, r3, #1
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6859      	ldr	r1, [r3, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	0099      	lsls	r1, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029b6:	3301      	adds	r3, #1
 80029b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	6809      	ldr	r1, [r1, #0]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69da      	ldr	r2, [r3, #28]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6911      	ldr	r1, [r2, #16]
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	68d2      	ldr	r2, [r2, #12]
 80029fa:	4311      	orrs	r1, r2
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6812      	ldr	r2, [r2, #0]
 8002a00:	430b      	orrs	r3, r1
 8002a02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	695a      	ldr	r2, [r3, #20]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0201 	orr.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2220      	movs	r2, #32
 8002a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	000186a0 	.word	0x000186a0
 8002a5c:	001e847f 	.word	0x001e847f
 8002a60:	003d08ff 	.word	0x003d08ff
 8002a64:	431bde83 	.word	0x431bde83
 8002a68:	10624dd3 	.word	0x10624dd3

08002a6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b20      	cmp	r3, #32
 8002a80:	d129      	bne.n	8002ad6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2224      	movs	r2, #36	; 0x24
 8002a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0201 	bic.w	r2, r2, #1
 8002a98:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 0210 	bic.w	r2, r2, #16
 8002aa8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f042 0201 	orr.w	r2, r2, #1
 8002ac8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2220      	movs	r2, #32
 8002ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	e000      	b.n	8002ad8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002ad6:	2302      	movs	r3, #2
  }
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002aee:	2300      	movs	r3, #0
 8002af0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b20      	cmp	r3, #32
 8002afc:	d12a      	bne.n	8002b54 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2224      	movs	r2, #36	; 0x24
 8002b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 0201 	bic.w	r2, r2, #1
 8002b14:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002b1e:	89fb      	ldrh	r3, [r7, #14]
 8002b20:	f023 030f 	bic.w	r3, r3, #15
 8002b24:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	89fb      	ldrh	r3, [r7, #14]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	89fa      	ldrh	r2, [r7, #14]
 8002b36:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0201 	orr.w	r2, r2, #1
 8002b46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b50:	2300      	movs	r3, #0
 8002b52:	e000      	b.n	8002b56 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002b54:	2302      	movs	r3, #2
  }
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
	...

08002b64 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e0bf      	b.n	8002cf6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d106      	bne.n	8002b90 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f007 fe92 	bl	800a8b4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2202      	movs	r2, #2
 8002b94:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699a      	ldr	r2, [r3, #24]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002ba6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6999      	ldr	r1, [r3, #24]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002bbc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6899      	ldr	r1, [r3, #8]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	4b4a      	ldr	r3, [pc, #296]	; (8002d00 <HAL_LTDC_Init+0x19c>)
 8002bd8:	400b      	ands	r3, r1
 8002bda:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	041b      	lsls	r3, r3, #16
 8002be2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6899      	ldr	r1, [r3, #8]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699a      	ldr	r2, [r3, #24]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68d9      	ldr	r1, [r3, #12]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	4b3e      	ldr	r3, [pc, #248]	; (8002d00 <HAL_LTDC_Init+0x19c>)
 8002c06:	400b      	ands	r3, r1
 8002c08:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	041b      	lsls	r3, r3, #16
 8002c10:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68d9      	ldr	r1, [r3, #12]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a1a      	ldr	r2, [r3, #32]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6919      	ldr	r1, [r3, #16]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	4b33      	ldr	r3, [pc, #204]	; (8002d00 <HAL_LTDC_Init+0x19c>)
 8002c34:	400b      	ands	r3, r1
 8002c36:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	041b      	lsls	r3, r3, #16
 8002c3e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6919      	ldr	r1, [r3, #16]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6959      	ldr	r1, [r3, #20]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	4b27      	ldr	r3, [pc, #156]	; (8002d00 <HAL_LTDC_Init+0x19c>)
 8002c62:	400b      	ands	r3, r1
 8002c64:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6a:	041b      	lsls	r3, r3, #16
 8002c6c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6959      	ldr	r1, [r3, #20]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c8a:	021b      	lsls	r3, r3, #8
 8002c8c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002c94:	041b      	lsls	r3, r3, #16
 8002c96:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002ca6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0206 	orr.w	r2, r2, #6
 8002cd2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699a      	ldr	r2, [r3, #24]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0201 	orr.w	r2, r2, #1
 8002ce2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	f000f800 	.word	0xf000f800

08002d04 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d12:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d1a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d023      	beq.n	8002d6e <HAL_LTDC_IRQHandler+0x6a>
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d01e      	beq.n	8002d6e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0204 	bic.w	r2, r2, #4
 8002d3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2204      	movs	r2, #4
 8002d46:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002d4e:	f043 0201 	orr.w	r2, r3, #1
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2204      	movs	r2, #4
 8002d5c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 f86f 	bl	8002e4c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d023      	beq.n	8002dc0 <HAL_LTDC_IRQHandler+0xbc>
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d01e      	beq.n	8002dc0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 0202 	bic.w	r2, r2, #2
 8002d90:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2202      	movs	r2, #2
 8002d98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002da0:	f043 0202 	orr.w	r2, r3, #2
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2204      	movs	r2, #4
 8002dae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f846 	bl	8002e4c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d01b      	beq.n	8002e02 <HAL_LTDC_IRQHandler+0xfe>
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d016      	beq.n	8002e02 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0201 	bic.w	r2, r2, #1
 8002de2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2201      	movs	r2, #1
 8002dea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 f82f 	bl	8002e60 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f003 0308 	and.w	r3, r3, #8
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d01b      	beq.n	8002e44 <HAL_LTDC_IRQHandler+0x140>
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	f003 0308 	and.w	r3, r3, #8
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d016      	beq.n	8002e44 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0208 	bic.w	r2, r2, #8
 8002e24:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2208      	movs	r2, #8
 8002e2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f818 	bl	8002e74 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8002e44:	bf00      	nop
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002e88:	b5b0      	push	{r4, r5, r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d101      	bne.n	8002ea2 <HAL_LTDC_ConfigLayer+0x1a>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	e02c      	b.n	8002efc <HAL_LTDC_ConfigLayer+0x74>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2202      	movs	r2, #2
 8002eae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2134      	movs	r1, #52	; 0x34
 8002eb8:	fb01 f303 	mul.w	r3, r1, r3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	4614      	mov	r4, r2
 8002ec6:	461d      	mov	r5, r3
 8002ec8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002eca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ecc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ece:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ed0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ed2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ed4:	682b      	ldr	r3, [r5, #0]
 8002ed6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	68b9      	ldr	r1, [r7, #8]
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 f811 	bl	8002f04 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bdb0      	pop	{r4, r5, r7, pc}

08002f04 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b089      	sub	sp, #36	; 0x24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	0c1b      	lsrs	r3, r3, #16
 8002f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f20:	4413      	add	r3, r2
 8002f22:	041b      	lsls	r3, r3, #16
 8002f24:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	01db      	lsls	r3, r3, #7
 8002f30:	4413      	add	r3, r2
 8002f32:	3384      	adds	r3, #132	; 0x84
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	6812      	ldr	r2, [r2, #0]
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	01d2      	lsls	r2, r2, #7
 8002f40:	440a      	add	r2, r1
 8002f42:	3284      	adds	r2, #132	; 0x84
 8002f44:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002f48:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	0c1b      	lsrs	r3, r3, #16
 8002f56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f5a:	4413      	add	r3, r2
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4619      	mov	r1, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	01db      	lsls	r3, r3, #7
 8002f68:	440b      	add	r3, r1
 8002f6a:	3384      	adds	r3, #132	; 0x84
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f82:	4413      	add	r3, r2
 8002f84:	041b      	lsls	r3, r3, #16
 8002f86:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	01db      	lsls	r3, r3, #7
 8002f92:	4413      	add	r3, r2
 8002f94:	3384      	adds	r3, #132	; 0x84
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	6812      	ldr	r2, [r2, #0]
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	01d2      	lsls	r2, r2, #7
 8002fa2:	440a      	add	r2, r1
 8002fa4:	3284      	adds	r2, #132	; 0x84
 8002fa6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002faa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fba:	4413      	add	r3, r2
 8002fbc:	1c5a      	adds	r2, r3, #1
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	01db      	lsls	r3, r3, #7
 8002fc8:	440b      	add	r3, r1
 8002fca:	3384      	adds	r3, #132	; 0x84
 8002fcc:	4619      	mov	r1, r3
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	461a      	mov	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	01db      	lsls	r3, r3, #7
 8002fde:	4413      	add	r3, r2
 8002fe0:	3384      	adds	r3, #132	; 0x84
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	4611      	mov	r1, r2
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	01d2      	lsls	r2, r2, #7
 8002fee:	440a      	add	r2, r1
 8002ff0:	3284      	adds	r2, #132	; 0x84
 8002ff2:	f023 0307 	bic.w	r3, r3, #7
 8002ff6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	01db      	lsls	r3, r3, #7
 8003002:	4413      	add	r3, r2
 8003004:	3384      	adds	r3, #132	; 0x84
 8003006:	461a      	mov	r2, r3
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003014:	021b      	lsls	r3, r3, #8
 8003016:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800301e:	041b      	lsls	r3, r3, #16
 8003020:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	061b      	lsls	r3, r3, #24
 8003028:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	461a      	mov	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	01db      	lsls	r3, r3, #7
 8003034:	4413      	add	r3, r2
 8003036:	3384      	adds	r3, #132	; 0x84
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	461a      	mov	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	01db      	lsls	r3, r3, #7
 8003044:	4413      	add	r3, r2
 8003046:	3384      	adds	r3, #132	; 0x84
 8003048:	461a      	mov	r2, r3
 800304a:	2300      	movs	r3, #0
 800304c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003054:	461a      	mov	r2, r3
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	431a      	orrs	r2, r3
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	431a      	orrs	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4619      	mov	r1, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	01db      	lsls	r3, r3, #7
 8003068:	440b      	add	r3, r1
 800306a:	3384      	adds	r3, #132	; 0x84
 800306c:	4619      	mov	r1, r3
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	4313      	orrs	r3, r2
 8003072:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	461a      	mov	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	01db      	lsls	r3, r3, #7
 800307e:	4413      	add	r3, r2
 8003080:	3384      	adds	r3, #132	; 0x84
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	6812      	ldr	r2, [r2, #0]
 8003088:	4611      	mov	r1, r2
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	01d2      	lsls	r2, r2, #7
 800308e:	440a      	add	r2, r1
 8003090:	3284      	adds	r2, #132	; 0x84
 8003092:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003096:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	461a      	mov	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	01db      	lsls	r3, r3, #7
 80030a2:	4413      	add	r3, r2
 80030a4:	3384      	adds	r3, #132	; 0x84
 80030a6:	461a      	mov	r2, r3
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	461a      	mov	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	01db      	lsls	r3, r3, #7
 80030b8:	4413      	add	r3, r2
 80030ba:	3384      	adds	r3, #132	; 0x84
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	6812      	ldr	r2, [r2, #0]
 80030c2:	4611      	mov	r1, r2
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	01d2      	lsls	r2, r2, #7
 80030c8:	440a      	add	r2, r1
 80030ca:	3284      	adds	r2, #132	; 0x84
 80030cc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80030d0:	f023 0307 	bic.w	r3, r3, #7
 80030d4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	69da      	ldr	r2, [r3, #28]
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	68f9      	ldr	r1, [r7, #12]
 80030e0:	6809      	ldr	r1, [r1, #0]
 80030e2:	4608      	mov	r0, r1
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	01c9      	lsls	r1, r1, #7
 80030e8:	4401      	add	r1, r0
 80030ea:	3184      	adds	r1, #132	; 0x84
 80030ec:	4313      	orrs	r3, r2
 80030ee:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	461a      	mov	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	01db      	lsls	r3, r3, #7
 80030fa:	4413      	add	r3, r2
 80030fc:	3384      	adds	r3, #132	; 0x84
 80030fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	461a      	mov	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	01db      	lsls	r3, r3, #7
 800310a:	4413      	add	r3, r2
 800310c:	3384      	adds	r3, #132	; 0x84
 800310e:	461a      	mov	r2, r3
 8003110:	2300      	movs	r3, #0
 8003112:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	461a      	mov	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	01db      	lsls	r3, r3, #7
 800311e:	4413      	add	r3, r2
 8003120:	3384      	adds	r3, #132	; 0x84
 8003122:	461a      	mov	r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d102      	bne.n	8003138 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003132:	2304      	movs	r3, #4
 8003134:	61fb      	str	r3, [r7, #28]
 8003136:	e01b      	b.n	8003170 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d102      	bne.n	8003146 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003140:	2303      	movs	r3, #3
 8003142:	61fb      	str	r3, [r7, #28]
 8003144:	e014      	b.n	8003170 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	2b04      	cmp	r3, #4
 800314c:	d00b      	beq.n	8003166 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003152:	2b02      	cmp	r3, #2
 8003154:	d007      	beq.n	8003166 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800315a:	2b03      	cmp	r3, #3
 800315c:	d003      	beq.n	8003166 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003162:	2b07      	cmp	r3, #7
 8003164:	d102      	bne.n	800316c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8003166:	2302      	movs	r3, #2
 8003168:	61fb      	str	r3, [r7, #28]
 800316a:	e001      	b.n	8003170 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800316c:	2301      	movs	r3, #1
 800316e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	461a      	mov	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	01db      	lsls	r3, r3, #7
 800317a:	4413      	add	r3, r2
 800317c:	3384      	adds	r3, #132	; 0x84
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	6812      	ldr	r2, [r2, #0]
 8003184:	4611      	mov	r1, r2
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	01d2      	lsls	r2, r2, #7
 800318a:	440a      	add	r2, r1
 800318c:	3284      	adds	r2, #132	; 0x84
 800318e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003192:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003198:	69fa      	ldr	r2, [r7, #28]
 800319a:	fb02 f303 	mul.w	r3, r2, r3
 800319e:	041a      	lsls	r2, r3, #16
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	6859      	ldr	r1, [r3, #4]
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	1acb      	subs	r3, r1, r3
 80031aa:	69f9      	ldr	r1, [r7, #28]
 80031ac:	fb01 f303 	mul.w	r3, r1, r3
 80031b0:	3303      	adds	r3, #3
 80031b2:	68f9      	ldr	r1, [r7, #12]
 80031b4:	6809      	ldr	r1, [r1, #0]
 80031b6:	4608      	mov	r0, r1
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	01c9      	lsls	r1, r1, #7
 80031bc:	4401      	add	r1, r0
 80031be:	3184      	adds	r1, #132	; 0x84
 80031c0:	4313      	orrs	r3, r2
 80031c2:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	461a      	mov	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	01db      	lsls	r3, r3, #7
 80031ce:	4413      	add	r3, r2
 80031d0:	3384      	adds	r3, #132	; 0x84
 80031d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	6812      	ldr	r2, [r2, #0]
 80031d8:	4611      	mov	r1, r2
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	01d2      	lsls	r2, r2, #7
 80031de:	440a      	add	r2, r1
 80031e0:	3284      	adds	r2, #132	; 0x84
 80031e2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80031e6:	f023 0307 	bic.w	r3, r3, #7
 80031ea:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	461a      	mov	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	01db      	lsls	r3, r3, #7
 80031f6:	4413      	add	r3, r2
 80031f8:	3384      	adds	r3, #132	; 0x84
 80031fa:	461a      	mov	r2, r3
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003200:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	461a      	mov	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	01db      	lsls	r3, r3, #7
 800320c:	4413      	add	r3, r2
 800320e:	3384      	adds	r3, #132	; 0x84
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	6812      	ldr	r2, [r2, #0]
 8003216:	4611      	mov	r1, r2
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	01d2      	lsls	r2, r2, #7
 800321c:	440a      	add	r2, r1
 800321e:	3284      	adds	r2, #132	; 0x84
 8003220:	f043 0301 	orr.w	r3, r3, #1
 8003224:	6013      	str	r3, [r2, #0]
}
 8003226:	bf00      	nop
 8003228:	3724      	adds	r7, #36	; 0x24
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
	...

08003234 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e22d      	b.n	80036a2 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d075      	beq.n	800333e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003252:	4ba3      	ldr	r3, [pc, #652]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 030c 	and.w	r3, r3, #12
 800325a:	2b04      	cmp	r3, #4
 800325c:	d00c      	beq.n	8003278 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800325e:	4ba0      	ldr	r3, [pc, #640]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003266:	2b08      	cmp	r3, #8
 8003268:	d112      	bne.n	8003290 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800326a:	4b9d      	ldr	r3, [pc, #628]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003272:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003276:	d10b      	bne.n	8003290 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003278:	4b99      	ldr	r3, [pc, #612]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d05b      	beq.n	800333c <HAL_RCC_OscConfig+0x108>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d157      	bne.n	800333c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e208      	b.n	80036a2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003298:	d106      	bne.n	80032a8 <HAL_RCC_OscConfig+0x74>
 800329a:	4b91      	ldr	r3, [pc, #580]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a90      	ldr	r2, [pc, #576]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 80032a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a4:	6013      	str	r3, [r2, #0]
 80032a6:	e01d      	b.n	80032e4 <HAL_RCC_OscConfig+0xb0>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032b0:	d10c      	bne.n	80032cc <HAL_RCC_OscConfig+0x98>
 80032b2:	4b8b      	ldr	r3, [pc, #556]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a8a      	ldr	r2, [pc, #552]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 80032b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	4b88      	ldr	r3, [pc, #544]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a87      	ldr	r2, [pc, #540]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 80032c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	e00b      	b.n	80032e4 <HAL_RCC_OscConfig+0xb0>
 80032cc:	4b84      	ldr	r3, [pc, #528]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a83      	ldr	r2, [pc, #524]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 80032d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032d6:	6013      	str	r3, [r2, #0]
 80032d8:	4b81      	ldr	r3, [pc, #516]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a80      	ldr	r2, [pc, #512]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 80032de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d013      	beq.n	8003314 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ec:	f7fd f936 	bl	800055c <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032f4:	f7fd f932 	bl	800055c <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b64      	cmp	r3, #100	; 0x64
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e1cd      	b.n	80036a2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003306:	4b76      	ldr	r3, [pc, #472]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0f0      	beq.n	80032f4 <HAL_RCC_OscConfig+0xc0>
 8003312:	e014      	b.n	800333e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003314:	f7fd f922 	bl	800055c <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800331c:	f7fd f91e 	bl	800055c <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b64      	cmp	r3, #100	; 0x64
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e1b9      	b.n	80036a2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800332e:	4b6c      	ldr	r3, [pc, #432]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f0      	bne.n	800331c <HAL_RCC_OscConfig+0xe8>
 800333a:	e000      	b.n	800333e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800333c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d063      	beq.n	8003412 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800334a:	4b65      	ldr	r3, [pc, #404]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00b      	beq.n	800336e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003356:	4b62      	ldr	r3, [pc, #392]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800335e:	2b08      	cmp	r3, #8
 8003360:	d11c      	bne.n	800339c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003362:	4b5f      	ldr	r3, [pc, #380]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d116      	bne.n	800339c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800336e:	4b5c      	ldr	r3, [pc, #368]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d005      	beq.n	8003386 <HAL_RCC_OscConfig+0x152>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d001      	beq.n	8003386 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e18d      	b.n	80036a2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003386:	4b56      	ldr	r3, [pc, #344]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	4952      	ldr	r1, [pc, #328]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 8003396:	4313      	orrs	r3, r2
 8003398:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800339a:	e03a      	b.n	8003412 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d020      	beq.n	80033e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033a4:	4b4f      	ldr	r3, [pc, #316]	; (80034e4 <HAL_RCC_OscConfig+0x2b0>)
 80033a6:	2201      	movs	r2, #1
 80033a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033aa:	f7fd f8d7 	bl	800055c <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033b2:	f7fd f8d3 	bl	800055c <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e16e      	b.n	80036a2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c4:	4b46      	ldr	r3, [pc, #280]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0f0      	beq.n	80033b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d0:	4b43      	ldr	r3, [pc, #268]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	4940      	ldr	r1, [pc, #256]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	600b      	str	r3, [r1, #0]
 80033e4:	e015      	b.n	8003412 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033e6:	4b3f      	ldr	r3, [pc, #252]	; (80034e4 <HAL_RCC_OscConfig+0x2b0>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ec:	f7fd f8b6 	bl	800055c <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033f4:	f7fd f8b2 	bl	800055c <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e14d      	b.n	80036a2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003406:	4b36      	ldr	r3, [pc, #216]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f0      	bne.n	80033f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0308 	and.w	r3, r3, #8
 800341a:	2b00      	cmp	r3, #0
 800341c:	d030      	beq.n	8003480 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d016      	beq.n	8003454 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003426:	4b30      	ldr	r3, [pc, #192]	; (80034e8 <HAL_RCC_OscConfig+0x2b4>)
 8003428:	2201      	movs	r2, #1
 800342a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342c:	f7fd f896 	bl	800055c <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003434:	f7fd f892 	bl	800055c <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e12d      	b.n	80036a2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003446:	4b26      	ldr	r3, [pc, #152]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 8003448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0x200>
 8003452:	e015      	b.n	8003480 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003454:	4b24      	ldr	r3, [pc, #144]	; (80034e8 <HAL_RCC_OscConfig+0x2b4>)
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800345a:	f7fd f87f 	bl	800055c <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003462:	f7fd f87b 	bl	800055c <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e116      	b.n	80036a2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003474:	4b1a      	ldr	r3, [pc, #104]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 8003476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1f0      	bne.n	8003462 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 80a0 	beq.w	80035ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800348e:	2300      	movs	r3, #0
 8003490:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003492:	4b13      	ldr	r3, [pc, #76]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10f      	bne.n	80034be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800349e:	2300      	movs	r3, #0
 80034a0:	60fb      	str	r3, [r7, #12]
 80034a2:	4b0f      	ldr	r3, [pc, #60]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	4a0e      	ldr	r2, [pc, #56]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 80034a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ac:	6413      	str	r3, [r2, #64]	; 0x40
 80034ae:	4b0c      	ldr	r3, [pc, #48]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80034ba:	2301      	movs	r3, #1
 80034bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034be:	4b0b      	ldr	r3, [pc, #44]	; (80034ec <HAL_RCC_OscConfig+0x2b8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d121      	bne.n	800350e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ca:	4b08      	ldr	r3, [pc, #32]	; (80034ec <HAL_RCC_OscConfig+0x2b8>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a07      	ldr	r2, [pc, #28]	; (80034ec <HAL_RCC_OscConfig+0x2b8>)
 80034d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034d6:	f7fd f841 	bl	800055c <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034dc:	e011      	b.n	8003502 <HAL_RCC_OscConfig+0x2ce>
 80034de:	bf00      	nop
 80034e0:	40023800 	.word	0x40023800
 80034e4:	42470000 	.word	0x42470000
 80034e8:	42470e80 	.word	0x42470e80
 80034ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034f0:	f7fd f834 	bl	800055c <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e0cf      	b.n	80036a2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003502:	4b6a      	ldr	r3, [pc, #424]	; (80036ac <HAL_RCC_OscConfig+0x478>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0f0      	beq.n	80034f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d106      	bne.n	8003524 <HAL_RCC_OscConfig+0x2f0>
 8003516:	4b66      	ldr	r3, [pc, #408]	; (80036b0 <HAL_RCC_OscConfig+0x47c>)
 8003518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351a:	4a65      	ldr	r2, [pc, #404]	; (80036b0 <HAL_RCC_OscConfig+0x47c>)
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	6713      	str	r3, [r2, #112]	; 0x70
 8003522:	e01c      	b.n	800355e <HAL_RCC_OscConfig+0x32a>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	2b05      	cmp	r3, #5
 800352a:	d10c      	bne.n	8003546 <HAL_RCC_OscConfig+0x312>
 800352c:	4b60      	ldr	r3, [pc, #384]	; (80036b0 <HAL_RCC_OscConfig+0x47c>)
 800352e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003530:	4a5f      	ldr	r2, [pc, #380]	; (80036b0 <HAL_RCC_OscConfig+0x47c>)
 8003532:	f043 0304 	orr.w	r3, r3, #4
 8003536:	6713      	str	r3, [r2, #112]	; 0x70
 8003538:	4b5d      	ldr	r3, [pc, #372]	; (80036b0 <HAL_RCC_OscConfig+0x47c>)
 800353a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353c:	4a5c      	ldr	r2, [pc, #368]	; (80036b0 <HAL_RCC_OscConfig+0x47c>)
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	6713      	str	r3, [r2, #112]	; 0x70
 8003544:	e00b      	b.n	800355e <HAL_RCC_OscConfig+0x32a>
 8003546:	4b5a      	ldr	r3, [pc, #360]	; (80036b0 <HAL_RCC_OscConfig+0x47c>)
 8003548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354a:	4a59      	ldr	r2, [pc, #356]	; (80036b0 <HAL_RCC_OscConfig+0x47c>)
 800354c:	f023 0301 	bic.w	r3, r3, #1
 8003550:	6713      	str	r3, [r2, #112]	; 0x70
 8003552:	4b57      	ldr	r3, [pc, #348]	; (80036b0 <HAL_RCC_OscConfig+0x47c>)
 8003554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003556:	4a56      	ldr	r2, [pc, #344]	; (80036b0 <HAL_RCC_OscConfig+0x47c>)
 8003558:	f023 0304 	bic.w	r3, r3, #4
 800355c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d015      	beq.n	8003592 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003566:	f7fc fff9 	bl	800055c <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800356c:	e00a      	b.n	8003584 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800356e:	f7fc fff5 	bl	800055c <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	f241 3288 	movw	r2, #5000	; 0x1388
 800357c:	4293      	cmp	r3, r2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e08e      	b.n	80036a2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003584:	4b4a      	ldr	r3, [pc, #296]	; (80036b0 <HAL_RCC_OscConfig+0x47c>)
 8003586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0ee      	beq.n	800356e <HAL_RCC_OscConfig+0x33a>
 8003590:	e014      	b.n	80035bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003592:	f7fc ffe3 	bl	800055c <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003598:	e00a      	b.n	80035b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800359a:	f7fc ffdf 	bl	800055c <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e078      	b.n	80036a2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b0:	4b3f      	ldr	r3, [pc, #252]	; (80036b0 <HAL_RCC_OscConfig+0x47c>)
 80035b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1ee      	bne.n	800359a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035bc:	7dfb      	ldrb	r3, [r7, #23]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d105      	bne.n	80035ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035c2:	4b3b      	ldr	r3, [pc, #236]	; (80036b0 <HAL_RCC_OscConfig+0x47c>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	4a3a      	ldr	r2, [pc, #232]	; (80036b0 <HAL_RCC_OscConfig+0x47c>)
 80035c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d064      	beq.n	80036a0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035d6:	4b36      	ldr	r3, [pc, #216]	; (80036b0 <HAL_RCC_OscConfig+0x47c>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 030c 	and.w	r3, r3, #12
 80035de:	2b08      	cmp	r3, #8
 80035e0:	d05c      	beq.n	800369c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d141      	bne.n	800366e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ea:	4b32      	ldr	r3, [pc, #200]	; (80036b4 <HAL_RCC_OscConfig+0x480>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f0:	f7fc ffb4 	bl	800055c <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035f8:	f7fc ffb0 	bl	800055c <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e04b      	b.n	80036a2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800360a:	4b29      	ldr	r3, [pc, #164]	; (80036b0 <HAL_RCC_OscConfig+0x47c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f0      	bne.n	80035f8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	69da      	ldr	r2, [r3, #28]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	431a      	orrs	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	019b      	lsls	r3, r3, #6
 8003626:	431a      	orrs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362c:	085b      	lsrs	r3, r3, #1
 800362e:	3b01      	subs	r3, #1
 8003630:	041b      	lsls	r3, r3, #16
 8003632:	431a      	orrs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003638:	061b      	lsls	r3, r3, #24
 800363a:	491d      	ldr	r1, [pc, #116]	; (80036b0 <HAL_RCC_OscConfig+0x47c>)
 800363c:	4313      	orrs	r3, r2
 800363e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003640:	4b1c      	ldr	r3, [pc, #112]	; (80036b4 <HAL_RCC_OscConfig+0x480>)
 8003642:	2201      	movs	r2, #1
 8003644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003646:	f7fc ff89 	bl	800055c <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800364c:	e008      	b.n	8003660 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800364e:	f7fc ff85 	bl	800055c <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e020      	b.n	80036a2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003660:	4b13      	ldr	r3, [pc, #76]	; (80036b0 <HAL_RCC_OscConfig+0x47c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d0f0      	beq.n	800364e <HAL_RCC_OscConfig+0x41a>
 800366c:	e018      	b.n	80036a0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800366e:	4b11      	ldr	r3, [pc, #68]	; (80036b4 <HAL_RCC_OscConfig+0x480>)
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003674:	f7fc ff72 	bl	800055c <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800367c:	f7fc ff6e 	bl	800055c <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e009      	b.n	80036a2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800368e:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <HAL_RCC_OscConfig+0x47c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1f0      	bne.n	800367c <HAL_RCC_OscConfig+0x448>
 800369a:	e001      	b.n	80036a0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e000      	b.n	80036a2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	40007000 	.word	0x40007000
 80036b0:	40023800 	.word	0x40023800
 80036b4:	42470060 	.word	0x42470060

080036b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e0ca      	b.n	8003862 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036cc:	4b67      	ldr	r3, [pc, #412]	; (800386c <HAL_RCC_ClockConfig+0x1b4>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 030f 	and.w	r3, r3, #15
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d90c      	bls.n	80036f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036da:	4b64      	ldr	r3, [pc, #400]	; (800386c <HAL_RCC_ClockConfig+0x1b4>)
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	b2d2      	uxtb	r2, r2
 80036e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e2:	4b62      	ldr	r3, [pc, #392]	; (800386c <HAL_RCC_ClockConfig+0x1b4>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d001      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e0b6      	b.n	8003862 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d020      	beq.n	8003742 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b00      	cmp	r3, #0
 800370a:	d005      	beq.n	8003718 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800370c:	4b58      	ldr	r3, [pc, #352]	; (8003870 <HAL_RCC_ClockConfig+0x1b8>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	4a57      	ldr	r2, [pc, #348]	; (8003870 <HAL_RCC_ClockConfig+0x1b8>)
 8003712:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003716:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0308 	and.w	r3, r3, #8
 8003720:	2b00      	cmp	r3, #0
 8003722:	d005      	beq.n	8003730 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003724:	4b52      	ldr	r3, [pc, #328]	; (8003870 <HAL_RCC_ClockConfig+0x1b8>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	4a51      	ldr	r2, [pc, #324]	; (8003870 <HAL_RCC_ClockConfig+0x1b8>)
 800372a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800372e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003730:	4b4f      	ldr	r3, [pc, #316]	; (8003870 <HAL_RCC_ClockConfig+0x1b8>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	494c      	ldr	r1, [pc, #304]	; (8003870 <HAL_RCC_ClockConfig+0x1b8>)
 800373e:	4313      	orrs	r3, r2
 8003740:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d044      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d107      	bne.n	8003766 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003756:	4b46      	ldr	r3, [pc, #280]	; (8003870 <HAL_RCC_ClockConfig+0x1b8>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d119      	bne.n	8003796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e07d      	b.n	8003862 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b02      	cmp	r3, #2
 800376c:	d003      	beq.n	8003776 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003772:	2b03      	cmp	r3, #3
 8003774:	d107      	bne.n	8003786 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003776:	4b3e      	ldr	r3, [pc, #248]	; (8003870 <HAL_RCC_ClockConfig+0x1b8>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d109      	bne.n	8003796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e06d      	b.n	8003862 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003786:	4b3a      	ldr	r3, [pc, #232]	; (8003870 <HAL_RCC_ClockConfig+0x1b8>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e065      	b.n	8003862 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003796:	4b36      	ldr	r3, [pc, #216]	; (8003870 <HAL_RCC_ClockConfig+0x1b8>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f023 0203 	bic.w	r2, r3, #3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	4933      	ldr	r1, [pc, #204]	; (8003870 <HAL_RCC_ClockConfig+0x1b8>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037a8:	f7fc fed8 	bl	800055c <HAL_GetTick>
 80037ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ae:	e00a      	b.n	80037c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037b0:	f7fc fed4 	bl	800055c <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80037be:	4293      	cmp	r3, r2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e04d      	b.n	8003862 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c6:	4b2a      	ldr	r3, [pc, #168]	; (8003870 <HAL_RCC_ClockConfig+0x1b8>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 020c 	and.w	r2, r3, #12
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d1eb      	bne.n	80037b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037d8:	4b24      	ldr	r3, [pc, #144]	; (800386c <HAL_RCC_ClockConfig+0x1b4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 030f 	and.w	r3, r3, #15
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d20c      	bcs.n	8003800 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037e6:	4b21      	ldr	r3, [pc, #132]	; (800386c <HAL_RCC_ClockConfig+0x1b4>)
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	b2d2      	uxtb	r2, r2
 80037ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ee:	4b1f      	ldr	r3, [pc, #124]	; (800386c <HAL_RCC_ClockConfig+0x1b4>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d001      	beq.n	8003800 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e030      	b.n	8003862 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800380c:	4b18      	ldr	r3, [pc, #96]	; (8003870 <HAL_RCC_ClockConfig+0x1b8>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	4915      	ldr	r1, [pc, #84]	; (8003870 <HAL_RCC_ClockConfig+0x1b8>)
 800381a:	4313      	orrs	r3, r2
 800381c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b00      	cmp	r3, #0
 8003828:	d009      	beq.n	800383e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800382a:	4b11      	ldr	r3, [pc, #68]	; (8003870 <HAL_RCC_ClockConfig+0x1b8>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	490d      	ldr	r1, [pc, #52]	; (8003870 <HAL_RCC_ClockConfig+0x1b8>)
 800383a:	4313      	orrs	r3, r2
 800383c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800383e:	f000 f81d 	bl	800387c <HAL_RCC_GetSysClockFreq>
 8003842:	4601      	mov	r1, r0
 8003844:	4b0a      	ldr	r3, [pc, #40]	; (8003870 <HAL_RCC_ClockConfig+0x1b8>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	091b      	lsrs	r3, r3, #4
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	4a09      	ldr	r2, [pc, #36]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 8003850:	5cd3      	ldrb	r3, [r2, r3]
 8003852:	fa21 f303 	lsr.w	r3, r1, r3
 8003856:	4a08      	ldr	r2, [pc, #32]	; (8003878 <HAL_RCC_ClockConfig+0x1c0>)
 8003858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800385a:	2000      	movs	r0, #0
 800385c:	f007 faac 	bl	800adb8 <HAL_InitTick>

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40023c00 	.word	0x40023c00
 8003870:	40023800 	.word	0x40023800
 8003874:	0800ba74 	.word	0x0800ba74
 8003878:	20000028 	.word	0x20000028

0800387c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800387c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003882:	2300      	movs	r3, #0
 8003884:	607b      	str	r3, [r7, #4]
 8003886:	2300      	movs	r3, #0
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	2300      	movs	r3, #0
 800388c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800388e:	2300      	movs	r3, #0
 8003890:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003892:	4b63      	ldr	r3, [pc, #396]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	2b04      	cmp	r3, #4
 800389c:	d007      	beq.n	80038ae <HAL_RCC_GetSysClockFreq+0x32>
 800389e:	2b08      	cmp	r3, #8
 80038a0:	d008      	beq.n	80038b4 <HAL_RCC_GetSysClockFreq+0x38>
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f040 80b4 	bne.w	8003a10 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038a8:	4b5e      	ldr	r3, [pc, #376]	; (8003a24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80038aa:	60bb      	str	r3, [r7, #8]
       break;
 80038ac:	e0b3      	b.n	8003a16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038ae:	4b5e      	ldr	r3, [pc, #376]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80038b0:	60bb      	str	r3, [r7, #8]
      break;
 80038b2:	e0b0      	b.n	8003a16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038b4:	4b5a      	ldr	r3, [pc, #360]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038be:	4b58      	ldr	r3, [pc, #352]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d04a      	beq.n	8003960 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ca:	4b55      	ldr	r3, [pc, #340]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	099b      	lsrs	r3, r3, #6
 80038d0:	f04f 0400 	mov.w	r4, #0
 80038d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80038d8:	f04f 0200 	mov.w	r2, #0
 80038dc:	ea03 0501 	and.w	r5, r3, r1
 80038e0:	ea04 0602 	and.w	r6, r4, r2
 80038e4:	4629      	mov	r1, r5
 80038e6:	4632      	mov	r2, r6
 80038e8:	f04f 0300 	mov.w	r3, #0
 80038ec:	f04f 0400 	mov.w	r4, #0
 80038f0:	0154      	lsls	r4, r2, #5
 80038f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80038f6:	014b      	lsls	r3, r1, #5
 80038f8:	4619      	mov	r1, r3
 80038fa:	4622      	mov	r2, r4
 80038fc:	1b49      	subs	r1, r1, r5
 80038fe:	eb62 0206 	sbc.w	r2, r2, r6
 8003902:	f04f 0300 	mov.w	r3, #0
 8003906:	f04f 0400 	mov.w	r4, #0
 800390a:	0194      	lsls	r4, r2, #6
 800390c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003910:	018b      	lsls	r3, r1, #6
 8003912:	1a5b      	subs	r3, r3, r1
 8003914:	eb64 0402 	sbc.w	r4, r4, r2
 8003918:	f04f 0100 	mov.w	r1, #0
 800391c:	f04f 0200 	mov.w	r2, #0
 8003920:	00e2      	lsls	r2, r4, #3
 8003922:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003926:	00d9      	lsls	r1, r3, #3
 8003928:	460b      	mov	r3, r1
 800392a:	4614      	mov	r4, r2
 800392c:	195b      	adds	r3, r3, r5
 800392e:	eb44 0406 	adc.w	r4, r4, r6
 8003932:	f04f 0100 	mov.w	r1, #0
 8003936:	f04f 0200 	mov.w	r2, #0
 800393a:	0262      	lsls	r2, r4, #9
 800393c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003940:	0259      	lsls	r1, r3, #9
 8003942:	460b      	mov	r3, r1
 8003944:	4614      	mov	r4, r2
 8003946:	4618      	mov	r0, r3
 8003948:	4621      	mov	r1, r4
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f04f 0400 	mov.w	r4, #0
 8003950:	461a      	mov	r2, r3
 8003952:	4623      	mov	r3, r4
 8003954:	f7fc fc4c 	bl	80001f0 <__aeabi_uldivmod>
 8003958:	4603      	mov	r3, r0
 800395a:	460c      	mov	r4, r1
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	e049      	b.n	80039f4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003960:	4b2f      	ldr	r3, [pc, #188]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	099b      	lsrs	r3, r3, #6
 8003966:	f04f 0400 	mov.w	r4, #0
 800396a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800396e:	f04f 0200 	mov.w	r2, #0
 8003972:	ea03 0501 	and.w	r5, r3, r1
 8003976:	ea04 0602 	and.w	r6, r4, r2
 800397a:	4629      	mov	r1, r5
 800397c:	4632      	mov	r2, r6
 800397e:	f04f 0300 	mov.w	r3, #0
 8003982:	f04f 0400 	mov.w	r4, #0
 8003986:	0154      	lsls	r4, r2, #5
 8003988:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800398c:	014b      	lsls	r3, r1, #5
 800398e:	4619      	mov	r1, r3
 8003990:	4622      	mov	r2, r4
 8003992:	1b49      	subs	r1, r1, r5
 8003994:	eb62 0206 	sbc.w	r2, r2, r6
 8003998:	f04f 0300 	mov.w	r3, #0
 800399c:	f04f 0400 	mov.w	r4, #0
 80039a0:	0194      	lsls	r4, r2, #6
 80039a2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80039a6:	018b      	lsls	r3, r1, #6
 80039a8:	1a5b      	subs	r3, r3, r1
 80039aa:	eb64 0402 	sbc.w	r4, r4, r2
 80039ae:	f04f 0100 	mov.w	r1, #0
 80039b2:	f04f 0200 	mov.w	r2, #0
 80039b6:	00e2      	lsls	r2, r4, #3
 80039b8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80039bc:	00d9      	lsls	r1, r3, #3
 80039be:	460b      	mov	r3, r1
 80039c0:	4614      	mov	r4, r2
 80039c2:	195b      	adds	r3, r3, r5
 80039c4:	eb44 0406 	adc.w	r4, r4, r6
 80039c8:	f04f 0100 	mov.w	r1, #0
 80039cc:	f04f 0200 	mov.w	r2, #0
 80039d0:	02a2      	lsls	r2, r4, #10
 80039d2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80039d6:	0299      	lsls	r1, r3, #10
 80039d8:	460b      	mov	r3, r1
 80039da:	4614      	mov	r4, r2
 80039dc:	4618      	mov	r0, r3
 80039de:	4621      	mov	r1, r4
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f04f 0400 	mov.w	r4, #0
 80039e6:	461a      	mov	r2, r3
 80039e8:	4623      	mov	r3, r4
 80039ea:	f7fc fc01 	bl	80001f0 <__aeabi_uldivmod>
 80039ee:	4603      	mov	r3, r0
 80039f0:	460c      	mov	r4, r1
 80039f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039f4:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	0c1b      	lsrs	r3, r3, #16
 80039fa:	f003 0303 	and.w	r3, r3, #3
 80039fe:	3301      	adds	r3, #1
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0c:	60bb      	str	r3, [r7, #8]
      break;
 8003a0e:	e002      	b.n	8003a16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a10:	4b04      	ldr	r3, [pc, #16]	; (8003a24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003a12:	60bb      	str	r3, [r7, #8]
      break;
 8003a14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a16:	68bb      	ldr	r3, [r7, #8]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a20:	40023800 	.word	0x40023800
 8003a24:	00f42400 	.word	0x00f42400
 8003a28:	007a1200 	.word	0x007a1200

08003a2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a30:	4b03      	ldr	r3, [pc, #12]	; (8003a40 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a32:	681b      	ldr	r3, [r3, #0]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	20000028 	.word	0x20000028

08003a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a48:	f7ff fff0 	bl	8003a2c <HAL_RCC_GetHCLKFreq>
 8003a4c:	4601      	mov	r1, r0
 8003a4e:	4b05      	ldr	r3, [pc, #20]	; (8003a64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	0a9b      	lsrs	r3, r3, #10
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	4a03      	ldr	r2, [pc, #12]	; (8003a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a5a:	5cd3      	ldrb	r3, [r2, r3]
 8003a5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40023800 	.word	0x40023800
 8003a68:	0800ba84 	.word	0x0800ba84

08003a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a70:	f7ff ffdc 	bl	8003a2c <HAL_RCC_GetHCLKFreq>
 8003a74:	4601      	mov	r1, r0
 8003a76:	4b05      	ldr	r3, [pc, #20]	; (8003a8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	0b5b      	lsrs	r3, r3, #13
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	4a03      	ldr	r2, [pc, #12]	; (8003a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a82:	5cd3      	ldrb	r3, [r2, r3]
 8003a84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	0800ba84 	.word	0x0800ba84

08003a94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	220f      	movs	r2, #15
 8003aa2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003aa4:	4b12      	ldr	r3, [pc, #72]	; (8003af0 <HAL_RCC_GetClockConfig+0x5c>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 0203 	and.w	r2, r3, #3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ab0:	4b0f      	ldr	r3, [pc, #60]	; (8003af0 <HAL_RCC_GetClockConfig+0x5c>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003abc:	4b0c      	ldr	r3, [pc, #48]	; (8003af0 <HAL_RCC_GetClockConfig+0x5c>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ac8:	4b09      	ldr	r3, [pc, #36]	; (8003af0 <HAL_RCC_GetClockConfig+0x5c>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	08db      	lsrs	r3, r3, #3
 8003ace:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ad6:	4b07      	ldr	r3, [pc, #28]	; (8003af4 <HAL_RCC_GetClockConfig+0x60>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 020f 	and.w	r2, r3, #15
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	601a      	str	r2, [r3, #0]
}
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	40023800 	.word	0x40023800
 8003af4:	40023c00 	.word	0x40023c00

08003af8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d105      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d061      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b20:	4ba3      	ldr	r3, [pc, #652]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b26:	f7fc fd19 	bl	800055c <HAL_GetTick>
 8003b2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b2e:	f7fc fd15 	bl	800055c <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e177      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b40:	4b9c      	ldr	r3, [pc, #624]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1f0      	bne.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x36>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d009      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x74>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	019a      	lsls	r2, r3, #6
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	071b      	lsls	r3, r3, #28
 8003b64:	4993      	ldr	r1, [pc, #588]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d01f      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b78:	4b8e      	ldr	r3, [pc, #568]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b7e:	0f1b      	lsrs	r3, r3, #28
 8003b80:	f003 0307 	and.w	r3, r3, #7
 8003b84:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	019a      	lsls	r2, r3, #6
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	061b      	lsls	r3, r3, #24
 8003b92:	431a      	orrs	r2, r3
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	071b      	lsls	r3, r3, #28
 8003b98:	4986      	ldr	r1, [pc, #536]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003ba0:	4b84      	ldr	r3, [pc, #528]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003ba2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ba6:	f023 021f 	bic.w	r2, r3, #31
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	69db      	ldr	r3, [r3, #28]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	4980      	ldr	r1, [pc, #512]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003bb8:	4b7d      	ldr	r3, [pc, #500]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003bba:	2201      	movs	r2, #1
 8003bbc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bbe:	f7fc fccd 	bl	800055c <HAL_GetTick>
 8003bc2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003bc6:	f7fc fcc9 	bl	800055c <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e12b      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bd8:	4b76      	ldr	r3, [pc, #472]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0f0      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xce>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d105      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x104>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d079      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003bfc:	4b6e      	ldr	r3, [pc, #440]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c02:	f7fc fcab 	bl	800055c <HAL_GetTick>
 8003c06:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c08:	e008      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003c0a:	f7fc fca7 	bl	800055c <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e109      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c1c:	4b65      	ldr	r3, [pc, #404]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c28:	d0ef      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x112>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0304 	and.w	r3, r3, #4
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d020      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c36:	4b5f      	ldr	r3, [pc, #380]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3c:	0f1b      	lsrs	r3, r3, #28
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	019a      	lsls	r2, r3, #6
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	061b      	lsls	r3, r3, #24
 8003c50:	431a      	orrs	r2, r3
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	071b      	lsls	r3, r3, #28
 8003c56:	4957      	ldr	r1, [pc, #348]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c5e:	4b55      	ldr	r3, [pc, #340]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c64:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	021b      	lsls	r3, r3, #8
 8003c70:	4950      	ldr	r1, [pc, #320]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0308 	and.w	r3, r3, #8
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d01e      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c84:	4b4b      	ldr	r3, [pc, #300]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8a:	0e1b      	lsrs	r3, r3, #24
 8003c8c:	f003 030f 	and.w	r3, r3, #15
 8003c90:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	019a      	lsls	r2, r3, #6
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	061b      	lsls	r3, r3, #24
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	071b      	lsls	r3, r3, #28
 8003ca4:	4943      	ldr	r1, [pc, #268]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003cac:	4b41      	ldr	r3, [pc, #260]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003cae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cb2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	493e      	ldr	r1, [pc, #248]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003cc2:	4b3d      	ldr	r3, [pc, #244]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cc8:	f7fc fc48 	bl	800055c <HAL_GetTick>
 8003ccc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003cd0:	f7fc fc44 	bl	800055c <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e0a6      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ce2:	4b34      	ldr	r3, [pc, #208]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cee:	d1ef      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0320 	and.w	r3, r3, #32
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 808d 	beq.w	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60fb      	str	r3, [r7, #12]
 8003d02:	4b2c      	ldr	r3, [pc, #176]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	4a2b      	ldr	r2, [pc, #172]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d0e:	4b29      	ldr	r3, [pc, #164]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d16:	60fb      	str	r3, [r7, #12]
 8003d18:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003d1a:	4b28      	ldr	r3, [pc, #160]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a27      	ldr	r2, [pc, #156]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d24:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d26:	f7fc fc19 	bl	800055c <HAL_GetTick>
 8003d2a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d2c:	e008      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d2e:	f7fc fc15 	bl	800055c <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e077      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d40:	4b1e      	ldr	r3, [pc, #120]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0f0      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x236>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d4c:	4b19      	ldr	r3, [pc, #100]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d54:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d039      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d032      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d6a:	4b12      	ldr	r3, [pc, #72]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d72:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d74:	4b12      	ldr	r3, [pc, #72]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003d76:	2201      	movs	r2, #1
 8003d78:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d7a:	4b11      	ldr	r3, [pc, #68]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003d80:	4a0c      	ldr	r2, [pc, #48]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d86:	4b0b      	ldr	r3, [pc, #44]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d11e      	bne.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003d92:	f7fc fbe3 	bl	800055c <HAL_GetTick>
 8003d96:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d98:	e014      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d9a:	f7fc fbdf 	bl	800055c <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d90b      	bls.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
          {
            return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e03f      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8003db0:	42470068 	.word	0x42470068
 8003db4:	40023800 	.word	0x40023800
 8003db8:	42470070 	.word	0x42470070
 8003dbc:	40007000 	.word	0x40007000
 8003dc0:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc4:	4b1c      	ldr	r3, [pc, #112]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0e4      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ddc:	d10d      	bne.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x302>
 8003dde:	4b16      	ldr	r3, [pc, #88]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003dee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df2:	4911      	ldr	r1, [pc, #68]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	608b      	str	r3, [r1, #8]
 8003df8:	e005      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8003dfa:	4b0f      	ldr	r3, [pc, #60]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	4a0e      	ldr	r2, [pc, #56]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e00:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e04:	6093      	str	r3, [r2, #8]
 8003e06:	4b0c      	ldr	r3, [pc, #48]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e12:	4909      	ldr	r1, [pc, #36]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0310 	and.w	r3, r3, #16
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d004      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003e2a:	4b04      	ldr	r3, [pc, #16]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003e2c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3718      	adds	r7, #24
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	40023800 	.word	0x40023800
 8003e3c:	424711e0 	.word	0x424711e0

08003e40 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e025      	b.n	8003ea0 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d106      	bne.n	8003e6e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f006 fa85 	bl	800a378 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2202      	movs	r2, #2
 8003e72:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	4619      	mov	r1, r3
 8003e80:	4610      	mov	r0, r2
 8003e82:	f000 fe95 	bl	8004bb0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6818      	ldr	r0, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	6839      	ldr	r1, [r7, #0]
 8003e92:	f000 ff00 	bl	8004c96 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e056      	b.n	8003f68 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d106      	bne.n	8003eda <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f006 fefb 	bl	800acd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2202      	movs	r2, #2
 8003ede:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ef0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	431a      	orrs	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	431a      	orrs	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f16:	431a      	orrs	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	ea42 0103 	orr.w	r1, r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	0c1b      	lsrs	r3, r3, #16
 8003f38:	f003 0104 	and.w	r1, r3, #4
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	69da      	ldr	r2, [r3, #28]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f56:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e01d      	b.n	8003fbe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d106      	bne.n	8003f9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f007 f85c 	bl	800b054 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3304      	adds	r3, #4
 8003fac:	4619      	mov	r1, r3
 8003fae:	4610      	mov	r0, r2
 8003fb0:	f000 fa14 	bl	80043dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b085      	sub	sp, #20
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68da      	ldr	r2, [r3, #12]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f042 0201 	orr.w	r2, r2, #1
 8003fdc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f003 0307 	and.w	r3, r3, #7
 8003fe8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2b06      	cmp	r3, #6
 8003fee:	d007      	beq.n	8004000 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0201 	orr.w	r2, r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b082      	sub	sp, #8
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b02      	cmp	r3, #2
 8004022:	d122      	bne.n	800406a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b02      	cmp	r3, #2
 8004030:	d11b      	bne.n	800406a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f06f 0202 	mvn.w	r2, #2
 800403a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	f003 0303 	and.w	r3, r3, #3
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f9a5 	bl	80043a0 <HAL_TIM_IC_CaptureCallback>
 8004056:	e005      	b.n	8004064 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f997 	bl	800438c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f9a8 	bl	80043b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b04      	cmp	r3, #4
 8004076:	d122      	bne.n	80040be <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	f003 0304 	and.w	r3, r3, #4
 8004082:	2b04      	cmp	r3, #4
 8004084:	d11b      	bne.n	80040be <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f06f 0204 	mvn.w	r2, #4
 800408e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2202      	movs	r2, #2
 8004094:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f97b 	bl	80043a0 <HAL_TIM_IC_CaptureCallback>
 80040aa:	e005      	b.n	80040b8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f96d 	bl	800438c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f97e 	bl	80043b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	f003 0308 	and.w	r3, r3, #8
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d122      	bne.n	8004112 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	f003 0308 	and.w	r3, r3, #8
 80040d6:	2b08      	cmp	r3, #8
 80040d8:	d11b      	bne.n	8004112 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f06f 0208 	mvn.w	r2, #8
 80040e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2204      	movs	r2, #4
 80040e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	f003 0303 	and.w	r3, r3, #3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d003      	beq.n	8004100 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f951 	bl	80043a0 <HAL_TIM_IC_CaptureCallback>
 80040fe:	e005      	b.n	800410c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 f943 	bl	800438c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f954 	bl	80043b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	f003 0310 	and.w	r3, r3, #16
 800411c:	2b10      	cmp	r3, #16
 800411e:	d122      	bne.n	8004166 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	f003 0310 	and.w	r3, r3, #16
 800412a:	2b10      	cmp	r3, #16
 800412c:	d11b      	bne.n	8004166 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f06f 0210 	mvn.w	r2, #16
 8004136:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2208      	movs	r2, #8
 800413c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f927 	bl	80043a0 <HAL_TIM_IC_CaptureCallback>
 8004152:	e005      	b.n	8004160 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f919 	bl	800438c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f92a 	bl	80043b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b01      	cmp	r3, #1
 8004172:	d10e      	bne.n	8004192 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b01      	cmp	r3, #1
 8004180:	d107      	bne.n	8004192 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f06f 0201 	mvn.w	r2, #1
 800418a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f006 fd4f 	bl	800ac30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419c:	2b80      	cmp	r3, #128	; 0x80
 800419e:	d10e      	bne.n	80041be <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041aa:	2b80      	cmp	r3, #128	; 0x80
 80041ac:	d107      	bne.n	80041be <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 fa98 	bl	80046ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c8:	2b40      	cmp	r3, #64	; 0x40
 80041ca:	d10e      	bne.n	80041ea <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d6:	2b40      	cmp	r3, #64	; 0x40
 80041d8:	d107      	bne.n	80041ea <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 f8ef 	bl	80043c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	f003 0320 	and.w	r3, r3, #32
 80041f4:	2b20      	cmp	r3, #32
 80041f6:	d10e      	bne.n	8004216 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f003 0320 	and.w	r3, r3, #32
 8004202:	2b20      	cmp	r3, #32
 8004204:	d107      	bne.n	8004216 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f06f 0220 	mvn.w	r2, #32
 800420e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 fa62 	bl	80046da <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004216:	bf00      	nop
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b084      	sub	sp, #16
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
 8004226:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800422e:	2b01      	cmp	r3, #1
 8004230:	d101      	bne.n	8004236 <HAL_TIM_ConfigClockSource+0x18>
 8004232:	2302      	movs	r3, #2
 8004234:	e0a6      	b.n	8004384 <HAL_TIM_ConfigClockSource+0x166>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2202      	movs	r2, #2
 8004242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004254:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800425c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2b40      	cmp	r3, #64	; 0x40
 800426c:	d067      	beq.n	800433e <HAL_TIM_ConfigClockSource+0x120>
 800426e:	2b40      	cmp	r3, #64	; 0x40
 8004270:	d80b      	bhi.n	800428a <HAL_TIM_ConfigClockSource+0x6c>
 8004272:	2b10      	cmp	r3, #16
 8004274:	d073      	beq.n	800435e <HAL_TIM_ConfigClockSource+0x140>
 8004276:	2b10      	cmp	r3, #16
 8004278:	d802      	bhi.n	8004280 <HAL_TIM_ConfigClockSource+0x62>
 800427a:	2b00      	cmp	r3, #0
 800427c:	d06f      	beq.n	800435e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800427e:	e078      	b.n	8004372 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004280:	2b20      	cmp	r3, #32
 8004282:	d06c      	beq.n	800435e <HAL_TIM_ConfigClockSource+0x140>
 8004284:	2b30      	cmp	r3, #48	; 0x30
 8004286:	d06a      	beq.n	800435e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004288:	e073      	b.n	8004372 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800428a:	2b70      	cmp	r3, #112	; 0x70
 800428c:	d00d      	beq.n	80042aa <HAL_TIM_ConfigClockSource+0x8c>
 800428e:	2b70      	cmp	r3, #112	; 0x70
 8004290:	d804      	bhi.n	800429c <HAL_TIM_ConfigClockSource+0x7e>
 8004292:	2b50      	cmp	r3, #80	; 0x50
 8004294:	d033      	beq.n	80042fe <HAL_TIM_ConfigClockSource+0xe0>
 8004296:	2b60      	cmp	r3, #96	; 0x60
 8004298:	d041      	beq.n	800431e <HAL_TIM_ConfigClockSource+0x100>
      break;
 800429a:	e06a      	b.n	8004372 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800429c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042a0:	d066      	beq.n	8004370 <HAL_TIM_ConfigClockSource+0x152>
 80042a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042a6:	d017      	beq.n	80042d8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80042a8:	e063      	b.n	8004372 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	6899      	ldr	r1, [r3, #8]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	f000 f9a9 	bl	8004610 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	609a      	str	r2, [r3, #8]
      break;
 80042d6:	e04c      	b.n	8004372 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6818      	ldr	r0, [r3, #0]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	6899      	ldr	r1, [r3, #8]
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	f000 f992 	bl	8004610 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689a      	ldr	r2, [r3, #8]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042fa:	609a      	str	r2, [r3, #8]
      break;
 80042fc:	e039      	b.n	8004372 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6818      	ldr	r0, [r3, #0]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	6859      	ldr	r1, [r3, #4]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	461a      	mov	r2, r3
 800430c:	f000 f906 	bl	800451c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2150      	movs	r1, #80	; 0x50
 8004316:	4618      	mov	r0, r3
 8004318:	f000 f95f 	bl	80045da <TIM_ITRx_SetConfig>
      break;
 800431c:	e029      	b.n	8004372 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6818      	ldr	r0, [r3, #0]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	6859      	ldr	r1, [r3, #4]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	461a      	mov	r2, r3
 800432c:	f000 f925 	bl	800457a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2160      	movs	r1, #96	; 0x60
 8004336:	4618      	mov	r0, r3
 8004338:	f000 f94f 	bl	80045da <TIM_ITRx_SetConfig>
      break;
 800433c:	e019      	b.n	8004372 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6818      	ldr	r0, [r3, #0]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	6859      	ldr	r1, [r3, #4]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	461a      	mov	r2, r3
 800434c:	f000 f8e6 	bl	800451c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2140      	movs	r1, #64	; 0x40
 8004356:	4618      	mov	r0, r3
 8004358:	f000 f93f 	bl	80045da <TIM_ITRx_SetConfig>
      break;
 800435c:	e009      	b.n	8004372 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4619      	mov	r1, r3
 8004368:	4610      	mov	r0, r2
 800436a:	f000 f936 	bl	80045da <TIM_ITRx_SetConfig>
      break;
 800436e:	e000      	b.n	8004372 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004370:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a40      	ldr	r2, [pc, #256]	; (80044f0 <TIM_Base_SetConfig+0x114>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d013      	beq.n	800441c <TIM_Base_SetConfig+0x40>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043fa:	d00f      	beq.n	800441c <TIM_Base_SetConfig+0x40>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a3d      	ldr	r2, [pc, #244]	; (80044f4 <TIM_Base_SetConfig+0x118>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d00b      	beq.n	800441c <TIM_Base_SetConfig+0x40>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a3c      	ldr	r2, [pc, #240]	; (80044f8 <TIM_Base_SetConfig+0x11c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d007      	beq.n	800441c <TIM_Base_SetConfig+0x40>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a3b      	ldr	r2, [pc, #236]	; (80044fc <TIM_Base_SetConfig+0x120>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d003      	beq.n	800441c <TIM_Base_SetConfig+0x40>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a3a      	ldr	r2, [pc, #232]	; (8004500 <TIM_Base_SetConfig+0x124>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d108      	bne.n	800442e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004422:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	4313      	orrs	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a2f      	ldr	r2, [pc, #188]	; (80044f0 <TIM_Base_SetConfig+0x114>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d02b      	beq.n	800448e <TIM_Base_SetConfig+0xb2>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800443c:	d027      	beq.n	800448e <TIM_Base_SetConfig+0xb2>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a2c      	ldr	r2, [pc, #176]	; (80044f4 <TIM_Base_SetConfig+0x118>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d023      	beq.n	800448e <TIM_Base_SetConfig+0xb2>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a2b      	ldr	r2, [pc, #172]	; (80044f8 <TIM_Base_SetConfig+0x11c>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d01f      	beq.n	800448e <TIM_Base_SetConfig+0xb2>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a2a      	ldr	r2, [pc, #168]	; (80044fc <TIM_Base_SetConfig+0x120>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d01b      	beq.n	800448e <TIM_Base_SetConfig+0xb2>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a29      	ldr	r2, [pc, #164]	; (8004500 <TIM_Base_SetConfig+0x124>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d017      	beq.n	800448e <TIM_Base_SetConfig+0xb2>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a28      	ldr	r2, [pc, #160]	; (8004504 <TIM_Base_SetConfig+0x128>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d013      	beq.n	800448e <TIM_Base_SetConfig+0xb2>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a27      	ldr	r2, [pc, #156]	; (8004508 <TIM_Base_SetConfig+0x12c>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d00f      	beq.n	800448e <TIM_Base_SetConfig+0xb2>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a26      	ldr	r2, [pc, #152]	; (800450c <TIM_Base_SetConfig+0x130>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d00b      	beq.n	800448e <TIM_Base_SetConfig+0xb2>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a25      	ldr	r2, [pc, #148]	; (8004510 <TIM_Base_SetConfig+0x134>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d007      	beq.n	800448e <TIM_Base_SetConfig+0xb2>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a24      	ldr	r2, [pc, #144]	; (8004514 <TIM_Base_SetConfig+0x138>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d003      	beq.n	800448e <TIM_Base_SetConfig+0xb2>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a23      	ldr	r2, [pc, #140]	; (8004518 <TIM_Base_SetConfig+0x13c>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d108      	bne.n	80044a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004494:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	4313      	orrs	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	689a      	ldr	r2, [r3, #8]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a0a      	ldr	r2, [pc, #40]	; (80044f0 <TIM_Base_SetConfig+0x114>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d003      	beq.n	80044d4 <TIM_Base_SetConfig+0xf8>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a0c      	ldr	r2, [pc, #48]	; (8004500 <TIM_Base_SetConfig+0x124>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d103      	bne.n	80044dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	615a      	str	r2, [r3, #20]
}
 80044e2:	bf00      	nop
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	40010000 	.word	0x40010000
 80044f4:	40000400 	.word	0x40000400
 80044f8:	40000800 	.word	0x40000800
 80044fc:	40000c00 	.word	0x40000c00
 8004500:	40010400 	.word	0x40010400
 8004504:	40014000 	.word	0x40014000
 8004508:	40014400 	.word	0x40014400
 800450c:	40014800 	.word	0x40014800
 8004510:	40001800 	.word	0x40001800
 8004514:	40001c00 	.word	0x40001c00
 8004518:	40002000 	.word	0x40002000

0800451c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800451c:	b480      	push	{r7}
 800451e:	b087      	sub	sp, #28
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	f023 0201 	bic.w	r2, r3, #1
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	011b      	lsls	r3, r3, #4
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	4313      	orrs	r3, r2
 8004550:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f023 030a 	bic.w	r3, r3, #10
 8004558:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	4313      	orrs	r3, r2
 8004560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	621a      	str	r2, [r3, #32]
}
 800456e:	bf00      	nop
 8004570:	371c      	adds	r7, #28
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800457a:	b480      	push	{r7}
 800457c:	b087      	sub	sp, #28
 800457e:	af00      	add	r7, sp, #0
 8004580:	60f8      	str	r0, [r7, #12]
 8004582:	60b9      	str	r1, [r7, #8]
 8004584:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	f023 0210 	bic.w	r2, r3, #16
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	031b      	lsls	r3, r3, #12
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	011b      	lsls	r3, r3, #4
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	4313      	orrs	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	621a      	str	r2, [r3, #32]
}
 80045ce:	bf00      	nop
 80045d0:	371c      	adds	r7, #28
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045da:	b480      	push	{r7}
 80045dc:	b085      	sub	sp, #20
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
 80045e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	f043 0307 	orr.w	r3, r3, #7
 80045fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	609a      	str	r2, [r3, #8]
}
 8004604:	bf00      	nop
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004610:	b480      	push	{r7}
 8004612:	b087      	sub	sp, #28
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800462a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	021a      	lsls	r2, r3, #8
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	431a      	orrs	r2, r3
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	4313      	orrs	r3, r2
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	4313      	orrs	r3, r2
 800463c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	609a      	str	r2, [r3, #8]
}
 8004644:	bf00      	nop
 8004646:	371c      	adds	r7, #28
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004660:	2b01      	cmp	r3, #1
 8004662:	d101      	bne.n	8004668 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004664:	2302      	movs	r3, #2
 8004666:	e032      	b.n	80046ce <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2202      	movs	r2, #2
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800468e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	4313      	orrs	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046a0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3714      	adds	r7, #20
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046da:	b480      	push	{r7}
 80046dc:	b083      	sub	sp, #12
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b083      	sub	sp, #12
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b082      	sub	sp, #8
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e03f      	b.n	8004794 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800471a:	b2db      	uxtb	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	d106      	bne.n	800472e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f006 fcdf 	bl	800b0ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2224      	movs	r2, #36	; 0x24
 8004732:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68da      	ldr	r2, [r3, #12]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004744:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f828 	bl	800479c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	691a      	ldr	r2, [r3, #16]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800475a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	695a      	ldr	r2, [r3, #20]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800476a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68da      	ldr	r2, [r3, #12]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800477a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2220      	movs	r2, #32
 8004786:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2220      	movs	r2, #32
 800478e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3708      	adds	r7, #8
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800479c:	b5b0      	push	{r4, r5, r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68da      	ldr	r2, [r3, #12]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	689a      	ldr	r2, [r3, #8]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	431a      	orrs	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	431a      	orrs	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80047dc:	f023 030c 	bic.w	r3, r3, #12
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	6812      	ldr	r2, [r2, #0]
 80047e4:	68f9      	ldr	r1, [r7, #12]
 80047e6:	430b      	orrs	r3, r1
 80047e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	699a      	ldr	r2, [r3, #24]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	69db      	ldr	r3, [r3, #28]
 8004804:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004808:	f040 80e4 	bne.w	80049d4 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4aab      	ldr	r2, [pc, #684]	; (8004ac0 <UART_SetConfig+0x324>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d004      	beq.n	8004820 <UART_SetConfig+0x84>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4aaa      	ldr	r2, [pc, #680]	; (8004ac4 <UART_SetConfig+0x328>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d16c      	bne.n	80048fa <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004820:	f7ff f924 	bl	8003a6c <HAL_RCC_GetPCLK2Freq>
 8004824:	4602      	mov	r2, r0
 8004826:	4613      	mov	r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4413      	add	r3, r2
 800482c:	009a      	lsls	r2, r3, #2
 800482e:	441a      	add	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	fbb2 f3f3 	udiv	r3, r2, r3
 800483a:	4aa3      	ldr	r2, [pc, #652]	; (8004ac8 <UART_SetConfig+0x32c>)
 800483c:	fba2 2303 	umull	r2, r3, r2, r3
 8004840:	095b      	lsrs	r3, r3, #5
 8004842:	011c      	lsls	r4, r3, #4
 8004844:	f7ff f912 	bl	8003a6c <HAL_RCC_GetPCLK2Freq>
 8004848:	4602      	mov	r2, r0
 800484a:	4613      	mov	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	009a      	lsls	r2, r3, #2
 8004852:	441a      	add	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	fbb2 f5f3 	udiv	r5, r2, r3
 800485e:	f7ff f905 	bl	8003a6c <HAL_RCC_GetPCLK2Freq>
 8004862:	4602      	mov	r2, r0
 8004864:	4613      	mov	r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4413      	add	r3, r2
 800486a:	009a      	lsls	r2, r3, #2
 800486c:	441a      	add	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	fbb2 f3f3 	udiv	r3, r2, r3
 8004878:	4a93      	ldr	r2, [pc, #588]	; (8004ac8 <UART_SetConfig+0x32c>)
 800487a:	fba2 2303 	umull	r2, r3, r2, r3
 800487e:	095b      	lsrs	r3, r3, #5
 8004880:	2264      	movs	r2, #100	; 0x64
 8004882:	fb02 f303 	mul.w	r3, r2, r3
 8004886:	1aeb      	subs	r3, r5, r3
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	3332      	adds	r3, #50	; 0x32
 800488c:	4a8e      	ldr	r2, [pc, #568]	; (8004ac8 <UART_SetConfig+0x32c>)
 800488e:	fba2 2303 	umull	r2, r3, r2, r3
 8004892:	095b      	lsrs	r3, r3, #5
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800489a:	441c      	add	r4, r3
 800489c:	f7ff f8e6 	bl	8003a6c <HAL_RCC_GetPCLK2Freq>
 80048a0:	4602      	mov	r2, r0
 80048a2:	4613      	mov	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	009a      	lsls	r2, r3, #2
 80048aa:	441a      	add	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	fbb2 f5f3 	udiv	r5, r2, r3
 80048b6:	f7ff f8d9 	bl	8003a6c <HAL_RCC_GetPCLK2Freq>
 80048ba:	4602      	mov	r2, r0
 80048bc:	4613      	mov	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	009a      	lsls	r2, r3, #2
 80048c4:	441a      	add	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d0:	4a7d      	ldr	r2, [pc, #500]	; (8004ac8 <UART_SetConfig+0x32c>)
 80048d2:	fba2 2303 	umull	r2, r3, r2, r3
 80048d6:	095b      	lsrs	r3, r3, #5
 80048d8:	2264      	movs	r2, #100	; 0x64
 80048da:	fb02 f303 	mul.w	r3, r2, r3
 80048de:	1aeb      	subs	r3, r5, r3
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	3332      	adds	r3, #50	; 0x32
 80048e4:	4a78      	ldr	r2, [pc, #480]	; (8004ac8 <UART_SetConfig+0x32c>)
 80048e6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ea:	095b      	lsrs	r3, r3, #5
 80048ec:	f003 0207 	and.w	r2, r3, #7
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4422      	add	r2, r4
 80048f6:	609a      	str	r2, [r3, #8]
 80048f8:	e154      	b.n	8004ba4 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80048fa:	f7ff f8a3 	bl	8003a44 <HAL_RCC_GetPCLK1Freq>
 80048fe:	4602      	mov	r2, r0
 8004900:	4613      	mov	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	009a      	lsls	r2, r3, #2
 8004908:	441a      	add	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	fbb2 f3f3 	udiv	r3, r2, r3
 8004914:	4a6c      	ldr	r2, [pc, #432]	; (8004ac8 <UART_SetConfig+0x32c>)
 8004916:	fba2 2303 	umull	r2, r3, r2, r3
 800491a:	095b      	lsrs	r3, r3, #5
 800491c:	011c      	lsls	r4, r3, #4
 800491e:	f7ff f891 	bl	8003a44 <HAL_RCC_GetPCLK1Freq>
 8004922:	4602      	mov	r2, r0
 8004924:	4613      	mov	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	009a      	lsls	r2, r3, #2
 800492c:	441a      	add	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	fbb2 f5f3 	udiv	r5, r2, r3
 8004938:	f7ff f884 	bl	8003a44 <HAL_RCC_GetPCLK1Freq>
 800493c:	4602      	mov	r2, r0
 800493e:	4613      	mov	r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4413      	add	r3, r2
 8004944:	009a      	lsls	r2, r3, #2
 8004946:	441a      	add	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004952:	4a5d      	ldr	r2, [pc, #372]	; (8004ac8 <UART_SetConfig+0x32c>)
 8004954:	fba2 2303 	umull	r2, r3, r2, r3
 8004958:	095b      	lsrs	r3, r3, #5
 800495a:	2264      	movs	r2, #100	; 0x64
 800495c:	fb02 f303 	mul.w	r3, r2, r3
 8004960:	1aeb      	subs	r3, r5, r3
 8004962:	00db      	lsls	r3, r3, #3
 8004964:	3332      	adds	r3, #50	; 0x32
 8004966:	4a58      	ldr	r2, [pc, #352]	; (8004ac8 <UART_SetConfig+0x32c>)
 8004968:	fba2 2303 	umull	r2, r3, r2, r3
 800496c:	095b      	lsrs	r3, r3, #5
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004974:	441c      	add	r4, r3
 8004976:	f7ff f865 	bl	8003a44 <HAL_RCC_GetPCLK1Freq>
 800497a:	4602      	mov	r2, r0
 800497c:	4613      	mov	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	009a      	lsls	r2, r3, #2
 8004984:	441a      	add	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	fbb2 f5f3 	udiv	r5, r2, r3
 8004990:	f7ff f858 	bl	8003a44 <HAL_RCC_GetPCLK1Freq>
 8004994:	4602      	mov	r2, r0
 8004996:	4613      	mov	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	009a      	lsls	r2, r3, #2
 800499e:	441a      	add	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049aa:	4a47      	ldr	r2, [pc, #284]	; (8004ac8 <UART_SetConfig+0x32c>)
 80049ac:	fba2 2303 	umull	r2, r3, r2, r3
 80049b0:	095b      	lsrs	r3, r3, #5
 80049b2:	2264      	movs	r2, #100	; 0x64
 80049b4:	fb02 f303 	mul.w	r3, r2, r3
 80049b8:	1aeb      	subs	r3, r5, r3
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	3332      	adds	r3, #50	; 0x32
 80049be:	4a42      	ldr	r2, [pc, #264]	; (8004ac8 <UART_SetConfig+0x32c>)
 80049c0:	fba2 2303 	umull	r2, r3, r2, r3
 80049c4:	095b      	lsrs	r3, r3, #5
 80049c6:	f003 0207 	and.w	r2, r3, #7
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4422      	add	r2, r4
 80049d0:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80049d2:	e0e7      	b.n	8004ba4 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a39      	ldr	r2, [pc, #228]	; (8004ac0 <UART_SetConfig+0x324>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d004      	beq.n	80049e8 <UART_SetConfig+0x24c>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a38      	ldr	r2, [pc, #224]	; (8004ac4 <UART_SetConfig+0x328>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d171      	bne.n	8004acc <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80049e8:	f7ff f840 	bl	8003a6c <HAL_RCC_GetPCLK2Freq>
 80049ec:	4602      	mov	r2, r0
 80049ee:	4613      	mov	r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	009a      	lsls	r2, r3, #2
 80049f6:	441a      	add	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a02:	4a31      	ldr	r2, [pc, #196]	; (8004ac8 <UART_SetConfig+0x32c>)
 8004a04:	fba2 2303 	umull	r2, r3, r2, r3
 8004a08:	095b      	lsrs	r3, r3, #5
 8004a0a:	011c      	lsls	r4, r3, #4
 8004a0c:	f7ff f82e 	bl	8003a6c <HAL_RCC_GetPCLK2Freq>
 8004a10:	4602      	mov	r2, r0
 8004a12:	4613      	mov	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	009a      	lsls	r2, r3, #2
 8004a1a:	441a      	add	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	fbb2 f5f3 	udiv	r5, r2, r3
 8004a26:	f7ff f821 	bl	8003a6c <HAL_RCC_GetPCLK2Freq>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	009a      	lsls	r2, r3, #2
 8004a34:	441a      	add	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a40:	4a21      	ldr	r2, [pc, #132]	; (8004ac8 <UART_SetConfig+0x32c>)
 8004a42:	fba2 2303 	umull	r2, r3, r2, r3
 8004a46:	095b      	lsrs	r3, r3, #5
 8004a48:	2264      	movs	r2, #100	; 0x64
 8004a4a:	fb02 f303 	mul.w	r3, r2, r3
 8004a4e:	1aeb      	subs	r3, r5, r3
 8004a50:	011b      	lsls	r3, r3, #4
 8004a52:	3332      	adds	r3, #50	; 0x32
 8004a54:	4a1c      	ldr	r2, [pc, #112]	; (8004ac8 <UART_SetConfig+0x32c>)
 8004a56:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5a:	095b      	lsrs	r3, r3, #5
 8004a5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a60:	441c      	add	r4, r3
 8004a62:	f7ff f803 	bl	8003a6c <HAL_RCC_GetPCLK2Freq>
 8004a66:	4602      	mov	r2, r0
 8004a68:	4613      	mov	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	009a      	lsls	r2, r3, #2
 8004a70:	441a      	add	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	fbb2 f5f3 	udiv	r5, r2, r3
 8004a7c:	f7fe fff6 	bl	8003a6c <HAL_RCC_GetPCLK2Freq>
 8004a80:	4602      	mov	r2, r0
 8004a82:	4613      	mov	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	009a      	lsls	r2, r3, #2
 8004a8a:	441a      	add	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a96:	4a0c      	ldr	r2, [pc, #48]	; (8004ac8 <UART_SetConfig+0x32c>)
 8004a98:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9c:	095b      	lsrs	r3, r3, #5
 8004a9e:	2264      	movs	r2, #100	; 0x64
 8004aa0:	fb02 f303 	mul.w	r3, r2, r3
 8004aa4:	1aeb      	subs	r3, r5, r3
 8004aa6:	011b      	lsls	r3, r3, #4
 8004aa8:	3332      	adds	r3, #50	; 0x32
 8004aaa:	4a07      	ldr	r2, [pc, #28]	; (8004ac8 <UART_SetConfig+0x32c>)
 8004aac:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab0:	095b      	lsrs	r3, r3, #5
 8004ab2:	f003 020f 	and.w	r2, r3, #15
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4422      	add	r2, r4
 8004abc:	609a      	str	r2, [r3, #8]
 8004abe:	e071      	b.n	8004ba4 <UART_SetConfig+0x408>
 8004ac0:	40011000 	.word	0x40011000
 8004ac4:	40011400 	.word	0x40011400
 8004ac8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004acc:	f7fe ffba 	bl	8003a44 <HAL_RCC_GetPCLK1Freq>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	009a      	lsls	r2, r3, #2
 8004ada:	441a      	add	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae6:	4a31      	ldr	r2, [pc, #196]	; (8004bac <UART_SetConfig+0x410>)
 8004ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8004aec:	095b      	lsrs	r3, r3, #5
 8004aee:	011c      	lsls	r4, r3, #4
 8004af0:	f7fe ffa8 	bl	8003a44 <HAL_RCC_GetPCLK1Freq>
 8004af4:	4602      	mov	r2, r0
 8004af6:	4613      	mov	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	009a      	lsls	r2, r3, #2
 8004afe:	441a      	add	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	fbb2 f5f3 	udiv	r5, r2, r3
 8004b0a:	f7fe ff9b 	bl	8003a44 <HAL_RCC_GetPCLK1Freq>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	4613      	mov	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	009a      	lsls	r2, r3, #2
 8004b18:	441a      	add	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b24:	4a21      	ldr	r2, [pc, #132]	; (8004bac <UART_SetConfig+0x410>)
 8004b26:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2a:	095b      	lsrs	r3, r3, #5
 8004b2c:	2264      	movs	r2, #100	; 0x64
 8004b2e:	fb02 f303 	mul.w	r3, r2, r3
 8004b32:	1aeb      	subs	r3, r5, r3
 8004b34:	011b      	lsls	r3, r3, #4
 8004b36:	3332      	adds	r3, #50	; 0x32
 8004b38:	4a1c      	ldr	r2, [pc, #112]	; (8004bac <UART_SetConfig+0x410>)
 8004b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3e:	095b      	lsrs	r3, r3, #5
 8004b40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b44:	441c      	add	r4, r3
 8004b46:	f7fe ff7d 	bl	8003a44 <HAL_RCC_GetPCLK1Freq>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4413      	add	r3, r2
 8004b52:	009a      	lsls	r2, r3, #2
 8004b54:	441a      	add	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	fbb2 f5f3 	udiv	r5, r2, r3
 8004b60:	f7fe ff70 	bl	8003a44 <HAL_RCC_GetPCLK1Freq>
 8004b64:	4602      	mov	r2, r0
 8004b66:	4613      	mov	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	009a      	lsls	r2, r3, #2
 8004b6e:	441a      	add	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7a:	4a0c      	ldr	r2, [pc, #48]	; (8004bac <UART_SetConfig+0x410>)
 8004b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b80:	095b      	lsrs	r3, r3, #5
 8004b82:	2264      	movs	r2, #100	; 0x64
 8004b84:	fb02 f303 	mul.w	r3, r2, r3
 8004b88:	1aeb      	subs	r3, r5, r3
 8004b8a:	011b      	lsls	r3, r3, #4
 8004b8c:	3332      	adds	r3, #50	; 0x32
 8004b8e:	4a07      	ldr	r2, [pc, #28]	; (8004bac <UART_SetConfig+0x410>)
 8004b90:	fba2 2303 	umull	r2, r3, r2, r3
 8004b94:	095b      	lsrs	r3, r3, #5
 8004b96:	f003 020f 	and.w	r2, r3, #15
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4422      	add	r2, r4
 8004ba0:	609a      	str	r2, [r3, #8]
}
 8004ba2:	e7ff      	b.n	8004ba4 <UART_SetConfig+0x408>
 8004ba4:	bf00      	nop
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bdb0      	pop	{r4, r5, r7, pc}
 8004bac:	51eb851f 	.word	0x51eb851f

08004bb0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d029      	beq.n	8004c1e <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004bd6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004bda:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004be4:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8004bea:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8004bf0:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8004bf6:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8004bfc:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8004c02:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8004c08:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8004c0e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	e034      	b.n	8004c88 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c2a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004c34:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8004c3a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004c4e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004c52:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004c5c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8004c62:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8004c68:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8004c6e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8004c74:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b087      	sub	sp, #28
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	60f8      	str	r0, [r7, #12]
 8004c9e:	60b9      	str	r1, [r7, #8]
 8004ca0:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d02e      	beq.n	8004d0e <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004cbc:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8004ccc:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8004cd6:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8004ce0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8004cea:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8004cf4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	609a      	str	r2, [r3, #8]
 8004d0c:	e03b      	b.n	8004d86 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004d1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d1e:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	3b01      	subs	r3, #1
 8004d26:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8004d30:	4313      	orrs	r3, r2
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004d44:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	3b01      	subs	r3, #1
 8004d52:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8004d54:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8004d5e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	3b01      	subs	r3, #1
 8004d66:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8004d68:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8004d72:	4313      	orrs	r3, r2
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	371c      	adds	r7, #28
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d94:	b084      	sub	sp, #16
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b084      	sub	sp, #16
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	f107 001c 	add.w	r0, r7, #28
 8004da2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d122      	bne.n	8004df2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004dc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d105      	bne.n	8004de6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f94a 	bl	8005080 <USB_CoreReset>
 8004dec:	4603      	mov	r3, r0
 8004dee:	73fb      	strb	r3, [r7, #15]
 8004df0:	e01a      	b.n	8004e28 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f93e 	bl	8005080 <USB_CoreReset>
 8004e04:	4603      	mov	r3, r0
 8004e06:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d106      	bne.n	8004e1c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	639a      	str	r2, [r3, #56]	; 0x38
 8004e1a:	e005      	b.n	8004e28 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d10b      	bne.n	8004e46 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f043 0206 	orr.w	r2, r3, #6
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f043 0220 	orr.w	r2, r3, #32
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e52:	b004      	add	sp, #16
 8004e54:	4770      	bx	lr

08004e56 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b083      	sub	sp, #12
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f043 0201 	orr.w	r2, r3, #1
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f023 0201 	bic.w	r2, r3, #1
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	370c      	adds	r7, #12
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b082      	sub	sp, #8
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004eb2:	78fb      	ldrb	r3, [r7, #3]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d106      	bne.n	8004ec6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	60da      	str	r2, [r3, #12]
 8004ec4:	e00b      	b.n	8004ede <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ec6:	78fb      	ldrb	r3, [r7, #3]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d106      	bne.n	8004eda <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	60da      	str	r2, [r3, #12]
 8004ed8:	e001      	b.n	8004ede <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e003      	b.n	8004ee6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004ede:	2032      	movs	r0, #50	; 0x32
 8004ee0:	f7fb fb48 	bl	8000574 <HAL_Delay>

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
	...

08004ef0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	019b      	lsls	r3, r3, #6
 8004f02:	f043 0220 	orr.w	r2, r3, #32
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	60fb      	str	r3, [r7, #12]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4a09      	ldr	r2, [pc, #36]	; (8004f38 <USB_FlushTxFifo+0x48>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d901      	bls.n	8004f1c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e006      	b.n	8004f2a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	f003 0320 	and.w	r3, r3, #32
 8004f24:	2b20      	cmp	r3, #32
 8004f26:	d0f0      	beq.n	8004f0a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	00030d40 	.word	0x00030d40

08004f3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004f44:	2300      	movs	r3, #0
 8004f46:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2210      	movs	r2, #16
 8004f4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	3301      	adds	r3, #1
 8004f52:	60fb      	str	r3, [r7, #12]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4a09      	ldr	r2, [pc, #36]	; (8004f7c <USB_FlushRxFifo+0x40>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d901      	bls.n	8004f60 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e006      	b.n	8004f6e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	f003 0310 	and.w	r3, r3, #16
 8004f68:	2b10      	cmp	r3, #16
 8004f6a:	d0f0      	beq.n	8004f4e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	00030d40 	.word	0x00030d40

08004f80 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b089      	sub	sp, #36	; 0x24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	4611      	mov	r1, r2
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	460b      	mov	r3, r1
 8004f90:	71fb      	strb	r3, [r7, #7]
 8004f92:	4613      	mov	r3, r2
 8004f94:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004f9e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d11a      	bne.n	8004fdc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004fa6:	88bb      	ldrh	r3, [r7, #4]
 8004fa8:	3303      	adds	r3, #3
 8004faa:	089b      	lsrs	r3, r3, #2
 8004fac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004fae:	2300      	movs	r3, #0
 8004fb0:	61bb      	str	r3, [r7, #24]
 8004fb2:	e00f      	b.n	8004fd4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004fb4:	79fb      	ldrb	r3, [r7, #7]
 8004fb6:	031a      	lsls	r2, r3, #12
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	3304      	adds	r3, #4
 8004fcc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	61bb      	str	r3, [r7, #24]
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d3eb      	bcc.n	8004fb4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3724      	adds	r7, #36	; 0x24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b089      	sub	sp, #36	; 0x24
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	60f8      	str	r0, [r7, #12]
 8004ff2:	60b9      	str	r1, [r7, #8]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005000:	88fb      	ldrh	r3, [r7, #6]
 8005002:	3303      	adds	r3, #3
 8005004:	089b      	lsrs	r3, r3, #2
 8005006:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005008:	2300      	movs	r3, #0
 800500a:	61bb      	str	r3, [r7, #24]
 800500c:	e00b      	b.n	8005026 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	601a      	str	r2, [r3, #0]
    pDest++;
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	3304      	adds	r3, #4
 800501e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	3301      	adds	r3, #1
 8005024:	61bb      	str	r3, [r7, #24]
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	429a      	cmp	r2, r3
 800502c:	d3ef      	bcc.n	800500e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800502e:	69fb      	ldr	r3, [r7, #28]
}
 8005030:	4618      	mov	r0, r3
 8005032:	3724      	adds	r7, #36	; 0x24
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	4013      	ands	r3, r2
 8005052:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005054:	68fb      	ldr	r3, [r7, #12]
}
 8005056:	4618      	mov	r0, r3
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005062:	b480      	push	{r7}
 8005064:	b083      	sub	sp, #12
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	f003 0301 	and.w	r3, r3, #1
}
 8005072:	4618      	mov	r0, r3
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
	...

08005080 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005088:	2300      	movs	r3, #0
 800508a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	3301      	adds	r3, #1
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	4a13      	ldr	r2, [pc, #76]	; (80050e4 <USB_CoreReset+0x64>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d901      	bls.n	800509e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e01b      	b.n	80050d6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	daf2      	bge.n	800508c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f043 0201 	orr.w	r2, r3, #1
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	3301      	adds	r3, #1
 80050ba:	60fb      	str	r3, [r7, #12]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	4a09      	ldr	r2, [pc, #36]	; (80050e4 <USB_CoreReset+0x64>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d901      	bls.n	80050c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e006      	b.n	80050d6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d0f0      	beq.n	80050b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	00030d40 	.word	0x00030d40

080050e8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050e8:	b084      	sub	sp, #16
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b084      	sub	sp, #16
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	f107 001c 	add.w	r0, r7, #28
 80050f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005104:	461a      	mov	r2, r3
 8005106:	2300      	movs	r3, #0
 8005108:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005126:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005136:	2b00      	cmp	r3, #0
 8005138:	d018      	beq.n	800516c <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	2b03      	cmp	r3, #3
 800513e:	d10a      	bne.n	8005156 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800514e:	f043 0304 	orr.w	r3, r3, #4
 8005152:	6013      	str	r3, [r2, #0]
 8005154:	e014      	b.n	8005180 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005164:	f023 0304 	bic.w	r3, r3, #4
 8005168:	6013      	str	r3, [r2, #0]
 800516a:	e009      	b.n	8005180 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68ba      	ldr	r2, [r7, #8]
 8005176:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800517a:	f023 0304 	bic.w	r3, r3, #4
 800517e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005180:	2110      	movs	r1, #16
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7ff feb4 	bl	8004ef0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f7ff fed7 	bl	8004f3c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800518e:	2300      	movs	r3, #0
 8005190:	60fb      	str	r3, [r7, #12]
 8005192:	e015      	b.n	80051c0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	015a      	lsls	r2, r3, #5
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	4413      	add	r3, r2
 800519c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051a0:	461a      	mov	r2, r3
 80051a2:	f04f 33ff 	mov.w	r3, #4294967295
 80051a6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b4:	461a      	mov	r2, r3
 80051b6:	2300      	movs	r3, #0
 80051b8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	3301      	adds	r3, #1
 80051be:	60fb      	str	r3, [r7, #12]
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d3e5      	bcc.n	8005194 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80051c8:	2101      	movs	r1, #1
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f8ac 	bl	8005328 <USB_DriveVbus>

  HAL_Delay(200U);
 80051d0:	20c8      	movs	r0, #200	; 0xc8
 80051d2:	f7fb f9cf 	bl	8000574 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f04f 32ff 	mov.w	r2, #4294967295
 80051e2:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00b      	beq.n	8005208 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051f6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a14      	ldr	r2, [pc, #80]	; (800524c <USB_HostInit+0x164>)
 80051fc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a13      	ldr	r2, [pc, #76]	; (8005250 <USB_HostInit+0x168>)
 8005202:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005206:	e009      	b.n	800521c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2280      	movs	r2, #128	; 0x80
 800520c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a10      	ldr	r2, [pc, #64]	; (8005254 <USB_HostInit+0x16c>)
 8005212:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a10      	ldr	r2, [pc, #64]	; (8005258 <USB_HostInit+0x170>)
 8005218:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800521c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521e:	2b00      	cmp	r3, #0
 8005220:	d105      	bne.n	800522e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	f043 0210 	orr.w	r2, r3, #16
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	699a      	ldr	r2, [r3, #24]
 8005232:	4b0a      	ldr	r3, [pc, #40]	; (800525c <USB_HostInit+0x174>)
 8005234:	4313      	orrs	r3, r2
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005246:	b004      	add	sp, #16
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	01000200 	.word	0x01000200
 8005250:	00e00300 	.word	0x00e00300
 8005254:	00600080 	.word	0x00600080
 8005258:	004000e0 	.word	0x004000e0
 800525c:	a3200008 	.word	0xa3200008

08005260 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	460b      	mov	r3, r1
 800526a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800527e:	f023 0303 	bic.w	r3, r3, #3
 8005282:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	78fb      	ldrb	r3, [r7, #3]
 800528e:	f003 0303 	and.w	r3, r3, #3
 8005292:	68f9      	ldr	r1, [r7, #12]
 8005294:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005298:	4313      	orrs	r3, r2
 800529a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800529c:	78fb      	ldrb	r3, [r7, #3]
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d107      	bne.n	80052b2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052a8:	461a      	mov	r2, r3
 80052aa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80052ae:	6053      	str	r3, [r2, #4]
 80052b0:	e009      	b.n	80052c6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80052b2:	78fb      	ldrb	r3, [r7, #3]
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d106      	bne.n	80052c6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052be:	461a      	mov	r2, r3
 80052c0:	f241 7370 	movw	r3, #6000	; 0x1770
 80052c4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80052f4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80052fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005302:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005304:	2064      	movs	r0, #100	; 0x64
 8005306:	f7fb f935 	bl	8000574 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005312:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005316:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005318:	200a      	movs	r0, #10
 800531a:	f7fb f92b 	bl	8000574 <HAL_Delay>

  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	460b      	mov	r3, r1
 8005332:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005338:	2300      	movs	r3, #0
 800533a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800534c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d109      	bne.n	800536c <USB_DriveVbus+0x44>
 8005358:	78fb      	ldrb	r3, [r7, #3]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d106      	bne.n	800536c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005366:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800536a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005376:	d109      	bne.n	800538c <USB_DriveVbus+0x64>
 8005378:	78fb      	ldrb	r3, [r7, #3]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d106      	bne.n	800538c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005386:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800538a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800539a:	b480      	push	{r7}
 800539c:	b085      	sub	sp, #20
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80053a6:	2300      	movs	r3, #0
 80053a8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	0c5b      	lsrs	r3, r3, #17
 80053b8:	f003 0303 	and.w	r3, r3, #3
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	b29b      	uxth	r3, r3
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
	...

080053ec <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	4608      	mov	r0, r1
 80053f6:	4611      	mov	r1, r2
 80053f8:	461a      	mov	r2, r3
 80053fa:	4603      	mov	r3, r0
 80053fc:	70fb      	strb	r3, [r7, #3]
 80053fe:	460b      	mov	r3, r1
 8005400:	70bb      	strb	r3, [r7, #2]
 8005402:	4613      	mov	r3, r2
 8005404:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005406:	2300      	movs	r3, #0
 8005408:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800540e:	78fb      	ldrb	r3, [r7, #3]
 8005410:	015a      	lsls	r2, r3, #5
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	4413      	add	r3, r2
 8005416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800541a:	461a      	mov	r2, r3
 800541c:	f04f 33ff 	mov.w	r3, #4294967295
 8005420:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005422:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005426:	2b03      	cmp	r3, #3
 8005428:	d87e      	bhi.n	8005528 <USB_HC_Init+0x13c>
 800542a:	a201      	add	r2, pc, #4	; (adr r2, 8005430 <USB_HC_Init+0x44>)
 800542c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005430:	08005441 	.word	0x08005441
 8005434:	080054eb 	.word	0x080054eb
 8005438:	08005441 	.word	0x08005441
 800543c:	080054ad 	.word	0x080054ad
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005440:	78fb      	ldrb	r3, [r7, #3]
 8005442:	015a      	lsls	r2, r3, #5
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	4413      	add	r3, r2
 8005448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800544c:	461a      	mov	r2, r3
 800544e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005452:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005454:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005458:	2b00      	cmp	r3, #0
 800545a:	da10      	bge.n	800547e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800545c:	78fb      	ldrb	r3, [r7, #3]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	4413      	add	r3, r2
 8005464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	78fa      	ldrb	r2, [r7, #3]
 800546c:	0151      	lsls	r1, r2, #5
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	440a      	add	r2, r1
 8005472:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800547a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800547c:	e057      	b.n	800552e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005486:	2b00      	cmp	r3, #0
 8005488:	d051      	beq.n	800552e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800548a:	78fb      	ldrb	r3, [r7, #3]
 800548c:	015a      	lsls	r2, r3, #5
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	4413      	add	r3, r2
 8005492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	78fa      	ldrb	r2, [r7, #3]
 800549a:	0151      	lsls	r1, r2, #5
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	440a      	add	r2, r1
 80054a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054a4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80054a8:	60d3      	str	r3, [r2, #12]
      break;
 80054aa:	e040      	b.n	800552e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80054ac:	78fb      	ldrb	r3, [r7, #3]
 80054ae:	015a      	lsls	r2, r3, #5
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054b8:	461a      	mov	r2, r3
 80054ba:	f240 639d 	movw	r3, #1693	; 0x69d
 80054be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80054c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	da34      	bge.n	8005532 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80054c8:	78fb      	ldrb	r3, [r7, #3]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	78fa      	ldrb	r2, [r7, #3]
 80054d8:	0151      	lsls	r1, r2, #5
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	440a      	add	r2, r1
 80054de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054e6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80054e8:	e023      	b.n	8005532 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80054ea:	78fb      	ldrb	r3, [r7, #3]
 80054ec:	015a      	lsls	r2, r3, #5
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	4413      	add	r3, r2
 80054f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054f6:	461a      	mov	r2, r3
 80054f8:	f240 2325 	movw	r3, #549	; 0x225
 80054fc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80054fe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005502:	2b00      	cmp	r3, #0
 8005504:	da17      	bge.n	8005536 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005506:	78fb      	ldrb	r3, [r7, #3]
 8005508:	015a      	lsls	r2, r3, #5
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	4413      	add	r3, r2
 800550e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	78fa      	ldrb	r2, [r7, #3]
 8005516:	0151      	lsls	r1, r2, #5
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	440a      	add	r2, r1
 800551c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005520:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005524:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005526:	e006      	b.n	8005536 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	75fb      	strb	r3, [r7, #23]
      break;
 800552c:	e004      	b.n	8005538 <USB_HC_Init+0x14c>
      break;
 800552e:	bf00      	nop
 8005530:	e002      	b.n	8005538 <USB_HC_Init+0x14c>
      break;
 8005532:	bf00      	nop
 8005534:	e000      	b.n	8005538 <USB_HC_Init+0x14c>
      break;
 8005536:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800553e:	699a      	ldr	r2, [r3, #24]
 8005540:	78fb      	ldrb	r3, [r7, #3]
 8005542:	f003 030f 	and.w	r3, r3, #15
 8005546:	2101      	movs	r1, #1
 8005548:	fa01 f303 	lsl.w	r3, r1, r3
 800554c:	68b9      	ldr	r1, [r7, #8]
 800554e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005552:	4313      	orrs	r3, r2
 8005554:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005562:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005566:	2b00      	cmp	r3, #0
 8005568:	da03      	bge.n	8005572 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800556a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800556e:	613b      	str	r3, [r7, #16]
 8005570:	e001      	b.n	8005576 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005572:	2300      	movs	r3, #0
 8005574:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8005576:	f897 3020 	ldrb.w	r3, [r7, #32]
 800557a:	2b02      	cmp	r3, #2
 800557c:	d103      	bne.n	8005586 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800557e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005582:	60fb      	str	r3, [r7, #12]
 8005584:	e001      	b.n	800558a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005586:	2300      	movs	r3, #0
 8005588:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800558a:	787b      	ldrb	r3, [r7, #1]
 800558c:	059b      	lsls	r3, r3, #22
 800558e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005592:	78bb      	ldrb	r3, [r7, #2]
 8005594:	02db      	lsls	r3, r3, #11
 8005596:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800559a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800559c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80055a0:	049b      	lsls	r3, r3, #18
 80055a2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80055a6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80055a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80055aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80055ae:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80055b4:	78fb      	ldrb	r3, [r7, #3]
 80055b6:	0159      	lsls	r1, r3, #5
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	440b      	add	r3, r1
 80055bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055c0:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80055c6:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80055c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80055cc:	2b03      	cmp	r3, #3
 80055ce:	d10f      	bne.n	80055f0 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80055d0:	78fb      	ldrb	r3, [r7, #3]
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	78fa      	ldrb	r2, [r7, #3]
 80055e0:	0151      	lsls	r1, r2, #5
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	440a      	add	r2, r1
 80055e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055ee:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80055f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	371c      	adds	r7, #28
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop

08005600 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b08c      	sub	sp, #48	; 0x30
 8005604:	af02      	add	r7, sp, #8
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	4613      	mov	r3, r2
 800560c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	785b      	ldrb	r3, [r3, #1]
 8005616:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005618:	f44f 7380 	mov.w	r3, #256	; 0x100
 800561c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005626:	2b00      	cmp	r3, #0
 8005628:	d028      	beq.n	800567c <USB_HC_StartXfer+0x7c>
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	791b      	ldrb	r3, [r3, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d124      	bne.n	800567c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005632:	79fb      	ldrb	r3, [r7, #7]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10b      	bne.n	8005650 <USB_HC_StartXfer+0x50>
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	795b      	ldrb	r3, [r3, #5]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d107      	bne.n	8005650 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	785b      	ldrb	r3, [r3, #1]
 8005644:	4619      	mov	r1, r3
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f000 fa2e 	bl	8005aa8 <USB_DoPing>
      return HAL_OK;
 800564c:	2300      	movs	r3, #0
 800564e:	e112      	b.n	8005876 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8005650:	79fb      	ldrb	r3, [r7, #7]
 8005652:	2b01      	cmp	r3, #1
 8005654:	d112      	bne.n	800567c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	015a      	lsls	r2, r3, #5
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	4413      	add	r3, r2
 800565e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	69fa      	ldr	r2, [r7, #28]
 8005666:	0151      	lsls	r1, r2, #5
 8005668:	6a3a      	ldr	r2, [r7, #32]
 800566a:	440a      	add	r2, r1
 800566c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005670:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005674:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	2200      	movs	r2, #0
 800567a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d018      	beq.n	80056b6 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	8912      	ldrh	r2, [r2, #8]
 800568c:	4413      	add	r3, r2
 800568e:	3b01      	subs	r3, #1
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	8912      	ldrh	r2, [r2, #8]
 8005694:	fbb3 f3f2 	udiv	r3, r3, r2
 8005698:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800569a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800569c:	8b7b      	ldrh	r3, [r7, #26]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d90b      	bls.n	80056ba <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80056a2:	8b7b      	ldrh	r3, [r7, #26]
 80056a4:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80056a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	8912      	ldrh	r2, [r2, #8]
 80056ac:	fb02 f203 	mul.w	r2, r2, r3
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	611a      	str	r2, [r3, #16]
 80056b4:	e001      	b.n	80056ba <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80056b6:	2301      	movs	r3, #1
 80056b8:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	78db      	ldrb	r3, [r3, #3]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d006      	beq.n	80056d0 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80056c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	8912      	ldrh	r2, [r2, #8]
 80056c8:	fb02 f203 	mul.w	r2, r2, r3
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80056d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80056da:	04d9      	lsls	r1, r3, #19
 80056dc:	4b68      	ldr	r3, [pc, #416]	; (8005880 <USB_HC_StartXfer+0x280>)
 80056de:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80056e0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	7a9b      	ldrb	r3, [r3, #10]
 80056e6:	075b      	lsls	r3, r3, #29
 80056e8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80056ec:	69f9      	ldr	r1, [r7, #28]
 80056ee:	0148      	lsls	r0, r1, #5
 80056f0:	6a39      	ldr	r1, [r7, #32]
 80056f2:	4401      	add	r1, r0
 80056f4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80056f8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80056fa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80056fc:	79fb      	ldrb	r3, [r7, #7]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d009      	beq.n	8005716 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	68d9      	ldr	r1, [r3, #12]
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	4413      	add	r3, r2
 800570e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005712:	460a      	mov	r2, r1
 8005714:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005716:	6a3b      	ldr	r3, [r7, #32]
 8005718:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b00      	cmp	r3, #0
 8005724:	bf0c      	ite	eq
 8005726:	2301      	moveq	r3, #1
 8005728:	2300      	movne	r3, #0
 800572a:	b2db      	uxtb	r3, r3
 800572c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	015a      	lsls	r2, r3, #5
 8005732:	6a3b      	ldr	r3, [r7, #32]
 8005734:	4413      	add	r3, r2
 8005736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	69fa      	ldr	r2, [r7, #28]
 800573e:	0151      	lsls	r1, r2, #5
 8005740:	6a3a      	ldr	r2, [r7, #32]
 8005742:	440a      	add	r2, r1
 8005744:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005748:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800574c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	6a3b      	ldr	r3, [r7, #32]
 8005754:	4413      	add	r3, r2
 8005756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	7e7b      	ldrb	r3, [r7, #25]
 800575e:	075b      	lsls	r3, r3, #29
 8005760:	69f9      	ldr	r1, [r7, #28]
 8005762:	0148      	lsls	r0, r1, #5
 8005764:	6a39      	ldr	r1, [r7, #32]
 8005766:	4401      	add	r1, r0
 8005768:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800576c:	4313      	orrs	r3, r2
 800576e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	4413      	add	r3, r2
 8005778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a41      	ldr	r2, [pc, #260]	; (8005884 <USB_HC_StartXfer+0x284>)
 8005780:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005782:	4b40      	ldr	r3, [pc, #256]	; (8005884 <USB_HC_StartXfer+0x284>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800578a:	4a3e      	ldr	r2, [pc, #248]	; (8005884 <USB_HC_StartXfer+0x284>)
 800578c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	78db      	ldrb	r3, [r3, #3]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d006      	beq.n	80057a4 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005796:	4b3b      	ldr	r3, [pc, #236]	; (8005884 <USB_HC_StartXfer+0x284>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800579e:	4a39      	ldr	r2, [pc, #228]	; (8005884 <USB_HC_StartXfer+0x284>)
 80057a0:	6013      	str	r3, [r2, #0]
 80057a2:	e005      	b.n	80057b0 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80057a4:	4b37      	ldr	r3, [pc, #220]	; (8005884 <USB_HC_StartXfer+0x284>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057ac:	4a35      	ldr	r2, [pc, #212]	; (8005884 <USB_HC_StartXfer+0x284>)
 80057ae:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80057b0:	4b34      	ldr	r3, [pc, #208]	; (8005884 <USB_HC_StartXfer+0x284>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057b8:	4a32      	ldr	r2, [pc, #200]	; (8005884 <USB_HC_StartXfer+0x284>)
 80057ba:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c8:	461a      	mov	r2, r3
 80057ca:	4b2e      	ldr	r3, [pc, #184]	; (8005884 <USB_HC_StartXfer+0x284>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 80057d0:	79fb      	ldrb	r3, [r7, #7]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d14e      	bne.n	8005874 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	78db      	ldrb	r3, [r3, #3]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d14a      	bne.n	8005874 <USB_HC_StartXfer+0x274>
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d046      	beq.n	8005874 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	79db      	ldrb	r3, [r3, #7]
 80057ea:	2b03      	cmp	r3, #3
 80057ec:	d830      	bhi.n	8005850 <USB_HC_StartXfer+0x250>
 80057ee:	a201      	add	r2, pc, #4	; (adr r2, 80057f4 <USB_HC_StartXfer+0x1f4>)
 80057f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f4:	08005805 	.word	0x08005805
 80057f8:	08005829 	.word	0x08005829
 80057fc:	08005805 	.word	0x08005805
 8005800:	08005829 	.word	0x08005829
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	3303      	adds	r3, #3
 800580a:	089b      	lsrs	r3, r3, #2
 800580c:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800580e:	8afa      	ldrh	r2, [r7, #22]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005814:	b29b      	uxth	r3, r3
 8005816:	429a      	cmp	r2, r3
 8005818:	d91c      	bls.n	8005854 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	f043 0220 	orr.w	r2, r3, #32
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	619a      	str	r2, [r3, #24]
          }
          break;
 8005826:	e015      	b.n	8005854 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	3303      	adds	r3, #3
 800582e:	089b      	lsrs	r3, r3, #2
 8005830:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005832:	8afa      	ldrh	r2, [r7, #22]
 8005834:	6a3b      	ldr	r3, [r7, #32]
 8005836:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	b29b      	uxth	r3, r3
 800583e:	429a      	cmp	r2, r3
 8005840:	d90a      	bls.n	8005858 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	619a      	str	r2, [r3, #24]
          }
          break;
 800584e:	e003      	b.n	8005858 <USB_HC_StartXfer+0x258>

        default:
          break;
 8005850:	bf00      	nop
 8005852:	e002      	b.n	800585a <USB_HC_StartXfer+0x25a>
          break;
 8005854:	bf00      	nop
 8005856:	e000      	b.n	800585a <USB_HC_StartXfer+0x25a>
          break;
 8005858:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	68d9      	ldr	r1, [r3, #12]
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	785a      	ldrb	r2, [r3, #1]
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	b298      	uxth	r0, r3
 8005868:	2300      	movs	r3, #0
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	4603      	mov	r3, r0
 800586e:	68f8      	ldr	r0, [r7, #12]
 8005870:	f7ff fb86 	bl	8004f80 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3728      	adds	r7, #40	; 0x28
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	1ff80000 	.word	0x1ff80000
 8005884:	200000ac 	.word	0x200000ac

08005888 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800589a:	695b      	ldr	r3, [r3, #20]
 800589c:	b29b      	uxth	r3, r3
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3714      	adds	r7, #20
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b087      	sub	sp, #28
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
 80058b2:	460b      	mov	r3, r1
 80058b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80058ba:	78fb      	ldrb	r3, [r7, #3]
 80058bc:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80058be:	2300      	movs	r3, #0
 80058c0:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	015a      	lsls	r2, r3, #5
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	4413      	add	r3, r2
 80058ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	0c9b      	lsrs	r3, r3, #18
 80058d2:	f003 0303 	and.w	r3, r3, #3
 80058d6:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d002      	beq.n	80058e4 <USB_HC_Halt+0x3a>
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d16c      	bne.n	80059be <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	015a      	lsls	r2, r3, #5
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	0151      	lsls	r1, r2, #5
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	440a      	add	r2, r1
 80058fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005902:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d143      	bne.n	8005998 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	4413      	add	r3, r2
 8005918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	0151      	lsls	r1, r2, #5
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	440a      	add	r2, r1
 8005926:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800592a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800592e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	4413      	add	r3, r2
 8005938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	0151      	lsls	r1, r2, #5
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	440a      	add	r2, r1
 8005946:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800594a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800594e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	4413      	add	r3, r2
 8005958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	0151      	lsls	r1, r2, #5
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	440a      	add	r2, r1
 8005966:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800596a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800596e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	3301      	adds	r3, #1
 8005974:	617b      	str	r3, [r7, #20]
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800597c:	d81d      	bhi.n	80059ba <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	4413      	add	r3, r2
 8005986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005990:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005994:	d0ec      	beq.n	8005970 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005996:	e080      	b.n	8005a9a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	015a      	lsls	r2, r3, #5
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	4413      	add	r3, r2
 80059a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	0151      	lsls	r1, r2, #5
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	440a      	add	r2, r1
 80059ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059b6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80059b8:	e06f      	b.n	8005a9a <USB_HC_Halt+0x1f0>
          break;
 80059ba:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80059bc:	e06d      	b.n	8005a9a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	015a      	lsls	r2, r3, #5
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	0151      	lsls	r1, r2, #5
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	440a      	add	r2, r1
 80059d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059dc:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d143      	bne.n	8005a76 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	015a      	lsls	r2, r3, #5
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	4413      	add	r3, r2
 80059f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	0151      	lsls	r1, r2, #5
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	440a      	add	r2, r1
 8005a04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a0c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	015a      	lsls	r2, r3, #5
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	0151      	lsls	r1, r2, #5
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	440a      	add	r2, r1
 8005a24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a2c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	0151      	lsls	r1, r2, #5
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	440a      	add	r2, r1
 8005a44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a4c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	3301      	adds	r3, #1
 8005a52:	617b      	str	r3, [r7, #20]
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a5a:	d81d      	bhi.n	8005a98 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	015a      	lsls	r2, r3, #5
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a72:	d0ec      	beq.n	8005a4e <USB_HC_Halt+0x1a4>
 8005a74:	e011      	b.n	8005a9a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	0151      	lsls	r1, r2, #5
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	440a      	add	r2, r1
 8005a8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a94:	6013      	str	r3, [r2, #0]
 8005a96:	e000      	b.n	8005a9a <USB_HC_Halt+0x1f0>
          break;
 8005a98:	bf00      	nop
    }
  }

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	371c      	adds	r7, #28
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005ab8:	78fb      	ldrb	r3, [r7, #3]
 8005aba:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005abc:	2301      	movs	r3, #1
 8005abe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	04da      	lsls	r2, r3, #19
 8005ac4:	4b15      	ldr	r3, [pc, #84]	; (8005b1c <USB_DoPing+0x74>)
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	0151      	lsls	r1, r2, #5
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	440a      	add	r2, r1
 8005ad0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ad4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ad8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	015a      	lsls	r2, r3, #5
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005af0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005af8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	015a      	lsls	r2, r3, #5
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b06:	461a      	mov	r2, r3
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	371c      	adds	r7, #28
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	1ff80000 	.word	0x1ff80000

08005b20 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7ff f9a1 	bl	8004e78 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005b36:	2110      	movs	r1, #16
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f7ff f9d9 	bl	8004ef0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7ff f9fc 	bl	8004f3c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005b44:	2300      	movs	r3, #0
 8005b46:	613b      	str	r3, [r7, #16]
 8005b48:	e01f      	b.n	8005b8a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	015a      	lsls	r2, r3, #5
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	4413      	add	r3, r2
 8005b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b60:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b68:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b70:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	015a      	lsls	r2, r3, #5
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	4413      	add	r3, r2
 8005b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b7e:	461a      	mov	r2, r3
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	3301      	adds	r3, #1
 8005b88:	613b      	str	r3, [r7, #16]
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	2b0f      	cmp	r3, #15
 8005b8e:	d9dc      	bls.n	8005b4a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005b90:	2300      	movs	r3, #0
 8005b92:	613b      	str	r3, [r7, #16]
 8005b94:	e034      	b.n	8005c00 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bac:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bb4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005bbc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	015a      	lsls	r2, r3, #5
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bca:	461a      	mov	r2, r3
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	617b      	str	r3, [r7, #20]
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bdc:	d80c      	bhi.n	8005bf8 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bf4:	d0ec      	beq.n	8005bd0 <USB_StopHost+0xb0>
 8005bf6:	e000      	b.n	8005bfa <USB_StopHost+0xda>
        break;
 8005bf8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	613b      	str	r3, [r7, #16]
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	2b0f      	cmp	r3, #15
 8005c04:	d9c7      	bls.n	8005b96 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c12:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f04f 32ff 	mov.w	r2, #4294967295
 8005c1a:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f7ff f91a 	bl	8004e56 <USB_EnableGlobalInt>

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3718      	adds	r7, #24
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8005c2c:	b590      	push	{r4, r7, lr}
 8005c2e:	b089      	sub	sp, #36	; 0x24
 8005c30:	af04      	add	r7, sp, #16
 8005c32:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8005c34:	2302      	movs	r3, #2
 8005c36:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8005c38:	2301      	movs	r3, #1
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	2102      	movs	r1, #2
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 fc8c 	bl	800655c <USBH_FindInterface>
 8005c44:	4603      	mov	r3, r0
 8005c46:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8005c48:	7bbb      	ldrb	r3, [r7, #14]
 8005c4a:	2bff      	cmp	r3, #255	; 0xff
 8005c4c:	f000 812a 	beq.w	8005ea4 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8005c50:	7bbb      	ldrb	r3, [r7, #14]
 8005c52:	4619      	mov	r1, r3
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 fc65 	bl	8006524 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8005c60:	2050      	movs	r0, #80	; 0x50
 8005c62:	f005 fde7 	bl	800b834 <malloc>
 8005c66:	4603      	mov	r3, r0
 8005c68:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005c74:	7bbb      	ldrb	r3, [r7, #14]
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	211a      	movs	r1, #26
 8005c7a:	fb01 f303 	mul.w	r3, r1, r3
 8005c7e:	4413      	add	r3, r2
 8005c80:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	b25b      	sxtb	r3, r3
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	da15      	bge.n	8005cb8 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005c8c:	7bbb      	ldrb	r3, [r7, #14]
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	211a      	movs	r1, #26
 8005c92:	fb01 f303 	mul.w	r3, r1, r3
 8005c96:	4413      	add	r3, r2
 8005c98:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005c9c:	781a      	ldrb	r2, [r3, #0]
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005ca2:	7bbb      	ldrb	r3, [r7, #14]
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	211a      	movs	r1, #26
 8005ca8:	fb01 f303 	mul.w	r3, r1, r3
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005cb2:	881a      	ldrh	r2, [r3, #0]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	785b      	ldrb	r3, [r3, #1]
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f001 ff2f 	bl	8007b22 <USBH_AllocPipe>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	7819      	ldrb	r1, [r3, #0]
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	7858      	ldrb	r0, [r3, #1]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005ce0:	68ba      	ldr	r2, [r7, #8]
 8005ce2:	8952      	ldrh	r2, [r2, #10]
 8005ce4:	9202      	str	r2, [sp, #8]
 8005ce6:	2203      	movs	r2, #3
 8005ce8:	9201      	str	r2, [sp, #4]
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	4623      	mov	r3, r4
 8005cee:	4602      	mov	r2, r0
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f001 fee7 	bl	8007ac4 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f005 fcbe 	bl	800b680 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8005d04:	2300      	movs	r3, #0
 8005d06:	2200      	movs	r2, #0
 8005d08:	210a      	movs	r1, #10
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 fc26 	bl	800655c <USBH_FindInterface>
 8005d10:	4603      	mov	r3, r0
 8005d12:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8005d14:	7bbb      	ldrb	r3, [r7, #14]
 8005d16:	2bff      	cmp	r3, #255	; 0xff
 8005d18:	f000 80c4 	beq.w	8005ea4 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005d1c:	7bbb      	ldrb	r3, [r7, #14]
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	211a      	movs	r1, #26
 8005d22:	fb01 f303 	mul.w	r3, r1, r3
 8005d26:	4413      	add	r3, r2
 8005d28:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	b25b      	sxtb	r3, r3
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	da16      	bge.n	8005d62 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005d34:	7bbb      	ldrb	r3, [r7, #14]
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	211a      	movs	r1, #26
 8005d3a:	fb01 f303 	mul.w	r3, r1, r3
 8005d3e:	4413      	add	r3, r2
 8005d40:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005d44:	781a      	ldrb	r2, [r3, #0]
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005d4a:	7bbb      	ldrb	r3, [r7, #14]
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	211a      	movs	r1, #26
 8005d50:	fb01 f303 	mul.w	r3, r1, r3
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005d5a:	881a      	ldrh	r2, [r3, #0]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	835a      	strh	r2, [r3, #26]
 8005d60:	e015      	b.n	8005d8e <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005d62:	7bbb      	ldrb	r3, [r7, #14]
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	211a      	movs	r1, #26
 8005d68:	fb01 f303 	mul.w	r3, r1, r3
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005d72:	781a      	ldrb	r2, [r3, #0]
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005d78:	7bbb      	ldrb	r3, [r7, #14]
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	211a      	movs	r1, #26
 8005d7e:	fb01 f303 	mul.w	r3, r1, r3
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005d88:	881a      	ldrh	r2, [r3, #0]
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005d8e:	7bbb      	ldrb	r3, [r7, #14]
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	211a      	movs	r1, #26
 8005d94:	fb01 f303 	mul.w	r3, r1, r3
 8005d98:	4413      	add	r3, r2
 8005d9a:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	b25b      	sxtb	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	da16      	bge.n	8005dd4 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005da6:	7bbb      	ldrb	r3, [r7, #14]
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	211a      	movs	r1, #26
 8005dac:	fb01 f303 	mul.w	r3, r1, r3
 8005db0:	4413      	add	r3, r2
 8005db2:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005db6:	781a      	ldrb	r2, [r3, #0]
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005dbc:	7bbb      	ldrb	r3, [r7, #14]
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	211a      	movs	r1, #26
 8005dc2:	fb01 f303 	mul.w	r3, r1, r3
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005dcc:	881a      	ldrh	r2, [r3, #0]
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	835a      	strh	r2, [r3, #26]
 8005dd2:	e015      	b.n	8005e00 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005dd4:	7bbb      	ldrb	r3, [r7, #14]
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	211a      	movs	r1, #26
 8005dda:	fb01 f303 	mul.w	r3, r1, r3
 8005dde:	4413      	add	r3, r2
 8005de0:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005de4:	781a      	ldrb	r2, [r3, #0]
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005dea:	7bbb      	ldrb	r3, [r7, #14]
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	211a      	movs	r1, #26
 8005df0:	fb01 f303 	mul.w	r3, r1, r3
 8005df4:	4413      	add	r3, r2
 8005df6:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005dfa:	881a      	ldrh	r2, [r3, #0]
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	7b9b      	ldrb	r3, [r3, #14]
 8005e04:	4619      	mov	r1, r3
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f001 fe8b 	bl	8007b22 <USBH_AllocPipe>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	461a      	mov	r2, r3
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	7bdb      	ldrb	r3, [r3, #15]
 8005e18:	4619      	mov	r1, r3
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f001 fe81 	bl	8007b22 <USBH_AllocPipe>
 8005e20:	4603      	mov	r3, r0
 8005e22:	461a      	mov	r2, r3
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	7b59      	ldrb	r1, [r3, #13]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	7b98      	ldrb	r0, [r3, #14]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e3c:	68ba      	ldr	r2, [r7, #8]
 8005e3e:	8b12      	ldrh	r2, [r2, #24]
 8005e40:	9202      	str	r2, [sp, #8]
 8005e42:	2202      	movs	r2, #2
 8005e44:	9201      	str	r2, [sp, #4]
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	4623      	mov	r3, r4
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f001 fe39 	bl	8007ac4 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	7b19      	ldrb	r1, [r3, #12]
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	7bd8      	ldrb	r0, [r3, #15]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	8b52      	ldrh	r2, [r2, #26]
 8005e6a:	9202      	str	r2, [sp, #8]
 8005e6c:	2202      	movs	r2, #2
 8005e6e:	9201      	str	r2, [sp, #4]
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	4623      	mov	r3, r4
 8005e74:	4602      	mov	r2, r0
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f001 fe24 	bl	8007ac4 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	7b5b      	ldrb	r3, [r3, #13]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f005 fbf7 	bl	800b680 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	7b1b      	ldrb	r3, [r3, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	4619      	mov	r1, r3
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f005 fbf0 	bl	800b680 <USBH_LL_SetToggle>
      status = USBH_OK;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8005ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd90      	pop	{r4, r7, pc}

08005eae <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b084      	sub	sp, #16
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005ebc:	69db      	ldr	r3, [r3, #28]
 8005ebe:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00e      	beq.n	8005ee6 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	4619      	mov	r1, r3
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f001 fe17 	bl	8007b02 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	4619      	mov	r1, r3
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f001 fe3f 	bl	8007b5e <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	7b1b      	ldrb	r3, [r3, #12]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00e      	beq.n	8005f0c <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	7b1b      	ldrb	r3, [r3, #12]
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f001 fe04 	bl	8007b02 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	7b1b      	ldrb	r3, [r3, #12]
 8005efe:	4619      	mov	r1, r3
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f001 fe2c 	bl	8007b5e <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	7b5b      	ldrb	r3, [r3, #13]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00e      	beq.n	8005f32 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	7b5b      	ldrb	r3, [r3, #13]
 8005f18:	4619      	mov	r1, r3
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f001 fdf1 	bl	8007b02 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	7b5b      	ldrb	r3, [r3, #13]
 8005f24:	4619      	mov	r1, r3
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f001 fe19 	bl	8007b5e <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00b      	beq.n	8005f56 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	4618      	mov	r0, r3
 8005f48:	f005 fc7c 	bl	800b844 <free>
    phost->pActiveClass->pData = 0U;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005f52:	2200      	movs	r2, #0
 8005f54:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3710      	adds	r7, #16
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8005f68:	2302      	movs	r3, #2
 8005f6a:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005f72:	69db      	ldr	r3, [r3, #28]
 8005f74:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	3340      	adds	r3, #64	; 0x40
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 f8b2 	bl	80060e6 <GetLineCoding>
 8005f82:	4603      	mov	r3, r0
 8005f84:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8005f86:	7bfb      	ldrb	r3, [r7, #15]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d105      	bne.n	8005f98 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005f92:	2102      	movs	r1, #2
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	4798      	blx	r3
  }
  return status;
 8005f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3710      	adds	r7, #16
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
	...

08005fa4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005fac:	2301      	movs	r3, #1
 8005fae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005fba:	69db      	ldr	r3, [r3, #28]
 8005fbc:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005fc4:	2b04      	cmp	r3, #4
 8005fc6:	d877      	bhi.n	80060b8 <USBH_CDC_Process+0x114>
 8005fc8:	a201      	add	r2, pc, #4	; (adr r2, 8005fd0 <USBH_CDC_Process+0x2c>)
 8005fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fce:	bf00      	nop
 8005fd0:	08005fe5 	.word	0x08005fe5
 8005fd4:	08005feb 	.word	0x08005feb
 8005fd8:	0800601b 	.word	0x0800601b
 8005fdc:	0800608f 	.word	0x0800608f
 8005fe0:	0800609d 	.word	0x0800609d
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	73fb      	strb	r3, [r7, #15]
    break;
 8005fe8:	e06d      	b.n	80060c6 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fee:	4619      	mov	r1, r3
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 f897 	bl	8006124 <SetLineCoding>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8005ffa:	7bbb      	ldrb	r3, [r7, #14]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d104      	bne.n	800600a <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	2202      	movs	r2, #2
 8006004:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8006008:	e058      	b.n	80060bc <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 800600a:	7bbb      	ldrb	r3, [r7, #14]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d055      	beq.n	80060bc <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	2204      	movs	r2, #4
 8006014:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8006018:	e050      	b.n	80060bc <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	3340      	adds	r3, #64	; 0x40
 800601e:	4619      	mov	r1, r3
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 f860 	bl	80060e6 <GetLineCoding>
 8006026:	4603      	mov	r3, r0
 8006028:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800602a:	7bbb      	ldrb	r3, [r7, #14]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d126      	bne.n	800607e <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006042:	791b      	ldrb	r3, [r3, #4]
 8006044:	429a      	cmp	r2, r3
 8006046:	d13b      	bne.n	80060c0 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006052:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006054:	429a      	cmp	r2, r3
 8006056:	d133      	bne.n	80060c0 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006062:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006064:	429a      	cmp	r2, r3
 8006066:	d12b      	bne.n	80060c0 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006070:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006072:	429a      	cmp	r2, r3
 8006074:	d124      	bne.n	80060c0 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f984 	bl	8006384 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800607c:	e020      	b.n	80060c0 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 800607e:	7bbb      	ldrb	r3, [r7, #14]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d01d      	beq.n	80060c0 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	2204      	movs	r2, #4
 8006088:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800608c:	e018      	b.n	80060c0 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f867 	bl	8006162 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f8f8 	bl	800628a <CDC_ProcessReception>
    break;
 800609a:	e014      	b.n	80060c6 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 800609c:	2100      	movs	r1, #0
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 fffa 	bl	8007098 <USBH_ClrFeature>
 80060a4:	4603      	mov	r3, r0
 80060a6:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 80060a8:	7bbb      	ldrb	r3, [r7, #14]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10a      	bne.n	80060c4 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 80060b6:	e005      	b.n	80060c4 <USBH_CDC_Process+0x120>

  default:
    break;
 80060b8:	bf00      	nop
 80060ba:	e004      	b.n	80060c6 <USBH_CDC_Process+0x122>
    break;
 80060bc:	bf00      	nop
 80060be:	e002      	b.n	80060c6 <USBH_CDC_Process+0x122>
    break;
 80060c0:	bf00      	nop
 80060c2:	e000      	b.n	80060c6 <USBH_CDC_Process+0x122>
    break;
 80060c4:	bf00      	nop

  }

  return status;
 80060c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	370c      	adds	r7, #12
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b082      	sub	sp, #8
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
 80060ee:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	22a1      	movs	r2, #161	; 0xa1
 80060f4:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2221      	movs	r2, #33	; 0x21
 80060fa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2207      	movs	r2, #7
 800610c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	2207      	movs	r2, #7
 8006112:	4619      	mov	r1, r3
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f001 f99f 	bl	8007458 <USBH_CtlReq>
 800611a:	4603      	mov	r3, r0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3708      	adds	r7, #8
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2221      	movs	r2, #33	; 0x21
 8006132:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2220      	movs	r2, #32
 8006138:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2207      	movs	r2, #7
 800614a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	2207      	movs	r2, #7
 8006150:	4619      	mov	r1, r3
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f001 f980 	bl	8007458 <USBH_CtlReq>
 8006158:	4603      	mov	r3, r0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3708      	adds	r7, #8
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006162:	b580      	push	{r7, lr}
 8006164:	b086      	sub	sp, #24
 8006166:	af02      	add	r7, sp, #8
 8006168:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006174:	2300      	movs	r3, #0
 8006176:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800617e:	2b01      	cmp	r3, #1
 8006180:	d002      	beq.n	8006188 <CDC_ProcessTransmission+0x26>
 8006182:	2b02      	cmp	r3, #2
 8006184:	d025      	beq.n	80061d2 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8006186:	e07c      	b.n	8006282 <CDC_ProcessTransmission+0x120>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	8b12      	ldrh	r2, [r2, #24]
 8006190:	4293      	cmp	r3, r2
 8006192:	d90c      	bls.n	80061ae <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	69d9      	ldr	r1, [r3, #28]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	8b1a      	ldrh	r2, [r3, #24]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	7b58      	ldrb	r0, [r3, #13]
 80061a0:	2301      	movs	r3, #1
 80061a2:	9300      	str	r3, [sp, #0]
 80061a4:	4603      	mov	r3, r0
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f001 fc49 	bl	8007a3e <USBH_BulkSendData>
 80061ac:	e00c      	b.n	80061c8 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	7b58      	ldrb	r0, [r3, #13]
 80061bc:	2301      	movs	r3, #1
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	4603      	mov	r3, r0
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f001 fc3b 	bl	8007a3e <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80061d0:	e057      	b.n	8006282 <CDC_ProcessTransmission+0x120>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	7b5b      	ldrb	r3, [r3, #13]
 80061d6:	4619      	mov	r1, r3
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f005 fa27 	bl	800b62c <USBH_LL_GetURBState>
 80061de:	4603      	mov	r3, r0
 80061e0:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 80061e2:	7afb      	ldrb	r3, [r7, #11]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d136      	bne.n	8006256 <CDC_ProcessTransmission+0xf4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	8b12      	ldrh	r2, [r2, #24]
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d90e      	bls.n	8006212 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	8b12      	ldrh	r2, [r2, #24]
 80061fc:	1a9a      	subs	r2, r3, r2
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	69db      	ldr	r3, [r3, #28]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	8b12      	ldrh	r2, [r2, #24]
 800620a:	441a      	add	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	61da      	str	r2, [r3, #28]
 8006210:	e002      	b.n	8006218 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621c:	2b00      	cmp	r3, #0
 800621e:	d004      	beq.n	800622a <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8006228:	e006      	b.n	8006238 <CDC_ProcessTransmission+0xd6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f892 	bl	800635c <USBH_CDC_TransmitCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2204      	movs	r2, #4
 800623c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800624c:	2200      	movs	r2, #0
 800624e:	4619      	mov	r1, r3
 8006250:	f001 fd7e 	bl	8007d50 <osMessagePut>
    break;
 8006254:	e014      	b.n	8006280 <CDC_ProcessTransmission+0x11e>
      if (URB_Status == USBH_URB_NOTREADY)
 8006256:	7afb      	ldrb	r3, [r7, #11]
 8006258:	2b02      	cmp	r3, #2
 800625a:	d111      	bne.n	8006280 <CDC_ProcessTransmission+0x11e>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2204      	movs	r2, #4
 8006268:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006278:	2200      	movs	r2, #0
 800627a:	4619      	mov	r1, r3
 800627c:	f001 fd68 	bl	8007d50 <osMessagePut>
    break;
 8006280:	bf00      	nop
  }
}
 8006282:	bf00      	nop
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b086      	sub	sp, #24
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800629c:	2300      	movs	r3, #0
 800629e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80062a6:	2b03      	cmp	r3, #3
 80062a8:	d002      	beq.n	80062b0 <CDC_ProcessReception+0x26>
 80062aa:	2b04      	cmp	r3, #4
 80062ac:	d00e      	beq.n	80062cc <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 80062ae:	e051      	b.n	8006354 <CDC_ProcessReception+0xca>
    USBH_BulkReceiveData (phost,
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	6a19      	ldr	r1, [r3, #32]
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	8b5a      	ldrh	r2, [r3, #26]
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	7b1b      	ldrb	r3, [r3, #12]
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f001 fbe3 	bl	8007a88 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	2204      	movs	r2, #4
 80062c6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 80062ca:	e043      	b.n	8006354 <CDC_ProcessReception+0xca>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	7b1b      	ldrb	r3, [r3, #12]
 80062d0:	4619      	mov	r1, r3
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f005 f9aa 	bl	800b62c <USBH_LL_GetURBState>
 80062d8:	4603      	mov	r3, r0
 80062da:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 80062dc:	7cfb      	ldrb	r3, [r7, #19]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d137      	bne.n	8006352 <CDC_ProcessReception+0xc8>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	7b1b      	ldrb	r3, [r3, #12]
 80062e6:	4619      	mov	r1, r3
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f005 f90d 	bl	800b508 <USBH_LL_GetLastXferSize>
 80062ee:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d016      	beq.n	8006328 <CDC_ProcessReception+0x9e>
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	8b5b      	ldrh	r3, [r3, #26]
 80062fe:	461a      	mov	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	4293      	cmp	r3, r2
 8006304:	d910      	bls.n	8006328 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	1ad2      	subs	r2, r2, r3
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	6a1a      	ldr	r2, [r3, #32]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	441a      	add	r2, r3
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	2203      	movs	r2, #3
 8006322:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8006326:	e006      	b.n	8006336 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 f81d 	bl	8006370 <USBH_CDC_ReceiveCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2204      	movs	r2, #4
 800633a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800634a:	2200      	movs	r2, #0
 800634c:	4619      	mov	r1, r3
 800634e:	f001 fcff 	bl	8007d50 <osMessagePut>
    break;
 8006352:	bf00      	nop
  }
}
 8006354:	bf00      	nop
 8006356:	3718      	adds	r7, #24
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]

}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]

}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]

}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8006398:	b5b0      	push	{r4, r5, r7, lr}
 800639a:	b090      	sub	sp, #64	; 0x40
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	4613      	mov	r3, r2
 80063a4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d101      	bne.n	80063b0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80063ac:	2302      	movs	r3, #2
 80063ae:	e03d      	b.n	800642c <USBH_Init+0x94>
  }

  /* Set DRiver ID */
  phost->id = id;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	79fa      	ldrb	r2, [r7, #7]
 80063b4:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f000 f837 	bl	800643c <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d003      	beq.n	80063dc <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 80063dc:	4b15      	ldr	r3, [pc, #84]	; (8006434 <USBH_Init+0x9c>)
 80063de:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80063e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80063e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 80063e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80063ec:	2100      	movs	r1, #0
 80063ee:	4618      	mov	r0, r3
 80063f0:	f001 fc85 	bl	8007cfe <osMessageCreate>
 80063f4:	4602      	mov	r2, r0
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 80063fc:	4b0e      	ldr	r3, [pc, #56]	; (8006438 <USBH_Init+0xa0>)
 80063fe:	f107 0414 	add.w	r4, r7, #20
 8006402:	461d      	mov	r5, r3
 8006404:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006408:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800640c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 8006410:	f107 0314 	add.w	r3, r7, #20
 8006414:	68f9      	ldr	r1, [r7, #12]
 8006416:	4618      	mov	r0, r3
 8006418:	f001 fc11 	bl	8007c3e <osThreadCreate>
 800641c:	4602      	mov	r2, r0
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f004 ffb3 	bl	800b390 <USBH_LL_Init>

  return USBH_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3740      	adds	r7, #64	; 0x40
 8006430:	46bd      	mov	sp, r7
 8006432:	bdb0      	pop	{r4, r5, r7, pc}
 8006434:	0800ba0c 	.word	0x0800ba0c
 8006438:	0800ba28 	.word	0x0800ba28

0800643c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006444:	2300      	movs	r3, #0
 8006446:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006448:	e008      	b.n	800645c <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	32e0      	adds	r2, #224	; 0xe0
 8006450:	2100      	movs	r1, #0
 8006452:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	3301      	adds	r3, #1
 800645a:	60fb      	str	r3, [r7, #12]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2b0e      	cmp	r3, #14
 8006460:	d9f3      	bls.n	800644a <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006462:	2300      	movs	r3, #0
 8006464:	60fb      	str	r3, [r7, #12]
 8006466:	e009      	b.n	800647c <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	4413      	add	r3, r2
 800646e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006472:	2200      	movs	r2, #0
 8006474:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	3301      	adds	r3, #1
 800647a:	60fb      	str	r3, [r7, #12]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006482:	d3f1      	bcc.n	8006468 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2240      	movs	r2, #64	; 0x40
 80064a8:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3714      	adds	r7, #20
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr

080064ce <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80064ce:	b480      	push	{r7}
 80064d0:	b085      	sub	sp, #20
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
 80064d6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 80064d8:	2300      	movs	r3, #0
 80064da:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d017      	beq.n	8006512 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d10f      	bne.n	800650c <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064f2:	1c59      	adds	r1, r3, #1
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	33dc      	adds	r3, #220	; 0xdc
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	683a      	ldr	r2, [r7, #0]
 8006504:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8006506:	2300      	movs	r3, #0
 8006508:	73fb      	strb	r3, [r7, #15]
 800650a:	e004      	b.n	8006516 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800650c:	2302      	movs	r3, #2
 800650e:	73fb      	strb	r3, [r7, #15]
 8006510:	e001      	b.n	8006516 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006512:	2302      	movs	r3, #2
 8006514:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006516:	7bfb      	ldrb	r3, [r7, #15]
}
 8006518:	4618      	mov	r0, r3
 800651a:	3714      	adds	r7, #20
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	460b      	mov	r3, r1
 800652e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8006530:	2300      	movs	r3, #0
 8006532:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 800653a:	78fa      	ldrb	r2, [r7, #3]
 800653c:	429a      	cmp	r2, r3
 800653e:	d204      	bcs.n	800654a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	78fa      	ldrb	r2, [r7, #3]
 8006544:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8006548:	e001      	b.n	800654e <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 800654a:	2302      	movs	r3, #2
 800654c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800654e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006550:	4618      	mov	r0, r3
 8006552:	3714      	adds	r7, #20
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800655c:	b480      	push	{r7}
 800655e:	b087      	sub	sp, #28
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	4608      	mov	r0, r1
 8006566:	4611      	mov	r1, r2
 8006568:	461a      	mov	r2, r3
 800656a:	4603      	mov	r3, r0
 800656c:	70fb      	strb	r3, [r7, #3]
 800656e:	460b      	mov	r3, r1
 8006570:	70bb      	strb	r3, [r7, #2]
 8006572:	4613      	mov	r3, r2
 8006574:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8006576:	2300      	movs	r3, #0
 8006578:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800657a:	2300      	movs	r3, #0
 800657c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8006584:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006586:	e025      	b.n	80065d4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006588:	7dfb      	ldrb	r3, [r7, #23]
 800658a:	221a      	movs	r2, #26
 800658c:	fb02 f303 	mul.w	r3, r2, r3
 8006590:	3308      	adds	r3, #8
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	4413      	add	r3, r2
 8006596:	3302      	adds	r3, #2
 8006598:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	795b      	ldrb	r3, [r3, #5]
 800659e:	78fa      	ldrb	r2, [r7, #3]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d002      	beq.n	80065aa <USBH_FindInterface+0x4e>
 80065a4:	78fb      	ldrb	r3, [r7, #3]
 80065a6:	2bff      	cmp	r3, #255	; 0xff
 80065a8:	d111      	bne.n	80065ce <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 80065ae:	78ba      	ldrb	r2, [r7, #2]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d002      	beq.n	80065ba <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80065b4:	78bb      	ldrb	r3, [r7, #2]
 80065b6:	2bff      	cmp	r3, #255	; 0xff
 80065b8:	d109      	bne.n	80065ce <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80065be:	787a      	ldrb	r2, [r7, #1]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d002      	beq.n	80065ca <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80065c4:	787b      	ldrb	r3, [r7, #1]
 80065c6:	2bff      	cmp	r3, #255	; 0xff
 80065c8:	d101      	bne.n	80065ce <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80065ca:	7dfb      	ldrb	r3, [r7, #23]
 80065cc:	e006      	b.n	80065dc <USBH_FindInterface+0x80>
    }
    if_ix++;
 80065ce:	7dfb      	ldrb	r3, [r7, #23]
 80065d0:	3301      	adds	r3, #1
 80065d2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80065d4:	7dfb      	ldrb	r3, [r7, #23]
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d9d6      	bls.n	8006588 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80065da:	23ff      	movs	r3, #255	; 0xff
}
 80065dc:	4618      	mov	r0, r3
 80065de:	371c      	adds	r7, #28
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f004 ff13 	bl	800b41c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 80065f6:	2101      	movs	r1, #1
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f005 f82a 	bl	800b652 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3708      	adds	r7, #8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b088      	sub	sp, #32
 800660c:	af04      	add	r7, sp, #16
 800660e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006610:	2302      	movs	r3, #2
 8006612:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006614:	2300      	movs	r3, #0
 8006616:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 fb7e 	bl	8006d1a <USBH_IsPortEnabled>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10c      	bne.n	800663e <USBH_Process+0x36>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d007      	beq.n	800663e <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	b2db      	uxtb	r3, r3
 8006634:	2b03      	cmp	r3, #3
 8006636:	d002      	beq.n	800663e <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2203      	movs	r2, #3
 800663c:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	b2db      	uxtb	r3, r3
 8006644:	2b0b      	cmp	r3, #11
 8006646:	f200 81ab 	bhi.w	80069a0 <USBH_Process+0x398>
 800664a:	a201      	add	r2, pc, #4	; (adr r2, 8006650 <USBH_Process+0x48>)
 800664c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006650:	08006681 	.word	0x08006681
 8006654:	080066bf 	.word	0x080066bf
 8006658:	080066d3 	.word	0x080066d3
 800665c:	0800697b 	.word	0x0800697b
 8006660:	080069a1 	.word	0x080069a1
 8006664:	0800677d 	.word	0x0800677d
 8006668:	08006915 	.word	0x08006915
 800666c:	080067ad 	.word	0x080067ad
 8006670:	080067e9 	.word	0x080067e9
 8006674:	08006823 	.word	0x08006823
 8006678:	0800686b 	.word	0x0800686b
 800667c:	08006963 	.word	0x08006963
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006686:	b2db      	uxtb	r3, r3
 8006688:	2b00      	cmp	r3, #0
 800668a:	f000 818b 	beq.w	80069a4 <USBH_Process+0x39c>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8006694:	20c8      	movs	r0, #200	; 0xc8
 8006696:	f005 f826 	bl	800b6e6 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f004 ff19 	bl	800b4d2 <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80066b4:	2200      	movs	r2, #0
 80066b6:	4619      	mov	r1, r3
 80066b8:	f001 fb4a 	bl	8007d50 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80066bc:	e172      	b.n	80069a4 <USBH_Process+0x39c>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	f040 816f 	bne.w	80069a8 <USBH_Process+0x3a0>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2202      	movs	r2, #2
 80066ce:	701a      	strb	r2, [r3, #0]
    }
    break;
 80066d0:	e16a      	b.n	80069a8 <USBH_Process+0x3a0>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 80066d2:	2064      	movs	r0, #100	; 0x64
 80066d4:	f005 f807 	bl	800b6e6 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f004 fed5 	bl	800b488 <USBH_LL_GetSpeed>
 80066de:	4603      	mov	r3, r0
 80066e0:	461a      	mov	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2205      	movs	r2, #5
 80066ec:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 80066ee:	2100      	movs	r1, #0
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f001 fa16 	bl	8007b22 <USBH_AllocPipe>
 80066f6:	4603      	mov	r3, r0
 80066f8:	461a      	mov	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80066fe:	2180      	movs	r1, #128	; 0x80
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f001 fa0e 	bl	8007b22 <USBH_AllocPipe>
 8006706:	4603      	mov	r3, r0
 8006708:	461a      	mov	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	7919      	ldrb	r1, [r3, #4]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8006722:	b292      	uxth	r2, r2
 8006724:	9202      	str	r2, [sp, #8]
 8006726:	2200      	movs	r2, #0
 8006728:	9201      	str	r2, [sp, #4]
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	4603      	mov	r3, r0
 800672e:	2280      	movs	r2, #128	; 0x80
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f001 f9c7 	bl	8007ac4 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	7959      	ldrb	r1, [r3, #5]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800674a:	b292      	uxth	r2, r2
 800674c:	9202      	str	r2, [sp, #8]
 800674e:	2200      	movs	r2, #0
 8006750:	9201      	str	r2, [sp, #4]
 8006752:	9300      	str	r3, [sp, #0]
 8006754:	4603      	mov	r3, r0
 8006756:	2200      	movs	r2, #0
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f001 f9b3 	bl	8007ac4 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2201      	movs	r2, #1
 8006762:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006772:	2200      	movs	r2, #0
 8006774:	4619      	mov	r1, r3
 8006776:	f001 faeb 	bl	8007d50 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800677a:	e120      	b.n	80069be <USBH_Process+0x3b6>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 f923 	bl	80069c8 <USBH_HandleEnum>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	f040 8111 	bne.w	80069ac <USBH_Process+0x3a4>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8006798:	2b01      	cmp	r3, #1
 800679a:	d103      	bne.n	80067a4 <USBH_Process+0x19c>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2208      	movs	r2, #8
 80067a0:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 80067a2:	e103      	b.n	80069ac <USBH_Process+0x3a4>
        phost->gState  = HOST_INPUT;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2207      	movs	r2, #7
 80067a8:	701a      	strb	r2, [r3, #0]
    break;
 80067aa:	e0ff      	b.n	80069ac <USBH_Process+0x3a4>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f000 80fc 	beq.w	80069b0 <USBH_Process+0x3a8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80067be:	2101      	movs	r1, #1
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2208      	movs	r2, #8
 80067c8:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2205      	movs	r2, #5
 80067ce:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80067de:	2200      	movs	r2, #0
 80067e0:	4619      	mov	r1, r3
 80067e2:	f001 fab5 	bl	8007d50 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80067e6:	e0e3      	b.n	80069b0 <USBH_Process+0x3a8>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	4619      	mov	r1, r3
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 fc09 	bl	800700a <USBH_SetCfg>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d102      	bne.n	8006804 <USBH_Process+0x1fc>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2209      	movs	r2, #9
 8006802:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006818:	2200      	movs	r2, #0
 800681a:	4619      	mov	r1, r3
 800681c:	f001 fa98 	bl	8007d50 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006820:	e0cd      	b.n	80069be <USBH_Process+0x3b6>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8006828:	f003 0320 	and.w	r3, r3, #32
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00a      	beq.n	8006846 <USBH_Process+0x23e>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006830:	2101      	movs	r1, #1
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fc0c 	bl	8007050 <USBH_SetFeature>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d106      	bne.n	800684c <USBH_Process+0x244>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	220a      	movs	r2, #10
 8006842:	701a      	strb	r2, [r3, #0]
 8006844:	e002      	b.n	800684c <USBH_Process+0x244>
      }
    }
    else
    {
      phost->gState  = HOST_CHECK_CLASS;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	220a      	movs	r2, #10
 800684a:	701a      	strb	r2, [r3, #0]
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006860:	2200      	movs	r2, #0
 8006862:	4619      	mov	r1, r3
 8006864:	f001 fa74 	bl	8007d50 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006868:	e0a9      	b.n	80069be <USBH_Process+0x3b6>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006870:	2b00      	cmp	r3, #0
 8006872:	d040      	beq.n	80068f6 <USBH_Process+0x2ee>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800687c:	2300      	movs	r3, #0
 800687e:	73fb      	strb	r3, [r7, #15]
 8006880:	e017      	b.n	80068b2 <USBH_Process+0x2aa>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006882:	7bfb      	ldrb	r3, [r7, #15]
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	33dc      	adds	r3, #220	; 0xdc
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	4413      	add	r3, r2
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	791a      	ldrb	r2, [r3, #4]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8006896:	429a      	cmp	r2, r3
 8006898:	d108      	bne.n	80068ac <USBH_Process+0x2a4>
        {
          phost->pActiveClass = phost->pClass[idx];
 800689a:	7bfb      	ldrb	r3, [r7, #15]
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	33dc      	adds	r3, #220	; 0xdc
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4413      	add	r3, r2
 80068a4:	685a      	ldr	r2, [r3, #4]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80068ac:	7bfb      	ldrb	r3, [r7, #15]
 80068ae:	3301      	adds	r3, #1
 80068b0:	73fb      	strb	r3, [r7, #15]
 80068b2:	7bfb      	ldrb	r3, [r7, #15]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d0e4      	beq.n	8006882 <USBH_Process+0x27a>
        }
      }

      if(phost->pActiveClass != NULL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d016      	beq.n	80068f0 <USBH_Process+0x2e8>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	4798      	blx	r3
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d109      	bne.n	80068e8 <USBH_Process+0x2e0>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2206      	movs	r2, #6
 80068d8:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80068e0:	2103      	movs	r1, #3
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	4798      	blx	r3
 80068e6:	e006      	b.n	80068f6 <USBH_Process+0x2ee>
        }
        else
        {
          phost->gState  = HOST_ABORT_STATE;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	220d      	movs	r2, #13
 80068ec:	701a      	strb	r2, [r3, #0]
 80068ee:	e002      	b.n	80068f6 <USBH_Process+0x2ee>
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
        }
      }
      else
      {
        phost->gState  = HOST_ABORT_STATE;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	220d      	movs	r2, #13
 80068f4:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog ("No registered class for this device.");
      }
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2205      	movs	r2, #5
 80068fa:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800690a:	2200      	movs	r2, #0
 800690c:	4619      	mov	r1, r3
 800690e:	f001 fa1f 	bl	8007d50 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006912:	e054      	b.n	80069be <USBH_Process+0x3b6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00f      	beq.n	800693e <USBH_Process+0x336>
    {
      status = phost->pActiveClass->Requests(phost);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	4798      	blx	r3
 800692a:	4603      	mov	r3, r0
 800692c:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 800692e:	7bbb      	ldrb	r3, [r7, #14]
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d13e      	bne.n	80069b4 <USBH_Process+0x3ac>
      {
        phost->gState  = HOST_CLASS;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	220b      	movs	r2, #11
 800693a:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 800693c:	e03a      	b.n	80069b4 <USBH_Process+0x3ac>
      phost->gState  = HOST_ABORT_STATE;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	220d      	movs	r2, #13
 8006942:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2205      	movs	r2, #5
 8006948:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006958:	2200      	movs	r2, #0
 800695a:	4619      	mov	r1, r3
 800695c:	f001 f9f8 	bl	8007d50 <osMessagePut>
    break;
 8006960:	e028      	b.n	80069b4 <USBH_Process+0x3ac>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006968:	2b00      	cmp	r3, #0
 800696a:	d025      	beq.n	80069b8 <USBH_Process+0x3b0>
    {
      phost->pActiveClass->BgndProcess(phost);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	4798      	blx	r3
    }
    break;
 8006978:	e01e      	b.n	80069b8 <USBH_Process+0x3b0>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7ff fd5e 	bl	800643c <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006986:	2b00      	cmp	r3, #0
 8006988:	d018      	beq.n	80069bc <USBH_Process+0x3b4>
    {
      phost->pActiveClass->DeInit(phost);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 800699e:	e00d      	b.n	80069bc <USBH_Process+0x3b4>

  case HOST_ABORT_STATE:
  default :
    break;
 80069a0:	bf00      	nop
 80069a2:	e00c      	b.n	80069be <USBH_Process+0x3b6>
    break;
 80069a4:	bf00      	nop
 80069a6:	e00a      	b.n	80069be <USBH_Process+0x3b6>
    break;
 80069a8:	bf00      	nop
 80069aa:	e008      	b.n	80069be <USBH_Process+0x3b6>
    break;
 80069ac:	bf00      	nop
 80069ae:	e006      	b.n	80069be <USBH_Process+0x3b6>
    break;
 80069b0:	bf00      	nop
 80069b2:	e004      	b.n	80069be <USBH_Process+0x3b6>
    break;
 80069b4:	bf00      	nop
 80069b6:	e002      	b.n	80069be <USBH_Process+0x3b6>
    break;
 80069b8:	bf00      	nop
 80069ba:	e000      	b.n	80069be <USBH_Process+0x3b6>
    break;
 80069bc:	bf00      	nop
  }
 return USBH_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3710      	adds	r7, #16
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b088      	sub	sp, #32
 80069cc:	af04      	add	r7, sp, #16
 80069ce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80069d0:	2301      	movs	r3, #1
 80069d2:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	785b      	ldrb	r3, [r3, #1]
 80069d8:	2b07      	cmp	r3, #7
 80069da:	f200 8132 	bhi.w	8006c42 <USBH_HandleEnum+0x27a>
 80069de:	a201      	add	r2, pc, #4	; (adr r2, 80069e4 <USBH_HandleEnum+0x1c>)
 80069e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e4:	08006a05 	.word	0x08006a05
 80069e8:	08006a77 	.word	0x08006a77
 80069ec:	08006a8f 	.word	0x08006a8f
 80069f0:	08006b05 	.word	0x08006b05
 80069f4:	08006b1d 	.word	0x08006b1d
 80069f8:	08006b3b 	.word	0x08006b3b
 80069fc:	08006ba7 	.word	0x08006ba7
 8006a00:	08006bf7 	.word	0x08006bf7
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8006a04:	2108      	movs	r1, #8
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fa2f 	bl	8006e6a <USBH_Get_DevDesc>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	f040 8119 	bne.w	8006c46 <USBH_HandleEnum+0x27e>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2201      	movs	r2, #1
 8006a22:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	7919      	ldrb	r1, [r3, #4]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006a38:	b292      	uxth	r2, r2
 8006a3a:	9202      	str	r2, [sp, #8]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	9201      	str	r2, [sp, #4]
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	4603      	mov	r3, r0
 8006a44:	2280      	movs	r2, #128	; 0x80
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f001 f83c 	bl	8007ac4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	7959      	ldrb	r1, [r3, #5]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006a60:	b292      	uxth	r2, r2
 8006a62:	9202      	str	r2, [sp, #8]
 8006a64:	2200      	movs	r2, #0
 8006a66:	9201      	str	r2, [sp, #4]
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f001 f828 	bl	8007ac4 <USBH_OpenPipe>

    }
    break;
 8006a74:	e0e7      	b.n	8006c46 <USBH_HandleEnum+0x27e>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8006a76:	2112      	movs	r1, #18
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 f9f6 	bl	8006e6a <USBH_Get_DevDesc>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f040 80e2 	bne.w	8006c4a <USBH_HandleEnum+0x282>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2202      	movs	r2, #2
 8006a8a:	705a      	strb	r2, [r3, #1]

    }
    break;
 8006a8c:	e0dd      	b.n	8006c4a <USBH_HandleEnum+0x282>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8006a8e:	2101      	movs	r1, #1
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 fa96 	bl	8006fc2 <USBH_SetAddress>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f040 80d8 	bne.w	8006c4e <USBH_HandleEnum+0x286>
    {
      USBH_Delay(2U);
 8006a9e:	2002      	movs	r0, #2
 8006aa0:	f004 fe21 	bl	800b6e6 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2203      	movs	r2, #3
 8006ab0:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	7919      	ldrb	r1, [r3, #4]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006ac6:	b292      	uxth	r2, r2
 8006ac8:	9202      	str	r2, [sp, #8]
 8006aca:	2200      	movs	r2, #0
 8006acc:	9201      	str	r2, [sp, #4]
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2280      	movs	r2, #128	; 0x80
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 fff5 	bl	8007ac4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	7959      	ldrb	r1, [r3, #5]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006aee:	b292      	uxth	r2, r2
 8006af0:	9202      	str	r2, [sp, #8]
 8006af2:	2200      	movs	r2, #0
 8006af4:	9201      	str	r2, [sp, #4]
 8006af6:	9300      	str	r3, [sp, #0]
 8006af8:	4603      	mov	r3, r0
 8006afa:	2200      	movs	r2, #0
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 ffe1 	bl	8007ac4 <USBH_OpenPipe>
    }
    break;
 8006b02:	e0a4      	b.n	8006c4e <USBH_HandleEnum+0x286>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8006b04:	2109      	movs	r1, #9
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 f9d7 	bl	8006eba <USBH_Get_CfgDesc>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f040 809f 	bne.w	8006c52 <USBH_HandleEnum+0x28a>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2204      	movs	r2, #4
 8006b18:	705a      	strb	r2, [r3, #1]
    }
    break;
 8006b1a:	e09a      	b.n	8006c52 <USBH_HandleEnum+0x28a>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8006b22:	4619      	mov	r1, r3
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 f9c8 	bl	8006eba <USBH_Get_CfgDesc>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f040 8092 	bne.w	8006c56 <USBH_HandleEnum+0x28e>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2205      	movs	r2, #5
 8006b36:	705a      	strb	r2, [r3, #1]
    }
    break;
 8006b38:	e08d      	b.n	8006c56 <USBH_HandleEnum+0x28e>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d01e      	beq.n	8006b82 <USBH_HandleEnum+0x1ba>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006b50:	23ff      	movs	r3, #255	; 0xff
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f9d5 	bl	8006f02 <USBH_Get_StringDesc>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d17d      	bne.n	8006c5a <USBH_HandleEnum+0x292>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2206      	movs	r2, #6
 8006b62:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2205      	movs	r2, #5
 8006b68:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b78:	2200      	movs	r2, #0
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	f001 f8e8 	bl	8007d50 <osMessagePut>
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006b80:	e06b      	b.n	8006c5a <USBH_HandleEnum+0x292>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2206      	movs	r2, #6
 8006b86:	705a      	strb	r2, [r3, #1]
     phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2205      	movs	r2, #5
 8006b8c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
     (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	f001 f8d6 	bl	8007d50 <osMessagePut>
    break;
 8006ba4:	e059      	b.n	8006c5a <USBH_HandleEnum+0x292>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d010      	beq.n	8006bd2 <USBH_HandleEnum+0x20a>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006bbc:	23ff      	movs	r3, #255	; 0xff
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f99f 	bl	8006f02 <USBH_Get_StringDesc>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d149      	bne.n	8006c5e <USBH_HandleEnum+0x296>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2207      	movs	r2, #7
 8006bce:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006bd0:	e045      	b.n	8006c5e <USBH_HandleEnum+0x296>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2207      	movs	r2, #7
 8006bd6:	705a      	strb	r2, [r3, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2205      	movs	r2, #5
 8006bdc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006bec:	2200      	movs	r2, #0
 8006bee:	4619      	mov	r1, r3
 8006bf0:	f001 f8ae 	bl	8007d50 <osMessagePut>
    break;
 8006bf4:	e033      	b.n	8006c5e <USBH_HandleEnum+0x296>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00f      	beq.n	8006c20 <USBH_HandleEnum+0x258>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006c0c:	23ff      	movs	r3, #255	; 0xff
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f977 	bl	8006f02 <USBH_Get_StringDesc>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d123      	bne.n	8006c62 <USBH_HandleEnum+0x29a>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006c1e:	e020      	b.n	8006c62 <USBH_HandleEnum+0x29a>
      Status = USBH_OK;
 8006c20:	2300      	movs	r3, #0
 8006c22:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2205      	movs	r2, #5
 8006c28:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c38:	2200      	movs	r2, #0
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	f001 f888 	bl	8007d50 <osMessagePut>
    break;
 8006c40:	e00f      	b.n	8006c62 <USBH_HandleEnum+0x29a>

  default:
    break;
 8006c42:	bf00      	nop
 8006c44:	e00e      	b.n	8006c64 <USBH_HandleEnum+0x29c>
    break;
 8006c46:	bf00      	nop
 8006c48:	e00c      	b.n	8006c64 <USBH_HandleEnum+0x29c>
    break;
 8006c4a:	bf00      	nop
 8006c4c:	e00a      	b.n	8006c64 <USBH_HandleEnum+0x29c>
    break;
 8006c4e:	bf00      	nop
 8006c50:	e008      	b.n	8006c64 <USBH_HandleEnum+0x29c>
    break;
 8006c52:	bf00      	nop
 8006c54:	e006      	b.n	8006c64 <USBH_HandleEnum+0x29c>
    break;
 8006c56:	bf00      	nop
 8006c58:	e004      	b.n	8006c64 <USBH_HandleEnum+0x29c>
    break;
 8006c5a:	bf00      	nop
 8006c5c:	e002      	b.n	8006c64 <USBH_HandleEnum+0x29c>
    break;
 8006c5e:	bf00      	nop
 8006c60:	e000      	b.n	8006c64 <USBH_HandleEnum+0x29c>
    break;
 8006c62:	bf00      	nop
  }
  return Status;
 8006c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop

08006c70 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	683a      	ldr	r2, [r7, #0]
 8006c7e:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8006c82:	bf00      	nop
 8006c84:	370c      	adds	r7, #12
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr

08006c8e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b082      	sub	sp, #8
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006c9c:	1c5a      	adds	r2, r3, #1
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 f804 	bl	8006cb2 <USBH_HandleSof>
}
 8006caa:	bf00      	nop
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b082      	sub	sp, #8
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b0b      	cmp	r3, #11
 8006cc2:	d10a      	bne.n	8006cda <USBH_HandleSof+0x28>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d005      	beq.n	8006cda <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	4798      	blx	r3
  }
}
 8006cda:	bf00      	nop
 8006cdc:	3708      	adds	r7, #8
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b083      	sub	sp, #12
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8006cf2:	bf00      	nop
}
 8006cf4:	370c      	adds	r7, #12
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr

08006cfe <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b083      	sub	sp, #12
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8006d0e:	bf00      	nop
}
 8006d10:	370c      	adds	r7, #12
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr

08006d1a <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b083      	sub	sp, #12
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10f      	bne.n	8006d66 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00e      	beq.n	8006d76 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006d5e:	2104      	movs	r1, #4
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	4798      	blx	r3
 8006d64:	e007      	b.n	8006d76 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d102      	bne.n	8006d76 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2202      	movs	r2, #2
 8006d74:	701a      	strb	r2, [r3, #0]
    }
  }

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	f000 ffdf 	bl	8007d50 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3708      	adds	r7, #8
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f004 fb54 	bl	800b452 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	791b      	ldrb	r3, [r3, #4]
 8006dae:	4619      	mov	r1, r3
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 fed4 	bl	8007b5e <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	795b      	ldrb	r3, [r3, #5]
 8006dba:	4619      	mov	r1, r3
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 fece 	bl	8007b5e <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d005      	beq.n	8006de0 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006dda:	2105      	movs	r1, #5
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f004 fb1b 	bl	800b41c <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2203      	movs	r2, #3
 8006dea:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e00:	2200      	movs	r2, #0
 8006e02:	4619      	mov	r1, r3
 8006e04:	f000 ffa4 	bl	8007d50 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b086      	sub	sp, #24
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8d3 13cc 	ldr.w	r1, [r3, #972]	; 0x3cc
 8006e20:	f107 030c 	add.w	r3, r7, #12
 8006e24:	f04f 32ff 	mov.w	r2, #4294967295
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f000 ffd1 	bl	8007dd0 <osMessageGet>
    if(event.status == osEventMessage)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2b10      	cmp	r3, #16
 8006e32:	d1f2      	bne.n	8006e1a <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f7ff fbe7 	bl	8006608 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8006e3a:	e7ee      	b.n	8006e1a <USBH_Process_OS+0x8>

08006e3c <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e58:	2200      	movs	r2, #0
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	f000 ff78 	bl	8007d50 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b086      	sub	sp, #24
 8006e6e:	af02      	add	r7, sp, #8
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	460b      	mov	r3, r1
 8006e74:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8006e7c:	78fb      	ldrb	r3, [r7, #3]
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	9300      	str	r3, [sp, #0]
 8006e82:	4613      	mov	r3, r2
 8006e84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e88:	2100      	movs	r1, #0
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f864 	bl	8006f58 <USBH_GetDescriptor>
 8006e90:	4603      	mov	r3, r0
 8006e92:	73fb      	strb	r3, [r7, #15]
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d10a      	bne.n	8006eb0 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f203 3022 	addw	r0, r3, #802	; 0x322
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006ea6:	78fa      	ldrb	r2, [r7, #3]
 8006ea8:	b292      	uxth	r2, r2
 8006eaa:	4619      	mov	r1, r3
 8006eac:	f000 f918 	bl	80070e0 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8006eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b086      	sub	sp, #24
 8006ebe:	af02      	add	r7, sp, #8
 8006ec0:	6078      	str	r0, [r7, #4]
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	331c      	adds	r3, #28
 8006eca:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8006ecc:	887b      	ldrh	r3, [r7, #2]
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 f83d 	bl	8006f58 <USBH_GetDescriptor>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	72fb      	strb	r3, [r7, #11]
 8006ee2:	7afb      	ldrb	r3, [r7, #11]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d107      	bne.n	8006ef8 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8006eee:	887a      	ldrh	r2, [r7, #2]
 8006ef0:	68f9      	ldr	r1, [r7, #12]
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f000 f964 	bl	80071c0 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8006ef8:	7afb      	ldrb	r3, [r7, #11]
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b088      	sub	sp, #32
 8006f06:	af02      	add	r7, sp, #8
 8006f08:	60f8      	str	r0, [r7, #12]
 8006f0a:	607a      	str	r2, [r7, #4]
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	460b      	mov	r3, r1
 8006f10:	72fb      	strb	r3, [r7, #11]
 8006f12:	4613      	mov	r3, r2
 8006f14:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8006f16:	7afb      	ldrb	r3, [r7, #11]
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006f1e:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8006f26:	893b      	ldrh	r3, [r7, #8]
 8006f28:	9300      	str	r3, [sp, #0]
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	2100      	movs	r1, #0
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f000 f812 	bl	8006f58 <USBH_GetDescriptor>
 8006f34:	4603      	mov	r3, r0
 8006f36:	75fb      	strb	r3, [r7, #23]
 8006f38:	7dfb      	ldrb	r3, [r7, #23]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d107      	bne.n	8006f4e <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006f44:	893a      	ldrh	r2, [r7, #8]
 8006f46:	6879      	ldr	r1, [r7, #4]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f000 fa37 	bl	80073bc <USBH_ParseStringDesc>
  }
  return status;
 8006f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3718      	adds	r7, #24
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	607b      	str	r3, [r7, #4]
 8006f62:	460b      	mov	r3, r1
 8006f64:	72fb      	strb	r3, [r7, #11]
 8006f66:	4613      	mov	r3, r2
 8006f68:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	789b      	ldrb	r3, [r3, #2]
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d11c      	bne.n	8006fac <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006f72:	7afb      	ldrb	r3, [r7, #11]
 8006f74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006f78:	b2da      	uxtb	r2, r3
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2206      	movs	r2, #6
 8006f82:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	893a      	ldrh	r2, [r7, #8]
 8006f88:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006f8a:	893b      	ldrh	r3, [r7, #8]
 8006f8c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006f90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f94:	d104      	bne.n	8006fa0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f240 4209 	movw	r2, #1033	; 0x409
 8006f9c:	829a      	strh	r2, [r3, #20]
 8006f9e:	e002      	b.n	8006fa6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	8b3a      	ldrh	r2, [r7, #24]
 8006faa:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8006fac:	8b3b      	ldrh	r3, [r7, #24]
 8006fae:	461a      	mov	r2, r3
 8006fb0:	6879      	ldr	r1, [r7, #4]
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f000 fa50 	bl	8007458 <USBH_CtlReq>
 8006fb8:	4603      	mov	r3, r0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b082      	sub	sp, #8
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
 8006fca:	460b      	mov	r3, r1
 8006fcc:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	789b      	ldrb	r3, [r3, #2]
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d10f      	bne.n	8006ff6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2205      	movs	r2, #5
 8006fe0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006fe2:	78fb      	ldrb	r3, [r7, #3]
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	2100      	movs	r1, #0
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 fa2c 	bl	8007458 <USBH_CtlReq>
 8007000:	4603      	mov	r3, r0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3708      	adds	r7, #8
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b082      	sub	sp, #8
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
 8007012:	460b      	mov	r3, r1
 8007014:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	789b      	ldrb	r3, [r3, #2]
 800701a:	2b01      	cmp	r3, #1
 800701c:	d10e      	bne.n	800703c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2209      	movs	r2, #9
 8007028:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	887a      	ldrh	r2, [r7, #2]
 800702e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 800703c:	2200      	movs	r2, #0
 800703e:	2100      	movs	r1, #0
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fa09 	bl	8007458 <USBH_CtlReq>
 8007046:	4603      	mov	r3, r0
}
 8007048:	4618      	mov	r0, r3
 800704a:	3708      	adds	r7, #8
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	460b      	mov	r3, r1
 800705a:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	789b      	ldrb	r3, [r3, #2]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d10f      	bne.n	8007084 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2203      	movs	r2, #3
 800706e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007070:	78fb      	ldrb	r3, [r7, #3]
 8007072:	b29a      	uxth	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007084:	2200      	movs	r2, #0
 8007086:	2100      	movs	r1, #0
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 f9e5 	bl	8007458 <USBH_CtlReq>
 800708e:	4603      	mov	r3, r0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3708      	adds	r7, #8
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	460b      	mov	r3, r1
 80070a2:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	789b      	ldrb	r3, [r3, #2]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d10f      	bne.n	80070cc <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2202      	movs	r2, #2
 80070b0:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2201      	movs	r2, #1
 80070b6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80070be:	78fb      	ldrb	r3, [r7, #3]
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 80070cc:	2200      	movs	r2, #0
 80070ce:	2100      	movs	r1, #0
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 f9c1 	bl	8007458 <USBH_CtlReq>
 80070d6:	4603      	mov	r3, r0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	4613      	mov	r3, r2
 80070ec:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	781a      	ldrb	r2, [r3, #0]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	785a      	ldrb	r2, [r3, #1]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	3302      	adds	r3, #2
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	b29a      	uxth	r2, r3
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	3303      	adds	r3, #3
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	b29b      	uxth	r3, r3
 800710e:	021b      	lsls	r3, r3, #8
 8007110:	b29b      	uxth	r3, r3
 8007112:	4313      	orrs	r3, r2
 8007114:	b29a      	uxth	r2, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	791a      	ldrb	r2, [r3, #4]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	795a      	ldrb	r2, [r3, #5]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	799a      	ldrb	r2, [r3, #6]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	79da      	ldrb	r2, [r3, #7]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800713a:	88fb      	ldrh	r3, [r7, #6]
 800713c:	2b08      	cmp	r3, #8
 800713e:	d939      	bls.n	80071b4 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	3308      	adds	r3, #8
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	b29a      	uxth	r2, r3
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	3309      	adds	r3, #9
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	b29b      	uxth	r3, r3
 8007150:	021b      	lsls	r3, r3, #8
 8007152:	b29b      	uxth	r3, r3
 8007154:	4313      	orrs	r3, r2
 8007156:	b29a      	uxth	r2, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	330a      	adds	r3, #10
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	b29a      	uxth	r2, r3
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	330b      	adds	r3, #11
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	b29b      	uxth	r3, r3
 800716c:	021b      	lsls	r3, r3, #8
 800716e:	b29b      	uxth	r3, r3
 8007170:	4313      	orrs	r3, r2
 8007172:	b29a      	uxth	r2, r3
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	330c      	adds	r3, #12
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	b29a      	uxth	r2, r3
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	330d      	adds	r3, #13
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	b29b      	uxth	r3, r3
 8007188:	021b      	lsls	r3, r3, #8
 800718a:	b29b      	uxth	r3, r3
 800718c:	4313      	orrs	r3, r2
 800718e:	b29a      	uxth	r2, r3
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	7b9a      	ldrb	r2, [r3, #14]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	7bda      	ldrb	r2, [r3, #15]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	7c1a      	ldrb	r2, [r3, #16]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	7c5a      	ldrb	r2, [r3, #17]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	745a      	strb	r2, [r3, #17]
  }
}
 80071b4:	bf00      	nop
 80071b6:	3714      	adds	r7, #20
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b08a      	sub	sp, #40	; 0x28
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	4613      	mov	r3, r2
 80071cc:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80071d2:	2300      	movs	r3, #0
 80071d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80071d8:	2300      	movs	r3, #0
 80071da:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	781a      	ldrb	r2, [r3, #0]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	785a      	ldrb	r2, [r3, #1]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	3302      	adds	r3, #2
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	b29a      	uxth	r2, r3
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	3303      	adds	r3, #3
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	b29b      	uxth	r3, r3
 8007202:	021b      	lsls	r3, r3, #8
 8007204:	b29b      	uxth	r3, r3
 8007206:	4313      	orrs	r3, r2
 8007208:	b29a      	uxth	r2, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	791a      	ldrb	r2, [r3, #4]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	795a      	ldrb	r2, [r3, #5]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	799a      	ldrb	r2, [r3, #6]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	79da      	ldrb	r2, [r3, #7]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	7a1a      	ldrb	r2, [r3, #8]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007236:	88fb      	ldrh	r3, [r7, #6]
 8007238:	2b09      	cmp	r3, #9
 800723a:	d95f      	bls.n	80072fc <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800723c:	2309      	movs	r3, #9
 800723e:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007240:	2300      	movs	r3, #0
 8007242:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007244:	e051      	b.n	80072ea <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007246:	f107 0316 	add.w	r3, r7, #22
 800724a:	4619      	mov	r1, r3
 800724c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800724e:	f000 f8e8 	bl	8007422 <USBH_GetNextDesc>
 8007252:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007256:	785b      	ldrb	r3, [r3, #1]
 8007258:	2b04      	cmp	r3, #4
 800725a:	d146      	bne.n	80072ea <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800725c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007260:	221a      	movs	r2, #26
 8007262:	fb02 f303 	mul.w	r3, r2, r3
 8007266:	3308      	adds	r3, #8
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	4413      	add	r3, r2
 800726c:	3302      	adds	r3, #2
 800726e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8007270:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007272:	69f8      	ldr	r0, [r7, #28]
 8007274:	f000 f846 	bl	8007304 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007278:	2300      	movs	r3, #0
 800727a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800727e:	2300      	movs	r3, #0
 8007280:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007282:	e022      	b.n	80072ca <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8007284:	f107 0316 	add.w	r3, r7, #22
 8007288:	4619      	mov	r1, r3
 800728a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800728c:	f000 f8c9 	bl	8007422 <USBH_GetNextDesc>
 8007290:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007294:	785b      	ldrb	r3, [r3, #1]
 8007296:	2b05      	cmp	r3, #5
 8007298:	d117      	bne.n	80072ca <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800729a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800729e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80072a2:	3201      	adds	r2, #1
 80072a4:	00d2      	lsls	r2, r2, #3
 80072a6:	211a      	movs	r1, #26
 80072a8:	fb01 f303 	mul.w	r3, r1, r3
 80072ac:	4413      	add	r3, r2
 80072ae:	3308      	adds	r3, #8
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	4413      	add	r3, r2
 80072b4:	3304      	adds	r3, #4
 80072b6:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 80072b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072ba:	69b8      	ldr	r0, [r7, #24]
 80072bc:	f000 f851 	bl	8007362 <USBH_ParseEPDesc>
            ep_ix++;
 80072c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80072c4:	3301      	adds	r3, #1
 80072c6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	791b      	ldrb	r3, [r3, #4]
 80072ce:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d204      	bcs.n	80072e0 <USBH_ParseCfgDesc+0x120>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	885a      	ldrh	r2, [r3, #2]
 80072da:	8afb      	ldrh	r3, [r7, #22]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d8d1      	bhi.n	8007284 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80072e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80072e4:	3301      	adds	r3, #1
 80072e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80072ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d804      	bhi.n	80072fc <USBH_ParseCfgDesc+0x13c>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	885a      	ldrh	r2, [r3, #2]
 80072f6:	8afb      	ldrh	r3, [r7, #22]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d8a4      	bhi.n	8007246 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80072fc:	bf00      	nop
 80072fe:	3728      	adds	r7, #40	; 0x28
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	781a      	ldrb	r2, [r3, #0]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	785a      	ldrb	r2, [r3, #1]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	789a      	ldrb	r2, [r3, #2]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	78da      	ldrb	r2, [r3, #3]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	791a      	ldrb	r2, [r3, #4]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	795a      	ldrb	r2, [r3, #5]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	799a      	ldrb	r2, [r3, #6]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	79da      	ldrb	r2, [r3, #7]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	7a1a      	ldrb	r2, [r3, #8]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	721a      	strb	r2, [r3, #8]
}
 8007356:	bf00      	nop
 8007358:	370c      	adds	r7, #12
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr

08007362 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8007362:	b480      	push	{r7}
 8007364:	b083      	sub	sp, #12
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
 800736a:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	781a      	ldrb	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	785a      	ldrb	r2, [r3, #1]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	789a      	ldrb	r2, [r3, #2]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	78da      	ldrb	r2, [r3, #3]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	3304      	adds	r3, #4
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	b29a      	uxth	r2, r3
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	3305      	adds	r3, #5
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	b29b      	uxth	r3, r3
 800739c:	021b      	lsls	r3, r3, #8
 800739e:	b29b      	uxth	r3, r3
 80073a0:	4313      	orrs	r3, r2
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	799a      	ldrb	r2, [r3, #6]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	719a      	strb	r2, [r3, #6]
}
 80073b0:	bf00      	nop
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 80073bc:	b480      	push	{r7}
 80073be:	b087      	sub	sp, #28
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	4613      	mov	r3, r2
 80073c8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	3301      	adds	r3, #1
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	2b03      	cmp	r3, #3
 80073d2:	d120      	bne.n	8007416 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	1e9a      	subs	r2, r3, #2
 80073da:	88fb      	ldrh	r3, [r7, #6]
 80073dc:	4293      	cmp	r3, r2
 80073de:	bf28      	it	cs
 80073e0:	4613      	movcs	r3, r2
 80073e2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	3302      	adds	r3, #2
 80073e8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80073ea:	2300      	movs	r3, #0
 80073ec:	82fb      	strh	r3, [r7, #22]
 80073ee:	e00b      	b.n	8007408 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80073f0:	8afb      	ldrh	r3, [r7, #22]
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	4413      	add	r3, r2
 80073f6:	781a      	ldrb	r2, [r3, #0]
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	701a      	strb	r2, [r3, #0]
      pdest++;
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	3301      	adds	r3, #1
 8007400:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007402:	8afb      	ldrh	r3, [r7, #22]
 8007404:	3302      	adds	r3, #2
 8007406:	82fb      	strh	r3, [r7, #22]
 8007408:	8afa      	ldrh	r2, [r7, #22]
 800740a:	8abb      	ldrh	r3, [r7, #20]
 800740c:	429a      	cmp	r2, r3
 800740e:	d3ef      	bcc.n	80073f0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	2200      	movs	r2, #0
 8007414:	701a      	strb	r2, [r3, #0]
  }
}
 8007416:	bf00      	nop
 8007418:	371c      	adds	r7, #28
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr

08007422 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8007422:	b480      	push	{r7}
 8007424:	b085      	sub	sp, #20
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
 800742a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	881a      	ldrh	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	b29b      	uxth	r3, r3
 8007436:	4413      	add	r3, r2
 8007438:	b29a      	uxth	r2, r3
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4413      	add	r3, r2
 8007448:	60fb      	str	r3, [r7, #12]

  return(pnext);
 800744a:	68fb      	ldr	r3, [r7, #12]
}
 800744c:	4618      	mov	r0, r3
 800744e:	3714      	adds	r7, #20
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b086      	sub	sp, #24
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	4613      	mov	r3, r2
 8007464:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007466:	2301      	movs	r3, #1
 8007468:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	789b      	ldrb	r3, [r3, #2]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d002      	beq.n	8007478 <USBH_CtlReq+0x20>
 8007472:	2b02      	cmp	r3, #2
 8007474:	d01d      	beq.n	80074b2 <USBH_CtlReq+0x5a>
      }
    }
    break;

  default:
    break;
 8007476:	e042      	b.n	80074fe <USBH_CtlReq+0xa6>
    phost->Control.buff = buff;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	68ba      	ldr	r2, [r7, #8]
 800747c:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	88fa      	ldrh	r2, [r7, #6]
 8007482:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2201      	movs	r2, #1
 8007488:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2202      	movs	r2, #2
 800748e:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8007490:	2301      	movs	r3, #1
 8007492:	75fb      	strb	r3, [r7, #23]
    phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2203      	movs	r2, #3
 8007498:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074a8:	2200      	movs	r2, #0
 80074aa:	4619      	mov	r1, r3
 80074ac:	f000 fc50 	bl	8007d50 <osMessagePut>
    break;
 80074b0:	e025      	b.n	80074fe <USBH_CtlReq+0xa6>
    status = USBH_HandleControl(phost);
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f000 f828 	bl	8007508 <USBH_HandleControl>
 80074b8:	4603      	mov	r3, r0
 80074ba:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 80074bc:	7dfb      	ldrb	r3, [r7, #23]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d108      	bne.n	80074d4 <USBH_CtlReq+0x7c>
      phost->RequestState = CMD_SEND;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2201      	movs	r2, #1
 80074c6:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 80074ce:	2300      	movs	r3, #0
 80074d0:	75fb      	strb	r3, [r7, #23]
    break;
 80074d2:	e013      	b.n	80074fc <USBH_CtlReq+0xa4>
    else if (status == USBH_NOT_SUPPORTED)
 80074d4:	7dfb      	ldrb	r3, [r7, #23]
 80074d6:	2b03      	cmp	r3, #3
 80074d8:	d108      	bne.n	80074ec <USBH_CtlReq+0x94>
      phost->RequestState = CMD_SEND;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2201      	movs	r2, #1
 80074de:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 80074e6:	2303      	movs	r3, #3
 80074e8:	75fb      	strb	r3, [r7, #23]
    break;
 80074ea:	e007      	b.n	80074fc <USBH_CtlReq+0xa4>
      if (status == USBH_FAIL)
 80074ec:	7dfb      	ldrb	r3, [r7, #23]
 80074ee:	2b02      	cmp	r3, #2
 80074f0:	d104      	bne.n	80074fc <USBH_CtlReq+0xa4>
        phost->RequestState = CMD_SEND;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2201      	movs	r2, #1
 80074f6:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 80074f8:	2302      	movs	r3, #2
 80074fa:	75fb      	strb	r3, [r7, #23]
    break;
 80074fc:	bf00      	nop
  }
  return status;
 80074fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007500:	4618      	mov	r0, r3
 8007502:	3718      	adds	r7, #24
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af02      	add	r7, sp, #8
 800750e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007510:	2301      	movs	r3, #1
 8007512:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007514:	2300      	movs	r3, #0
 8007516:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	7e1b      	ldrb	r3, [r3, #24]
 800751c:	3b01      	subs	r3, #1
 800751e:	2b0a      	cmp	r3, #10
 8007520:	f200 821f 	bhi.w	8007962 <USBH_HandleControl+0x45a>
 8007524:	a201      	add	r2, pc, #4	; (adr r2, 800752c <USBH_HandleControl+0x24>)
 8007526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752a:	bf00      	nop
 800752c:	08007559 	.word	0x08007559
 8007530:	08007573 	.word	0x08007573
 8007534:	08007615 	.word	0x08007615
 8007538:	0800763b 	.word	0x0800763b
 800753c:	080076c7 	.word	0x080076c7
 8007540:	080076f3 	.word	0x080076f3
 8007544:	080077b5 	.word	0x080077b5
 8007548:	080077d7 	.word	0x080077d7
 800754c:	08007869 	.word	0x08007869
 8007550:	08007891 	.word	0x08007891
 8007554:	08007923 	.word	0x08007923
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f103 0110 	add.w	r1, r3, #16
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	795b      	ldrb	r3, [r3, #5]
 8007562:	461a      	mov	r2, r3
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fa0d 	bl	8007984 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2202      	movs	r2, #2
 800756e:	761a      	strb	r2, [r3, #24]
    break;
 8007570:	e202      	b.n	8007978 <USBH_HandleControl+0x470>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	795b      	ldrb	r3, [r3, #5]
 8007576:	4619      	mov	r1, r3
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f004 f857 	bl	800b62c <USBH_LL_GetURBState>
 800757e:	4603      	mov	r3, r0
 8007580:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8007582:	7bbb      	ldrb	r3, [r7, #14]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d12c      	bne.n	80075e2 <USBH_HandleControl+0xda>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	7c1b      	ldrb	r3, [r3, #16]
 800758c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007590:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	8adb      	ldrh	r3, [r3, #22]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00a      	beq.n	80075b0 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 800759a:	7b7b      	ldrb	r3, [r7, #13]
 800759c:	2b80      	cmp	r3, #128	; 0x80
 800759e:	d103      	bne.n	80075a8 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2203      	movs	r2, #3
 80075a4:	761a      	strb	r2, [r3, #24]
 80075a6:	e00d      	b.n	80075c4 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2205      	movs	r2, #5
 80075ac:	761a      	strb	r2, [r3, #24]
 80075ae:	e009      	b.n	80075c4 <USBH_HandleControl+0xbc>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 80075b0:	7b7b      	ldrb	r3, [r7, #13]
 80075b2:	2b80      	cmp	r3, #128	; 0x80
 80075b4:	d103      	bne.n	80075be <USBH_HandleControl+0xb6>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2209      	movs	r2, #9
 80075ba:	761a      	strb	r2, [r3, #24]
 80075bc:	e002      	b.n	80075c4 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2207      	movs	r2, #7
 80075c2:	761a      	strb	r2, [r3, #24]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2203      	movs	r2, #3
 80075c8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075d8:	2200      	movs	r2, #0
 80075da:	4619      	mov	r1, r3
 80075dc:	f000 fbb8 	bl	8007d50 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80075e0:	e1c1      	b.n	8007966 <USBH_HandleControl+0x45e>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80075e2:	7bbb      	ldrb	r3, [r7, #14]
 80075e4:	2b04      	cmp	r3, #4
 80075e6:	d003      	beq.n	80075f0 <USBH_HandleControl+0xe8>
 80075e8:	7bbb      	ldrb	r3, [r7, #14]
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	f040 81bb 	bne.w	8007966 <USBH_HandleControl+0x45e>
        phost->Control.state = CTRL_ERROR;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	220b      	movs	r2, #11
 80075f4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2203      	movs	r2, #3
 80075fa:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800760a:	2200      	movs	r2, #0
 800760c:	4619      	mov	r1, r3
 800760e:	f000 fb9f 	bl	8007d50 <osMessagePut>
    break;
 8007612:	e1a8      	b.n	8007966 <USBH_HandleControl+0x45e>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800761a:	b29a      	uxth	r2, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6899      	ldr	r1, [r3, #8]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	899a      	ldrh	r2, [r3, #12]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	791b      	ldrb	r3, [r3, #4]
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 f9e8 	bl	8007a02 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2204      	movs	r2, #4
 8007636:	761a      	strb	r2, [r3, #24]
    break;
 8007638:	e19e      	b.n	8007978 <USBH_HandleControl+0x470>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	791b      	ldrb	r3, [r3, #4]
 800763e:	4619      	mov	r1, r3
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f003 fff3 	bl	800b62c <USBH_LL_GetURBState>
 8007646:	4603      	mov	r3, r0
 8007648:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800764a:	7bbb      	ldrb	r3, [r7, #14]
 800764c:	2b01      	cmp	r3, #1
 800764e:	d110      	bne.n	8007672 <USBH_HandleControl+0x16a>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2209      	movs	r2, #9
 8007654:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2203      	movs	r2, #3
 800765a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800766a:	2200      	movs	r2, #0
 800766c:	4619      	mov	r1, r3
 800766e:	f000 fb6f 	bl	8007d50 <osMessagePut>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8007672:	7bbb      	ldrb	r3, [r7, #14]
 8007674:	2b05      	cmp	r3, #5
 8007676:	d110      	bne.n	800769a <USBH_HandleControl+0x192>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8007678:	2303      	movs	r3, #3
 800767a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2203      	movs	r2, #3
 8007680:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007690:	2200      	movs	r2, #0
 8007692:	4619      	mov	r1, r3
 8007694:	f000 fb5c 	bl	8007d50 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007698:	e167      	b.n	800796a <USBH_HandleControl+0x462>
      if (URB_Status == USBH_URB_ERROR)
 800769a:	7bbb      	ldrb	r3, [r7, #14]
 800769c:	2b04      	cmp	r3, #4
 800769e:	f040 8164 	bne.w	800796a <USBH_HandleControl+0x462>
        phost->Control.state = CTRL_ERROR;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	220b      	movs	r2, #11
 80076a6:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2203      	movs	r2, #3
 80076ac:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076bc:	2200      	movs	r2, #0
 80076be:	4619      	mov	r1, r3
 80076c0:	f000 fb46 	bl	8007d50 <osMessagePut>
    break;
 80076c4:	e151      	b.n	800796a <USBH_HandleControl+0x462>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6899      	ldr	r1, [r3, #8]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	899a      	ldrh	r2, [r3, #12]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	7958      	ldrb	r0, [r3, #5]
 80076d2:	2301      	movs	r3, #1
 80076d4:	9300      	str	r3, [sp, #0]
 80076d6:	4603      	mov	r3, r0
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 f96d 	bl	80079b8 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2206      	movs	r2, #6
 80076ee:	761a      	strb	r2, [r3, #24]
    break;
 80076f0:	e142      	b.n	8007978 <USBH_HandleControl+0x470>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	795b      	ldrb	r3, [r3, #5]
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f003 ff97 	bl	800b62c <USBH_LL_GetURBState>
 80076fe:	4603      	mov	r3, r0
 8007700:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8007702:	7bbb      	ldrb	r3, [r7, #14]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d111      	bne.n	800772c <USBH_HandleControl+0x224>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2207      	movs	r2, #7
 800770c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2203      	movs	r2, #3
 8007712:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007722:	2200      	movs	r2, #0
 8007724:	4619      	mov	r1, r3
 8007726:	f000 fb13 	bl	8007d50 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800772a:	e120      	b.n	800796e <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_STALL)
 800772c:	7bbb      	ldrb	r3, [r7, #14]
 800772e:	2b05      	cmp	r3, #5
 8007730:	d113      	bne.n	800775a <USBH_HandleControl+0x252>
      phost->Control.state = CTRL_STALLED;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	220c      	movs	r2, #12
 8007736:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007738:	2303      	movs	r3, #3
 800773a:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2203      	movs	r2, #3
 8007740:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007750:	2200      	movs	r2, #0
 8007752:	4619      	mov	r1, r3
 8007754:	f000 fafc 	bl	8007d50 <osMessagePut>
    break;
 8007758:	e109      	b.n	800796e <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800775a:	7bbb      	ldrb	r3, [r7, #14]
 800775c:	2b02      	cmp	r3, #2
 800775e:	d111      	bne.n	8007784 <USBH_HandleControl+0x27c>
      phost->Control.state = CTRL_DATA_OUT;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2205      	movs	r2, #5
 8007764:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2203      	movs	r2, #3
 800776a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800777a:	2200      	movs	r2, #0
 800777c:	4619      	mov	r1, r3
 800777e:	f000 fae7 	bl	8007d50 <osMessagePut>
    break;
 8007782:	e0f4      	b.n	800796e <USBH_HandleControl+0x466>
      if (URB_Status == USBH_URB_ERROR)
 8007784:	7bbb      	ldrb	r3, [r7, #14]
 8007786:	2b04      	cmp	r3, #4
 8007788:	f040 80f1 	bne.w	800796e <USBH_HandleControl+0x466>
        phost->Control.state = CTRL_ERROR;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	220b      	movs	r2, #11
 8007790:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8007792:	2302      	movs	r3, #2
 8007794:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2203      	movs	r2, #3
 800779a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077aa:	2200      	movs	r2, #0
 80077ac:	4619      	mov	r1, r3
 80077ae:	f000 facf 	bl	8007d50 <osMessagePut>
    break;
 80077b2:	e0dc      	b.n	800796e <USBH_HandleControl+0x466>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	791b      	ldrb	r3, [r3, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	2100      	movs	r1, #0
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 f920 	bl	8007a02 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2208      	movs	r2, #8
 80077d2:	761a      	strb	r2, [r3, #24]

    break;
 80077d4:	e0d0      	b.n	8007978 <USBH_HandleControl+0x470>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	791b      	ldrb	r3, [r3, #4]
 80077da:	4619      	mov	r1, r3
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f003 ff25 	bl	800b62c <USBH_LL_GetURBState>
 80077e2:	4603      	mov	r3, r0
 80077e4:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 80077e6:	7bbb      	ldrb	r3, [r7, #14]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d113      	bne.n	8007814 <USBH_HandleControl+0x30c>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	220d      	movs	r2, #13
 80077f0:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 80077f2:	2300      	movs	r3, #0
 80077f4:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2203      	movs	r2, #3
 80077fa:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800780a:	2200      	movs	r2, #0
 800780c:	4619      	mov	r1, r3
 800780e:	f000 fa9f 	bl	8007d50 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007812:	e0ae      	b.n	8007972 <USBH_HandleControl+0x46a>
    else if (URB_Status == USBH_URB_ERROR)
 8007814:	7bbb      	ldrb	r3, [r7, #14]
 8007816:	2b04      	cmp	r3, #4
 8007818:	d111      	bne.n	800783e <USBH_HandleControl+0x336>
      phost->Control.state = CTRL_ERROR;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	220b      	movs	r2, #11
 800781e:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2203      	movs	r2, #3
 8007824:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007834:	2200      	movs	r2, #0
 8007836:	4619      	mov	r1, r3
 8007838:	f000 fa8a 	bl	8007d50 <osMessagePut>
    break;
 800783c:	e099      	b.n	8007972 <USBH_HandleControl+0x46a>
      if(URB_Status == USBH_URB_STALL)
 800783e:	7bbb      	ldrb	r3, [r7, #14]
 8007840:	2b05      	cmp	r3, #5
 8007842:	f040 8096 	bne.w	8007972 <USBH_HandleControl+0x46a>
        status = USBH_NOT_SUPPORTED;
 8007846:	2303      	movs	r3, #3
 8007848:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2203      	movs	r2, #3
 800784e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800785e:	2200      	movs	r2, #0
 8007860:	4619      	mov	r1, r3
 8007862:	f000 fa75 	bl	8007d50 <osMessagePut>
    break;
 8007866:	e084      	b.n	8007972 <USBH_HandleControl+0x46a>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	795a      	ldrb	r2, [r3, #5]
 800786c:	2301      	movs	r3, #1
 800786e:	9300      	str	r3, [sp, #0]
 8007870:	4613      	mov	r3, r2
 8007872:	2200      	movs	r2, #0
 8007874:	2100      	movs	r1, #0
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 f89e 	bl	80079b8 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007882:	b29a      	uxth	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	220a      	movs	r2, #10
 800788c:	761a      	strb	r2, [r3, #24]
    break;
 800788e:	e073      	b.n	8007978 <USBH_HandleControl+0x470>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	795b      	ldrb	r3, [r3, #5]
 8007894:	4619      	mov	r1, r3
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f003 fec8 	bl	800b62c <USBH_LL_GetURBState>
 800789c:	4603      	mov	r3, r0
 800789e:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 80078a0:	7bbb      	ldrb	r3, [r7, #14]
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d113      	bne.n	80078ce <USBH_HandleControl+0x3c6>
    {
      status = USBH_OK;
 80078a6:	2300      	movs	r3, #0
 80078a8:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	220d      	movs	r2, #13
 80078ae:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2203      	movs	r2, #3
 80078b4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80078c4:	2200      	movs	r2, #0
 80078c6:	4619      	mov	r1, r3
 80078c8:	f000 fa42 	bl	8007d50 <osMessagePut>
#endif
#endif
      }

    }
    break;
 80078cc:	e053      	b.n	8007976 <USBH_HandleControl+0x46e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80078ce:	7bbb      	ldrb	r3, [r7, #14]
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	d111      	bne.n	80078f8 <USBH_HandleControl+0x3f0>
      phost->Control.state = CTRL_STATUS_OUT;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2209      	movs	r2, #9
 80078d8:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2203      	movs	r2, #3
 80078de:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80078ee:	2200      	movs	r2, #0
 80078f0:	4619      	mov	r1, r3
 80078f2:	f000 fa2d 	bl	8007d50 <osMessagePut>
    break;
 80078f6:	e03e      	b.n	8007976 <USBH_HandleControl+0x46e>
      if (URB_Status == USBH_URB_ERROR)
 80078f8:	7bbb      	ldrb	r3, [r7, #14]
 80078fa:	2b04      	cmp	r3, #4
 80078fc:	d13b      	bne.n	8007976 <USBH_HandleControl+0x46e>
        phost->Control.state = CTRL_ERROR;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	220b      	movs	r2, #11
 8007902:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2203      	movs	r2, #3
 8007908:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007918:	2200      	movs	r2, #0
 800791a:	4619      	mov	r1, r3
 800791c:	f000 fa18 	bl	8007d50 <osMessagePut>
    break;
 8007920:	e029      	b.n	8007976 <USBH_HandleControl+0x46e>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	7e5b      	ldrb	r3, [r3, #25]
 8007926:	3301      	adds	r3, #1
 8007928:	b2da      	uxtb	r2, r3
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	765a      	strb	r2, [r3, #25]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	7e5b      	ldrb	r3, [r3, #25]
 8007932:	2b02      	cmp	r3, #2
 8007934:	d809      	bhi.n	800794a <USBH_HandleControl+0x442>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f003 fd8b 	bl	800b452 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2201      	movs	r2, #1
 8007946:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8007948:	e016      	b.n	8007978 <USBH_HandleControl+0x470>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007950:	2106      	movs	r1, #6
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 800795c:	2302      	movs	r3, #2
 800795e:	73fb      	strb	r3, [r7, #15]
    break;
 8007960:	e00a      	b.n	8007978 <USBH_HandleControl+0x470>

  default:
    break;
 8007962:	bf00      	nop
 8007964:	e008      	b.n	8007978 <USBH_HandleControl+0x470>
    break;
 8007966:	bf00      	nop
 8007968:	e006      	b.n	8007978 <USBH_HandleControl+0x470>
    break;
 800796a:	bf00      	nop
 800796c:	e004      	b.n	8007978 <USBH_HandleControl+0x470>
    break;
 800796e:	bf00      	nop
 8007970:	e002      	b.n	8007978 <USBH_HandleControl+0x470>
    break;
 8007972:	bf00      	nop
 8007974:	e000      	b.n	8007978 <USBH_HandleControl+0x470>
    break;
 8007976:	bf00      	nop
  }
  return status;
 8007978:	7bfb      	ldrb	r3, [r7, #15]
}
 800797a:	4618      	mov	r0, r3
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop

08007984 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b088      	sub	sp, #32
 8007988:	af04      	add	r7, sp, #16
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	4613      	mov	r3, r2
 8007990:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007992:	79f9      	ldrb	r1, [r7, #7]
 8007994:	2300      	movs	r3, #0
 8007996:	9303      	str	r3, [sp, #12]
 8007998:	2308      	movs	r3, #8
 800799a:	9302      	str	r3, [sp, #8]
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	9301      	str	r3, [sp, #4]
 80079a0:	2300      	movs	r3, #0
 80079a2:	9300      	str	r3, [sp, #0]
 80079a4:	2300      	movs	r3, #0
 80079a6:	2200      	movs	r2, #0
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f003 fe0e 	bl	800b5ca <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3710      	adds	r7, #16
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b088      	sub	sp, #32
 80079bc:	af04      	add	r7, sp, #16
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	4611      	mov	r1, r2
 80079c4:	461a      	mov	r2, r3
 80079c6:	460b      	mov	r3, r1
 80079c8:	80fb      	strh	r3, [r7, #6]
 80079ca:	4613      	mov	r3, r2
 80079cc:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d001      	beq.n	80079dc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80079d8:	2300      	movs	r3, #0
 80079da:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80079dc:	7979      	ldrb	r1, [r7, #5]
 80079de:	7e3b      	ldrb	r3, [r7, #24]
 80079e0:	9303      	str	r3, [sp, #12]
 80079e2:	88fb      	ldrh	r3, [r7, #6]
 80079e4:	9302      	str	r3, [sp, #8]
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	9301      	str	r3, [sp, #4]
 80079ea:	2301      	movs	r3, #1
 80079ec:	9300      	str	r3, [sp, #0]
 80079ee:	2300      	movs	r3, #0
 80079f0:	2200      	movs	r2, #0
 80079f2:	68f8      	ldr	r0, [r7, #12]
 80079f4:	f003 fde9 	bl	800b5ca <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b088      	sub	sp, #32
 8007a06:	af04      	add	r7, sp, #16
 8007a08:	60f8      	str	r0, [r7, #12]
 8007a0a:	60b9      	str	r1, [r7, #8]
 8007a0c:	4611      	mov	r1, r2
 8007a0e:	461a      	mov	r2, r3
 8007a10:	460b      	mov	r3, r1
 8007a12:	80fb      	strh	r3, [r7, #6]
 8007a14:	4613      	mov	r3, r2
 8007a16:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007a18:	7979      	ldrb	r1, [r7, #5]
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	9303      	str	r3, [sp, #12]
 8007a1e:	88fb      	ldrh	r3, [r7, #6]
 8007a20:	9302      	str	r3, [sp, #8]
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	9301      	str	r3, [sp, #4]
 8007a26:	2301      	movs	r3, #1
 8007a28:	9300      	str	r3, [sp, #0]
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f003 fdcb 	bl	800b5ca <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007a34:	2300      	movs	r3, #0

}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b088      	sub	sp, #32
 8007a42:	af04      	add	r7, sp, #16
 8007a44:	60f8      	str	r0, [r7, #12]
 8007a46:	60b9      	str	r1, [r7, #8]
 8007a48:	4611      	mov	r1, r2
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	80fb      	strh	r3, [r7, #6]
 8007a50:	4613      	mov	r3, r2
 8007a52:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d001      	beq.n	8007a62 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007a62:	7979      	ldrb	r1, [r7, #5]
 8007a64:	7e3b      	ldrb	r3, [r7, #24]
 8007a66:	9303      	str	r3, [sp, #12]
 8007a68:	88fb      	ldrh	r3, [r7, #6]
 8007a6a:	9302      	str	r3, [sp, #8]
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	9301      	str	r3, [sp, #4]
 8007a70:	2301      	movs	r3, #1
 8007a72:	9300      	str	r3, [sp, #0]
 8007a74:	2302      	movs	r3, #2
 8007a76:	2200      	movs	r2, #0
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f003 fda6 	bl	800b5ca <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3710      	adds	r7, #16
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b088      	sub	sp, #32
 8007a8c:	af04      	add	r7, sp, #16
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	4611      	mov	r1, r2
 8007a94:	461a      	mov	r2, r3
 8007a96:	460b      	mov	r3, r1
 8007a98:	80fb      	strh	r3, [r7, #6]
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007a9e:	7979      	ldrb	r1, [r7, #5]
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	9303      	str	r3, [sp, #12]
 8007aa4:	88fb      	ldrh	r3, [r7, #6]
 8007aa6:	9302      	str	r3, [sp, #8]
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	9301      	str	r3, [sp, #4]
 8007aac:	2301      	movs	r3, #1
 8007aae:	9300      	str	r3, [sp, #0]
 8007ab0:	2302      	movs	r3, #2
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	68f8      	ldr	r0, [r7, #12]
 8007ab6:	f003 fd88 	bl	800b5ca <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b086      	sub	sp, #24
 8007ac8:	af04      	add	r7, sp, #16
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	4608      	mov	r0, r1
 8007ace:	4611      	mov	r1, r2
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	70fb      	strb	r3, [r7, #3]
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	70bb      	strb	r3, [r7, #2]
 8007ada:	4613      	mov	r3, r2
 8007adc:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8007ade:	7878      	ldrb	r0, [r7, #1]
 8007ae0:	78ba      	ldrb	r2, [r7, #2]
 8007ae2:	78f9      	ldrb	r1, [r7, #3]
 8007ae4:	8b3b      	ldrh	r3, [r7, #24]
 8007ae6:	9302      	str	r3, [sp, #8]
 8007ae8:	7d3b      	ldrb	r3, [r7, #20]
 8007aea:	9301      	str	r3, [sp, #4]
 8007aec:	7c3b      	ldrb	r3, [r7, #16]
 8007aee:	9300      	str	r3, [sp, #0]
 8007af0:	4603      	mov	r3, r0
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f003 fd1b 	bl	800b52e <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8007af8:	2300      	movs	r3, #0

}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3708      	adds	r7, #8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b082      	sub	sp, #8
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8007b0e:	78fb      	ldrb	r3, [r7, #3]
 8007b10:	4619      	mov	r1, r3
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f003 fd3a 	bl	800b58c <USBH_LL_ClosePipe>

  return USBH_OK;
 8007b18:	2300      	movs	r3, #0

}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b084      	sub	sp, #16
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f831 	bl	8007b96 <USBH_GetFreePipe>
 8007b34:	4603      	mov	r3, r0
 8007b36:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007b38:	89fb      	ldrh	r3, [r7, #14]
 8007b3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d007      	beq.n	8007b52 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8007b42:	78fb      	ldrb	r3, [r7, #3]
 8007b44:	89fa      	ldrh	r2, [r7, #14]
 8007b46:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	32e0      	adds	r2, #224	; 0xe0
 8007b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8007b52:	89fb      	ldrh	r3, [r7, #14]
 8007b54:	b2db      	uxtb	r3, r3
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3710      	adds	r7, #16
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007b5e:	b480      	push	{r7}
 8007b60:	b083      	sub	sp, #12
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
 8007b66:	460b      	mov	r3, r1
 8007b68:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8007b6a:	78fb      	ldrb	r3, [r7, #3]
 8007b6c:	2b0a      	cmp	r3, #10
 8007b6e:	d80b      	bhi.n	8007b88 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8007b70:	78fa      	ldrb	r2, [r7, #3]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	32e0      	adds	r2, #224	; 0xe0
 8007b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b7a:	78fa      	ldrb	r2, [r7, #3]
 8007b7c:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	32e0      	adds	r2, #224	; 0xe0
 8007b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	370c      	adds	r7, #12
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr

08007b96 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8007b96:	b480      	push	{r7}
 8007b98:	b085      	sub	sp, #20
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	73fb      	strb	r3, [r7, #15]
 8007ba6:	e00e      	b.n	8007bc6 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007ba8:	7bfa      	ldrb	r2, [r7, #15]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	32e0      	adds	r2, #224	; 0xe0
 8007bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d102      	bne.n	8007bc0 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8007bba:	7bfb      	ldrb	r3, [r7, #15]
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	e007      	b.n	8007bd0 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8007bc0:	7bfb      	ldrb	r3, [r7, #15]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	73fb      	strb	r3, [r7, #15]
 8007bc6:	7bfb      	ldrb	r3, [r7, #15]
 8007bc8:	2b0a      	cmp	r3, #10
 8007bca:	d9ed      	bls.n	8007ba8 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8007bcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3714      	adds	r7, #20
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	4603      	mov	r3, r0
 8007be4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007be6:	2300      	movs	r3, #0
 8007be8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007bea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007bee:	2b84      	cmp	r3, #132	; 0x84
 8007bf0:	d005      	beq.n	8007bfe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007bf2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	3303      	adds	r3, #3
 8007bfc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3714      	adds	r7, #20
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c12:	f3ef 8305 	mrs	r3, IPSR
 8007c16:	607b      	str	r3, [r7, #4]
  return(result);
 8007c18:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	bf14      	ite	ne
 8007c1e:	2301      	movne	r3, #1
 8007c20:	2300      	moveq	r3, #0
 8007c22:	b2db      	uxtb	r3, r3
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007c34:	f001 f8e6 	bl	8008e04 <vTaskStartScheduler>
  
  return osOK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007c3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c40:	b089      	sub	sp, #36	; 0x24
 8007c42:	af04      	add	r7, sp, #16
 8007c44:	6078      	str	r0, [r7, #4]
 8007c46:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	695b      	ldr	r3, [r3, #20]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d020      	beq.n	8007c92 <osThreadCreate+0x54>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d01c      	beq.n	8007c92 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	685c      	ldr	r4, [r3, #4]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681d      	ldr	r5, [r3, #0]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	691e      	ldr	r6, [r3, #16]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7ff ffb6 	bl	8007bdc <makeFreeRtosPriority>
 8007c70:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	695b      	ldr	r3, [r3, #20]
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c7a:	9202      	str	r2, [sp, #8]
 8007c7c:	9301      	str	r3, [sp, #4]
 8007c7e:	9100      	str	r1, [sp, #0]
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	4632      	mov	r2, r6
 8007c84:	4629      	mov	r1, r5
 8007c86:	4620      	mov	r0, r4
 8007c88:	f000 fef7 	bl	8008a7a <xTaskCreateStatic>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	60fb      	str	r3, [r7, #12]
 8007c90:	e01c      	b.n	8007ccc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	685c      	ldr	r4, [r3, #4]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c9e:	b29e      	uxth	r6, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7ff ff98 	bl	8007bdc <makeFreeRtosPriority>
 8007cac:	4602      	mov	r2, r0
 8007cae:	f107 030c 	add.w	r3, r7, #12
 8007cb2:	9301      	str	r3, [sp, #4]
 8007cb4:	9200      	str	r2, [sp, #0]
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	4632      	mov	r2, r6
 8007cba:	4629      	mov	r1, r5
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	f000 ff35 	bl	8008b2c <xTaskCreate>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d001      	beq.n	8007ccc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	e000      	b.n	8007cce <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3714      	adds	r7, #20
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007cd6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b084      	sub	sp, #16
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d001      	beq.n	8007cec <osDelay+0x16>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	e000      	b.n	8007cee <osDelay+0x18>
 8007cec:	2301      	movs	r3, #1
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f001 f854 	bl	8008d9c <vTaskDelay>
  
  return osOK;
 8007cf4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3710      	adds	r7, #16
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007cfe:	b590      	push	{r4, r7, lr}
 8007d00:	b085      	sub	sp, #20
 8007d02:	af02      	add	r7, sp, #8
 8007d04:	6078      	str	r0, [r7, #4]
 8007d06:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d012      	beq.n	8007d36 <osMessageCreate+0x38>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00e      	beq.n	8007d36 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6818      	ldr	r0, [r3, #0]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6859      	ldr	r1, [r3, #4]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	689a      	ldr	r2, [r3, #8]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	68dc      	ldr	r4, [r3, #12]
 8007d28:	2300      	movs	r3, #0
 8007d2a:	9300      	str	r3, [sp, #0]
 8007d2c:	4623      	mov	r3, r4
 8007d2e:	f000 f9df 	bl	80080f0 <xQueueGenericCreateStatic>
 8007d32:	4603      	mov	r3, r0
 8007d34:	e008      	b.n	8007d48 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6818      	ldr	r0, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	4619      	mov	r1, r3
 8007d42:	f000 fa47 	bl	80081d4 <xQueueGenericCreate>
 8007d46:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd90      	pop	{r4, r7, pc}

08007d50 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b086      	sub	sp, #24
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d101      	bne.n	8007d6e <osMessagePut+0x1e>
    ticks = 1;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007d6e:	f7ff ff4d 	bl	8007c0c <inHandlerMode>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d018      	beq.n	8007daa <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007d78:	f107 0210 	add.w	r2, r7, #16
 8007d7c:	f107 0108 	add.w	r1, r7, #8
 8007d80:	2300      	movs	r3, #0
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	f000 fb7c 	bl	8008480 <xQueueGenericSendFromISR>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d001      	beq.n	8007d92 <osMessagePut+0x42>
      return osErrorOS;
 8007d8e:	23ff      	movs	r3, #255	; 0xff
 8007d90:	e018      	b.n	8007dc4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d014      	beq.n	8007dc2 <osMessagePut+0x72>
 8007d98:	4b0c      	ldr	r3, [pc, #48]	; (8007dcc <osMessagePut+0x7c>)
 8007d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d9e:	601a      	str	r2, [r3, #0]
 8007da0:	f3bf 8f4f 	dsb	sy
 8007da4:	f3bf 8f6f 	isb	sy
 8007da8:	e00b      	b.n	8007dc2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8007daa:	f107 0108 	add.w	r1, r7, #8
 8007dae:	2300      	movs	r3, #0
 8007db0:	697a      	ldr	r2, [r7, #20]
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	f000 fa6a 	bl	800828c <xQueueGenericSend>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d001      	beq.n	8007dc2 <osMessagePut+0x72>
      return osErrorOS;
 8007dbe:	23ff      	movs	r3, #255	; 0xff
 8007dc0:	e000      	b.n	8007dc4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3718      	adds	r7, #24
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	e000ed04 	.word	0xe000ed04

08007dd0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007dd0:	b590      	push	{r4, r7, lr}
 8007dd2:	b08b      	sub	sp, #44	; 0x2c
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007de0:	2300      	movs	r3, #0
 8007de2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d10a      	bne.n	8007e00 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8007dea:	2380      	movs	r3, #128	; 0x80
 8007dec:	617b      	str	r3, [r7, #20]
    return event;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	461c      	mov	r4, r3
 8007df2:	f107 0314 	add.w	r3, r7, #20
 8007df6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007dfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007dfe:	e054      	b.n	8007eaa <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007e00:	2300      	movs	r3, #0
 8007e02:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007e04:	2300      	movs	r3, #0
 8007e06:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e0e:	d103      	bne.n	8007e18 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007e10:	f04f 33ff 	mov.w	r3, #4294967295
 8007e14:	627b      	str	r3, [r7, #36]	; 0x24
 8007e16:	e009      	b.n	8007e2c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d006      	beq.n	8007e2c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8007e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d101      	bne.n	8007e2c <osMessageGet+0x5c>
      ticks = 1;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007e2c:	f7ff feee 	bl	8007c0c <inHandlerMode>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d01c      	beq.n	8007e70 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007e36:	f107 0220 	add.w	r2, r7, #32
 8007e3a:	f107 0314 	add.w	r3, r7, #20
 8007e3e:	3304      	adds	r3, #4
 8007e40:	4619      	mov	r1, r3
 8007e42:	68b8      	ldr	r0, [r7, #8]
 8007e44:	f000 fc8c 	bl	8008760 <xQueueReceiveFromISR>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d102      	bne.n	8007e54 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8007e4e:	2310      	movs	r3, #16
 8007e50:	617b      	str	r3, [r7, #20]
 8007e52:	e001      	b.n	8007e58 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8007e54:	2300      	movs	r3, #0
 8007e56:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007e58:	6a3b      	ldr	r3, [r7, #32]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d01d      	beq.n	8007e9a <osMessageGet+0xca>
 8007e5e:	4b15      	ldr	r3, [pc, #84]	; (8007eb4 <osMessageGet+0xe4>)
 8007e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e64:	601a      	str	r2, [r3, #0]
 8007e66:	f3bf 8f4f 	dsb	sy
 8007e6a:	f3bf 8f6f 	isb	sy
 8007e6e:	e014      	b.n	8007e9a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007e70:	f107 0314 	add.w	r3, r7, #20
 8007e74:	3304      	adds	r3, #4
 8007e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e78:	4619      	mov	r1, r3
 8007e7a:	68b8      	ldr	r0, [r7, #8]
 8007e7c:	f000 fb94 	bl	80085a8 <xQueueReceive>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d102      	bne.n	8007e8c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8007e86:	2310      	movs	r3, #16
 8007e88:	617b      	str	r3, [r7, #20]
 8007e8a:	e006      	b.n	8007e9a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d101      	bne.n	8007e96 <osMessageGet+0xc6>
 8007e92:	2300      	movs	r3, #0
 8007e94:	e000      	b.n	8007e98 <osMessageGet+0xc8>
 8007e96:	2340      	movs	r3, #64	; 0x40
 8007e98:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	461c      	mov	r4, r3
 8007e9e:	f107 0314 	add.w	r3, r7, #20
 8007ea2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007ea6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	372c      	adds	r7, #44	; 0x2c
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd90      	pop	{r4, r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	e000ed04 	.word	0xe000ed04

08007eb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f103 0208 	add.w	r2, r3, #8
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ed0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f103 0208 	add.w	r2, r3, #8
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f103 0208 	add.w	r2, r3, #8
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007eec:	bf00      	nop
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007f06:	bf00      	nop
 8007f08:	370c      	adds	r7, #12
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr

08007f12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f12:	b480      	push	{r7}
 8007f14:	b085      	sub	sp, #20
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
 8007f1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	689a      	ldr	r2, [r3, #8]
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	683a      	ldr	r2, [r7, #0]
 8007f36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	683a      	ldr	r2, [r7, #0]
 8007f3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	1c5a      	adds	r2, r3, #1
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	601a      	str	r2, [r3, #0]
}
 8007f4e:	bf00      	nop
 8007f50:	3714      	adds	r7, #20
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr

08007f5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f5a:	b480      	push	{r7}
 8007f5c:	b085      	sub	sp, #20
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
 8007f62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f70:	d103      	bne.n	8007f7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	60fb      	str	r3, [r7, #12]
 8007f78:	e00c      	b.n	8007f94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	3308      	adds	r3, #8
 8007f7e:	60fb      	str	r3, [r7, #12]
 8007f80:	e002      	b.n	8007f88 <vListInsert+0x2e>
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	60fb      	str	r3, [r7, #12]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68ba      	ldr	r2, [r7, #8]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d2f6      	bcs.n	8007f82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	685a      	ldr	r2, [r3, #4]
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	683a      	ldr	r2, [r7, #0]
 8007fa2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	683a      	ldr	r2, [r7, #0]
 8007fae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	1c5a      	adds	r2, r3, #1
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	601a      	str	r2, [r3, #0]
}
 8007fc0:	bf00      	nop
 8007fc2:	3714      	adds	r7, #20
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b085      	sub	sp, #20
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	691b      	ldr	r3, [r3, #16]
 8007fd8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	6892      	ldr	r2, [r2, #8]
 8007fe2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	6852      	ldr	r2, [r2, #4]
 8007fec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d103      	bne.n	8008000 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	689a      	ldr	r2, [r3, #8]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	1e5a      	subs	r2, r3, #1
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
}
 8008014:	4618      	mov	r0, r3
 8008016:	3714      	adds	r7, #20
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d109      	bne.n	8008048 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008038:	f383 8811 	msr	BASEPRI, r3
 800803c:	f3bf 8f6f 	isb	sy
 8008040:	f3bf 8f4f 	dsb	sy
 8008044:	60bb      	str	r3, [r7, #8]
 8008046:	e7fe      	b.n	8008046 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008048:	f001 fd30 	bl	8009aac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008054:	68f9      	ldr	r1, [r7, #12]
 8008056:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008058:	fb01 f303 	mul.w	r3, r1, r3
 800805c:	441a      	add	r2, r3
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2200      	movs	r2, #0
 8008066:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008078:	3b01      	subs	r3, #1
 800807a:	68f9      	ldr	r1, [r7, #12]
 800807c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800807e:	fb01 f303 	mul.w	r3, r1, r3
 8008082:	441a      	add	r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	22ff      	movs	r2, #255	; 0xff
 800808c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	22ff      	movs	r2, #255	; 0xff
 8008094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d114      	bne.n	80080c8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d01a      	beq.n	80080dc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	3310      	adds	r3, #16
 80080aa:	4618      	mov	r0, r3
 80080ac:	f001 f912 	bl	80092d4 <xTaskRemoveFromEventList>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d012      	beq.n	80080dc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80080b6:	4b0d      	ldr	r3, [pc, #52]	; (80080ec <xQueueGenericReset+0xcc>)
 80080b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080bc:	601a      	str	r2, [r3, #0]
 80080be:	f3bf 8f4f 	dsb	sy
 80080c2:	f3bf 8f6f 	isb	sy
 80080c6:	e009      	b.n	80080dc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	3310      	adds	r3, #16
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7ff fef3 	bl	8007eb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	3324      	adds	r3, #36	; 0x24
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7ff feee 	bl	8007eb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80080dc:	f001 fd14 	bl	8009b08 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80080e0:	2301      	movs	r3, #1
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
 80080ea:	bf00      	nop
 80080ec:	e000ed04 	.word	0xe000ed04

080080f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b08e      	sub	sp, #56	; 0x38
 80080f4:	af02      	add	r7, sp, #8
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
 80080fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d109      	bne.n	8008118 <xQueueGenericCreateStatic+0x28>
 8008104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008108:	f383 8811 	msr	BASEPRI, r3
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	62bb      	str	r3, [r7, #40]	; 0x28
 8008116:	e7fe      	b.n	8008116 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d109      	bne.n	8008132 <xQueueGenericCreateStatic+0x42>
 800811e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008122:	f383 8811 	msr	BASEPRI, r3
 8008126:	f3bf 8f6f 	isb	sy
 800812a:	f3bf 8f4f 	dsb	sy
 800812e:	627b      	str	r3, [r7, #36]	; 0x24
 8008130:	e7fe      	b.n	8008130 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d002      	beq.n	800813e <xQueueGenericCreateStatic+0x4e>
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d001      	beq.n	8008142 <xQueueGenericCreateStatic+0x52>
 800813e:	2301      	movs	r3, #1
 8008140:	e000      	b.n	8008144 <xQueueGenericCreateStatic+0x54>
 8008142:	2300      	movs	r3, #0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d109      	bne.n	800815c <xQueueGenericCreateStatic+0x6c>
 8008148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814c:	f383 8811 	msr	BASEPRI, r3
 8008150:	f3bf 8f6f 	isb	sy
 8008154:	f3bf 8f4f 	dsb	sy
 8008158:	623b      	str	r3, [r7, #32]
 800815a:	e7fe      	b.n	800815a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d102      	bne.n	8008168 <xQueueGenericCreateStatic+0x78>
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d101      	bne.n	800816c <xQueueGenericCreateStatic+0x7c>
 8008168:	2301      	movs	r3, #1
 800816a:	e000      	b.n	800816e <xQueueGenericCreateStatic+0x7e>
 800816c:	2300      	movs	r3, #0
 800816e:	2b00      	cmp	r3, #0
 8008170:	d109      	bne.n	8008186 <xQueueGenericCreateStatic+0x96>
 8008172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008176:	f383 8811 	msr	BASEPRI, r3
 800817a:	f3bf 8f6f 	isb	sy
 800817e:	f3bf 8f4f 	dsb	sy
 8008182:	61fb      	str	r3, [r7, #28]
 8008184:	e7fe      	b.n	8008184 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008186:	2348      	movs	r3, #72	; 0x48
 8008188:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	2b48      	cmp	r3, #72	; 0x48
 800818e:	d009      	beq.n	80081a4 <xQueueGenericCreateStatic+0xb4>
 8008190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008194:	f383 8811 	msr	BASEPRI, r3
 8008198:	f3bf 8f6f 	isb	sy
 800819c:	f3bf 8f4f 	dsb	sy
 80081a0:	61bb      	str	r3, [r7, #24]
 80081a2:	e7fe      	b.n	80081a2 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80081a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00d      	beq.n	80081ca <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80081ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b0:	2201      	movs	r2, #1
 80081b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80081b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80081ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081bc:	9300      	str	r3, [sp, #0]
 80081be:	4613      	mov	r3, r2
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	68b9      	ldr	r1, [r7, #8]
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f000 f842 	bl	800824e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80081ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3730      	adds	r7, #48	; 0x30
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b08a      	sub	sp, #40	; 0x28
 80081d8:	af02      	add	r7, sp, #8
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	4613      	mov	r3, r2
 80081e0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d109      	bne.n	80081fc <xQueueGenericCreate+0x28>
 80081e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ec:	f383 8811 	msr	BASEPRI, r3
 80081f0:	f3bf 8f6f 	isb	sy
 80081f4:	f3bf 8f4f 	dsb	sy
 80081f8:	613b      	str	r3, [r7, #16]
 80081fa:	e7fe      	b.n	80081fa <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d102      	bne.n	8008208 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008202:	2300      	movs	r3, #0
 8008204:	61fb      	str	r3, [r7, #28]
 8008206:	e004      	b.n	8008212 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	68ba      	ldr	r2, [r7, #8]
 800820c:	fb02 f303 	mul.w	r3, r2, r3
 8008210:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	3348      	adds	r3, #72	; 0x48
 8008216:	4618      	mov	r0, r3
 8008218:	f001 fd62 	bl	8009ce0 <pvPortMalloc>
 800821c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d00f      	beq.n	8008244 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	3348      	adds	r3, #72	; 0x48
 8008228:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	2200      	movs	r2, #0
 800822e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008232:	79fa      	ldrb	r2, [r7, #7]
 8008234:	69bb      	ldr	r3, [r7, #24]
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	4613      	mov	r3, r2
 800823a:	697a      	ldr	r2, [r7, #20]
 800823c:	68b9      	ldr	r1, [r7, #8]
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f000 f805 	bl	800824e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008244:	69bb      	ldr	r3, [r7, #24]
	}
 8008246:	4618      	mov	r0, r3
 8008248:	3720      	adds	r7, #32
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b084      	sub	sp, #16
 8008252:	af00      	add	r7, sp, #0
 8008254:	60f8      	str	r0, [r7, #12]
 8008256:	60b9      	str	r1, [r7, #8]
 8008258:	607a      	str	r2, [r7, #4]
 800825a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d103      	bne.n	800826a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008262:	69bb      	ldr	r3, [r7, #24]
 8008264:	69ba      	ldr	r2, [r7, #24]
 8008266:	601a      	str	r2, [r3, #0]
 8008268:	e002      	b.n	8008270 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800826a:	69bb      	ldr	r3, [r7, #24]
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	68ba      	ldr	r2, [r7, #8]
 800827a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800827c:	2101      	movs	r1, #1
 800827e:	69b8      	ldr	r0, [r7, #24]
 8008280:	f7ff fece 	bl	8008020 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008284:	bf00      	nop
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b08e      	sub	sp, #56	; 0x38
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	607a      	str	r2, [r7, #4]
 8008298:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800829a:	2300      	movs	r3, #0
 800829c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80082a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d109      	bne.n	80082bc <xQueueGenericSend+0x30>
 80082a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ac:	f383 8811 	msr	BASEPRI, r3
 80082b0:	f3bf 8f6f 	isb	sy
 80082b4:	f3bf 8f4f 	dsb	sy
 80082b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80082ba:	e7fe      	b.n	80082ba <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d103      	bne.n	80082ca <xQueueGenericSend+0x3e>
 80082c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d101      	bne.n	80082ce <xQueueGenericSend+0x42>
 80082ca:	2301      	movs	r3, #1
 80082cc:	e000      	b.n	80082d0 <xQueueGenericSend+0x44>
 80082ce:	2300      	movs	r3, #0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d109      	bne.n	80082e8 <xQueueGenericSend+0x5c>
 80082d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d8:	f383 8811 	msr	BASEPRI, r3
 80082dc:	f3bf 8f6f 	isb	sy
 80082e0:	f3bf 8f4f 	dsb	sy
 80082e4:	627b      	str	r3, [r7, #36]	; 0x24
 80082e6:	e7fe      	b.n	80082e6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	2b02      	cmp	r3, #2
 80082ec:	d103      	bne.n	80082f6 <xQueueGenericSend+0x6a>
 80082ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d101      	bne.n	80082fa <xQueueGenericSend+0x6e>
 80082f6:	2301      	movs	r3, #1
 80082f8:	e000      	b.n	80082fc <xQueueGenericSend+0x70>
 80082fa:	2300      	movs	r3, #0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d109      	bne.n	8008314 <xQueueGenericSend+0x88>
 8008300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008304:	f383 8811 	msr	BASEPRI, r3
 8008308:	f3bf 8f6f 	isb	sy
 800830c:	f3bf 8f4f 	dsb	sy
 8008310:	623b      	str	r3, [r7, #32]
 8008312:	e7fe      	b.n	8008312 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008314:	f001 f99c 	bl	8009650 <xTaskGetSchedulerState>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d102      	bne.n	8008324 <xQueueGenericSend+0x98>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d101      	bne.n	8008328 <xQueueGenericSend+0x9c>
 8008324:	2301      	movs	r3, #1
 8008326:	e000      	b.n	800832a <xQueueGenericSend+0x9e>
 8008328:	2300      	movs	r3, #0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d109      	bne.n	8008342 <xQueueGenericSend+0xb6>
 800832e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008332:	f383 8811 	msr	BASEPRI, r3
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	61fb      	str	r3, [r7, #28]
 8008340:	e7fe      	b.n	8008340 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008342:	f001 fbb3 	bl	8009aac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008348:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800834a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800834e:	429a      	cmp	r2, r3
 8008350:	d302      	bcc.n	8008358 <xQueueGenericSend+0xcc>
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	2b02      	cmp	r3, #2
 8008356:	d129      	bne.n	80083ac <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008358:	683a      	ldr	r2, [r7, #0]
 800835a:	68b9      	ldr	r1, [r7, #8]
 800835c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800835e:	f000 fa7c 	bl	800885a <prvCopyDataToQueue>
 8008362:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008368:	2b00      	cmp	r3, #0
 800836a:	d010      	beq.n	800838e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800836c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836e:	3324      	adds	r3, #36	; 0x24
 8008370:	4618      	mov	r0, r3
 8008372:	f000 ffaf 	bl	80092d4 <xTaskRemoveFromEventList>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d013      	beq.n	80083a4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800837c:	4b3f      	ldr	r3, [pc, #252]	; (800847c <xQueueGenericSend+0x1f0>)
 800837e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008382:	601a      	str	r2, [r3, #0]
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	f3bf 8f6f 	isb	sy
 800838c:	e00a      	b.n	80083a4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800838e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008390:	2b00      	cmp	r3, #0
 8008392:	d007      	beq.n	80083a4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008394:	4b39      	ldr	r3, [pc, #228]	; (800847c <xQueueGenericSend+0x1f0>)
 8008396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800839a:	601a      	str	r2, [r3, #0]
 800839c:	f3bf 8f4f 	dsb	sy
 80083a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80083a4:	f001 fbb0 	bl	8009b08 <vPortExitCritical>
				return pdPASS;
 80083a8:	2301      	movs	r3, #1
 80083aa:	e063      	b.n	8008474 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d103      	bne.n	80083ba <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80083b2:	f001 fba9 	bl	8009b08 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80083b6:	2300      	movs	r3, #0
 80083b8:	e05c      	b.n	8008474 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d106      	bne.n	80083ce <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083c0:	f107 0314 	add.w	r3, r7, #20
 80083c4:	4618      	mov	r0, r3
 80083c6:	f000 ffe7 	bl	8009398 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083ca:	2301      	movs	r3, #1
 80083cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083ce:	f001 fb9b 	bl	8009b08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083d2:	f000 fd75 	bl	8008ec0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083d6:	f001 fb69 	bl	8009aac <vPortEnterCritical>
 80083da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083e0:	b25b      	sxtb	r3, r3
 80083e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e6:	d103      	bne.n	80083f0 <xQueueGenericSend+0x164>
 80083e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ea:	2200      	movs	r2, #0
 80083ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083f6:	b25b      	sxtb	r3, r3
 80083f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083fc:	d103      	bne.n	8008406 <xQueueGenericSend+0x17a>
 80083fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008400:	2200      	movs	r2, #0
 8008402:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008406:	f001 fb7f 	bl	8009b08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800840a:	1d3a      	adds	r2, r7, #4
 800840c:	f107 0314 	add.w	r3, r7, #20
 8008410:	4611      	mov	r1, r2
 8008412:	4618      	mov	r0, r3
 8008414:	f000 ffd6 	bl	80093c4 <xTaskCheckForTimeOut>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d124      	bne.n	8008468 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800841e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008420:	f000 fb13 	bl	8008a4a <prvIsQueueFull>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d018      	beq.n	800845c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800842a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842c:	3310      	adds	r3, #16
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	4611      	mov	r1, r2
 8008432:	4618      	mov	r0, r3
 8008434:	f000 ff2a 	bl	800928c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008438:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800843a:	f000 fa9e 	bl	800897a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800843e:	f000 fd4d 	bl	8008edc <xTaskResumeAll>
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	f47f af7c 	bne.w	8008342 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800844a:	4b0c      	ldr	r3, [pc, #48]	; (800847c <xQueueGenericSend+0x1f0>)
 800844c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008450:	601a      	str	r2, [r3, #0]
 8008452:	f3bf 8f4f 	dsb	sy
 8008456:	f3bf 8f6f 	isb	sy
 800845a:	e772      	b.n	8008342 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800845c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800845e:	f000 fa8c 	bl	800897a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008462:	f000 fd3b 	bl	8008edc <xTaskResumeAll>
 8008466:	e76c      	b.n	8008342 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008468:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800846a:	f000 fa86 	bl	800897a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800846e:	f000 fd35 	bl	8008edc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008472:	2300      	movs	r3, #0
		}
	}
}
 8008474:	4618      	mov	r0, r3
 8008476:	3738      	adds	r7, #56	; 0x38
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	e000ed04 	.word	0xe000ed04

08008480 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b08e      	sub	sp, #56	; 0x38
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]
 800848c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008494:	2b00      	cmp	r3, #0
 8008496:	d109      	bne.n	80084ac <xQueueGenericSendFromISR+0x2c>
 8008498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849c:	f383 8811 	msr	BASEPRI, r3
 80084a0:	f3bf 8f6f 	isb	sy
 80084a4:	f3bf 8f4f 	dsb	sy
 80084a8:	627b      	str	r3, [r7, #36]	; 0x24
 80084aa:	e7fe      	b.n	80084aa <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d103      	bne.n	80084ba <xQueueGenericSendFromISR+0x3a>
 80084b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d101      	bne.n	80084be <xQueueGenericSendFromISR+0x3e>
 80084ba:	2301      	movs	r3, #1
 80084bc:	e000      	b.n	80084c0 <xQueueGenericSendFromISR+0x40>
 80084be:	2300      	movs	r3, #0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d109      	bne.n	80084d8 <xQueueGenericSendFromISR+0x58>
 80084c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c8:	f383 8811 	msr	BASEPRI, r3
 80084cc:	f3bf 8f6f 	isb	sy
 80084d0:	f3bf 8f4f 	dsb	sy
 80084d4:	623b      	str	r3, [r7, #32]
 80084d6:	e7fe      	b.n	80084d6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d103      	bne.n	80084e6 <xQueueGenericSendFromISR+0x66>
 80084de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d101      	bne.n	80084ea <xQueueGenericSendFromISR+0x6a>
 80084e6:	2301      	movs	r3, #1
 80084e8:	e000      	b.n	80084ec <xQueueGenericSendFromISR+0x6c>
 80084ea:	2300      	movs	r3, #0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d109      	bne.n	8008504 <xQueueGenericSendFromISR+0x84>
 80084f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f4:	f383 8811 	msr	BASEPRI, r3
 80084f8:	f3bf 8f6f 	isb	sy
 80084fc:	f3bf 8f4f 	dsb	sy
 8008500:	61fb      	str	r3, [r7, #28]
 8008502:	e7fe      	b.n	8008502 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008504:	f001 fbae 	bl	8009c64 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008508:	f3ef 8211 	mrs	r2, BASEPRI
 800850c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008510:	f383 8811 	msr	BASEPRI, r3
 8008514:	f3bf 8f6f 	isb	sy
 8008518:	f3bf 8f4f 	dsb	sy
 800851c:	61ba      	str	r2, [r7, #24]
 800851e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008520:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008522:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008526:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800852c:	429a      	cmp	r2, r3
 800852e:	d302      	bcc.n	8008536 <xQueueGenericSendFromISR+0xb6>
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	2b02      	cmp	r3, #2
 8008534:	d12c      	bne.n	8008590 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008538:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800853c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008540:	683a      	ldr	r2, [r7, #0]
 8008542:	68b9      	ldr	r1, [r7, #8]
 8008544:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008546:	f000 f988 	bl	800885a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800854a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800854e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008552:	d112      	bne.n	800857a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008558:	2b00      	cmp	r3, #0
 800855a:	d016      	beq.n	800858a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800855c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855e:	3324      	adds	r3, #36	; 0x24
 8008560:	4618      	mov	r0, r3
 8008562:	f000 feb7 	bl	80092d4 <xTaskRemoveFromEventList>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d00e      	beq.n	800858a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00b      	beq.n	800858a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2201      	movs	r2, #1
 8008576:	601a      	str	r2, [r3, #0]
 8008578:	e007      	b.n	800858a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800857a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800857e:	3301      	adds	r3, #1
 8008580:	b2db      	uxtb	r3, r3
 8008582:	b25a      	sxtb	r2, r3
 8008584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800858a:	2301      	movs	r3, #1
 800858c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800858e:	e001      	b.n	8008594 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008590:	2300      	movs	r3, #0
 8008592:	637b      	str	r3, [r7, #52]	; 0x34
 8008594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008596:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800859e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3738      	adds	r7, #56	; 0x38
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b08c      	sub	sp, #48	; 0x30
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80085b4:	2300      	movs	r3, #0
 80085b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80085bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d109      	bne.n	80085d6 <xQueueReceive+0x2e>
	__asm volatile
 80085c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c6:	f383 8811 	msr	BASEPRI, r3
 80085ca:	f3bf 8f6f 	isb	sy
 80085ce:	f3bf 8f4f 	dsb	sy
 80085d2:	623b      	str	r3, [r7, #32]
 80085d4:	e7fe      	b.n	80085d4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d103      	bne.n	80085e4 <xQueueReceive+0x3c>
 80085dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d101      	bne.n	80085e8 <xQueueReceive+0x40>
 80085e4:	2301      	movs	r3, #1
 80085e6:	e000      	b.n	80085ea <xQueueReceive+0x42>
 80085e8:	2300      	movs	r3, #0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d109      	bne.n	8008602 <xQueueReceive+0x5a>
 80085ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f2:	f383 8811 	msr	BASEPRI, r3
 80085f6:	f3bf 8f6f 	isb	sy
 80085fa:	f3bf 8f4f 	dsb	sy
 80085fe:	61fb      	str	r3, [r7, #28]
 8008600:	e7fe      	b.n	8008600 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008602:	f001 f825 	bl	8009650 <xTaskGetSchedulerState>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d102      	bne.n	8008612 <xQueueReceive+0x6a>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d101      	bne.n	8008616 <xQueueReceive+0x6e>
 8008612:	2301      	movs	r3, #1
 8008614:	e000      	b.n	8008618 <xQueueReceive+0x70>
 8008616:	2300      	movs	r3, #0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d109      	bne.n	8008630 <xQueueReceive+0x88>
 800861c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008620:	f383 8811 	msr	BASEPRI, r3
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	61bb      	str	r3, [r7, #24]
 800862e:	e7fe      	b.n	800862e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008630:	f001 fa3c 	bl	8009aac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008638:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800863a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863c:	2b00      	cmp	r3, #0
 800863e:	d01f      	beq.n	8008680 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008640:	68b9      	ldr	r1, [r7, #8]
 8008642:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008644:	f000 f973 	bl	800892e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864a:	1e5a      	subs	r2, r3, #1
 800864c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00f      	beq.n	8008678 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865a:	3310      	adds	r3, #16
 800865c:	4618      	mov	r0, r3
 800865e:	f000 fe39 	bl	80092d4 <xTaskRemoveFromEventList>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d007      	beq.n	8008678 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008668:	4b3c      	ldr	r3, [pc, #240]	; (800875c <xQueueReceive+0x1b4>)
 800866a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800866e:	601a      	str	r2, [r3, #0]
 8008670:	f3bf 8f4f 	dsb	sy
 8008674:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008678:	f001 fa46 	bl	8009b08 <vPortExitCritical>
				return pdPASS;
 800867c:	2301      	movs	r3, #1
 800867e:	e069      	b.n	8008754 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d103      	bne.n	800868e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008686:	f001 fa3f 	bl	8009b08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800868a:	2300      	movs	r3, #0
 800868c:	e062      	b.n	8008754 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800868e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008690:	2b00      	cmp	r3, #0
 8008692:	d106      	bne.n	80086a2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008694:	f107 0310 	add.w	r3, r7, #16
 8008698:	4618      	mov	r0, r3
 800869a:	f000 fe7d 	bl	8009398 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800869e:	2301      	movs	r3, #1
 80086a0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80086a2:	f001 fa31 	bl	8009b08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80086a6:	f000 fc0b 	bl	8008ec0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086aa:	f001 f9ff 	bl	8009aac <vPortEnterCritical>
 80086ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086b4:	b25b      	sxtb	r3, r3
 80086b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ba:	d103      	bne.n	80086c4 <xQueueReceive+0x11c>
 80086bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086be:	2200      	movs	r2, #0
 80086c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086ca:	b25b      	sxtb	r3, r3
 80086cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d0:	d103      	bne.n	80086da <xQueueReceive+0x132>
 80086d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d4:	2200      	movs	r2, #0
 80086d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086da:	f001 fa15 	bl	8009b08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086de:	1d3a      	adds	r2, r7, #4
 80086e0:	f107 0310 	add.w	r3, r7, #16
 80086e4:	4611      	mov	r1, r2
 80086e6:	4618      	mov	r0, r3
 80086e8:	f000 fe6c 	bl	80093c4 <xTaskCheckForTimeOut>
 80086ec:	4603      	mov	r3, r0
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d123      	bne.n	800873a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086f4:	f000 f993 	bl	8008a1e <prvIsQueueEmpty>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d017      	beq.n	800872e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80086fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008700:	3324      	adds	r3, #36	; 0x24
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	4611      	mov	r1, r2
 8008706:	4618      	mov	r0, r3
 8008708:	f000 fdc0 	bl	800928c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800870c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800870e:	f000 f934 	bl	800897a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008712:	f000 fbe3 	bl	8008edc <xTaskResumeAll>
 8008716:	4603      	mov	r3, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	d189      	bne.n	8008630 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800871c:	4b0f      	ldr	r3, [pc, #60]	; (800875c <xQueueReceive+0x1b4>)
 800871e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008722:	601a      	str	r2, [r3, #0]
 8008724:	f3bf 8f4f 	dsb	sy
 8008728:	f3bf 8f6f 	isb	sy
 800872c:	e780      	b.n	8008630 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800872e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008730:	f000 f923 	bl	800897a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008734:	f000 fbd2 	bl	8008edc <xTaskResumeAll>
 8008738:	e77a      	b.n	8008630 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800873a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800873c:	f000 f91d 	bl	800897a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008740:	f000 fbcc 	bl	8008edc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008744:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008746:	f000 f96a 	bl	8008a1e <prvIsQueueEmpty>
 800874a:	4603      	mov	r3, r0
 800874c:	2b00      	cmp	r3, #0
 800874e:	f43f af6f 	beq.w	8008630 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008752:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008754:	4618      	mov	r0, r3
 8008756:	3730      	adds	r7, #48	; 0x30
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}
 800875c:	e000ed04 	.word	0xe000ed04

08008760 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b08e      	sub	sp, #56	; 0x38
 8008764:	af00      	add	r7, sp, #0
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008772:	2b00      	cmp	r3, #0
 8008774:	d109      	bne.n	800878a <xQueueReceiveFromISR+0x2a>
 8008776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800877a:	f383 8811 	msr	BASEPRI, r3
 800877e:	f3bf 8f6f 	isb	sy
 8008782:	f3bf 8f4f 	dsb	sy
 8008786:	623b      	str	r3, [r7, #32]
 8008788:	e7fe      	b.n	8008788 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d103      	bne.n	8008798 <xQueueReceiveFromISR+0x38>
 8008790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008794:	2b00      	cmp	r3, #0
 8008796:	d101      	bne.n	800879c <xQueueReceiveFromISR+0x3c>
 8008798:	2301      	movs	r3, #1
 800879a:	e000      	b.n	800879e <xQueueReceiveFromISR+0x3e>
 800879c:	2300      	movs	r3, #0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d109      	bne.n	80087b6 <xQueueReceiveFromISR+0x56>
 80087a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a6:	f383 8811 	msr	BASEPRI, r3
 80087aa:	f3bf 8f6f 	isb	sy
 80087ae:	f3bf 8f4f 	dsb	sy
 80087b2:	61fb      	str	r3, [r7, #28]
 80087b4:	e7fe      	b.n	80087b4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80087b6:	f001 fa55 	bl	8009c64 <vPortValidateInterruptPriority>
	__asm volatile
 80087ba:	f3ef 8211 	mrs	r2, BASEPRI
 80087be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	61ba      	str	r2, [r7, #24]
 80087d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80087d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80087d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d02f      	beq.n	8008842 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80087e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80087ec:	68b9      	ldr	r1, [r7, #8]
 80087ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087f0:	f000 f89d 	bl	800892e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80087f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f6:	1e5a      	subs	r2, r3, #1
 80087f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80087fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008804:	d112      	bne.n	800882c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008808:	691b      	ldr	r3, [r3, #16]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d016      	beq.n	800883c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800880e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008810:	3310      	adds	r3, #16
 8008812:	4618      	mov	r0, r3
 8008814:	f000 fd5e 	bl	80092d4 <xTaskRemoveFromEventList>
 8008818:	4603      	mov	r3, r0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00e      	beq.n	800883c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d00b      	beq.n	800883c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2201      	movs	r2, #1
 8008828:	601a      	str	r2, [r3, #0]
 800882a:	e007      	b.n	800883c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800882c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008830:	3301      	adds	r3, #1
 8008832:	b2db      	uxtb	r3, r3
 8008834:	b25a      	sxtb	r2, r3
 8008836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800883c:	2301      	movs	r3, #1
 800883e:	637b      	str	r3, [r7, #52]	; 0x34
 8008840:	e001      	b.n	8008846 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8008842:	2300      	movs	r3, #0
 8008844:	637b      	str	r3, [r7, #52]	; 0x34
 8008846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008848:	613b      	str	r3, [r7, #16]
	__asm volatile
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008852:	4618      	mov	r0, r3
 8008854:	3738      	adds	r7, #56	; 0x38
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b086      	sub	sp, #24
 800885e:	af00      	add	r7, sp, #0
 8008860:	60f8      	str	r0, [r7, #12]
 8008862:	60b9      	str	r1, [r7, #8]
 8008864:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008866:	2300      	movs	r3, #0
 8008868:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800886e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008874:	2b00      	cmp	r3, #0
 8008876:	d10d      	bne.n	8008894 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d14d      	bne.n	800891c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	4618      	mov	r0, r3
 8008886:	f000 ff01 	bl	800968c <xTaskPriorityDisinherit>
 800888a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2200      	movs	r2, #0
 8008890:	605a      	str	r2, [r3, #4]
 8008892:	e043      	b.n	800891c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d119      	bne.n	80088ce <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6898      	ldr	r0, [r3, #8]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a2:	461a      	mov	r2, r3
 80088a4:	68b9      	ldr	r1, [r7, #8]
 80088a6:	f002 ffd5 	bl	800b854 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	689a      	ldr	r2, [r3, #8]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b2:	441a      	add	r2, r3
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	689a      	ldr	r2, [r3, #8]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d32b      	bcc.n	800891c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	609a      	str	r2, [r3, #8]
 80088cc:	e026      	b.n	800891c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	68d8      	ldr	r0, [r3, #12]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d6:	461a      	mov	r2, r3
 80088d8:	68b9      	ldr	r1, [r7, #8]
 80088da:	f002 ffbb 	bl	800b854 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	68da      	ldr	r2, [r3, #12]
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e6:	425b      	negs	r3, r3
 80088e8:	441a      	add	r2, r3
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	68da      	ldr	r2, [r3, #12]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d207      	bcs.n	800890a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	685a      	ldr	r2, [r3, #4]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008902:	425b      	negs	r3, r3
 8008904:	441a      	add	r2, r3
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2b02      	cmp	r3, #2
 800890e:	d105      	bne.n	800891c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d002      	beq.n	800891c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	3b01      	subs	r3, #1
 800891a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	1c5a      	adds	r2, r3, #1
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008924:	697b      	ldr	r3, [r7, #20]
}
 8008926:	4618      	mov	r0, r3
 8008928:	3718      	adds	r7, #24
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800892e:	b580      	push	{r7, lr}
 8008930:	b082      	sub	sp, #8
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
 8008936:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800893c:	2b00      	cmp	r3, #0
 800893e:	d018      	beq.n	8008972 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	68da      	ldr	r2, [r3, #12]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008948:	441a      	add	r2, r3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	68da      	ldr	r2, [r3, #12]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	429a      	cmp	r2, r3
 8008958:	d303      	bcc.n	8008962 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	68d9      	ldr	r1, [r3, #12]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800896a:	461a      	mov	r2, r3
 800896c:	6838      	ldr	r0, [r7, #0]
 800896e:	f002 ff71 	bl	800b854 <memcpy>
	}
}
 8008972:	bf00      	nop
 8008974:	3708      	adds	r7, #8
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}

0800897a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800897a:	b580      	push	{r7, lr}
 800897c:	b084      	sub	sp, #16
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008982:	f001 f893 	bl	8009aac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800898c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800898e:	e011      	b.n	80089b4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008994:	2b00      	cmp	r3, #0
 8008996:	d012      	beq.n	80089be <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	3324      	adds	r3, #36	; 0x24
 800899c:	4618      	mov	r0, r3
 800899e:	f000 fc99 	bl	80092d4 <xTaskRemoveFromEventList>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d001      	beq.n	80089ac <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80089a8:	f000 fd6c 	bl	8009484 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80089ac:	7bfb      	ldrb	r3, [r7, #15]
 80089ae:	3b01      	subs	r3, #1
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	dce9      	bgt.n	8008990 <prvUnlockQueue+0x16>
 80089bc:	e000      	b.n	80089c0 <prvUnlockQueue+0x46>
					break;
 80089be:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	22ff      	movs	r2, #255	; 0xff
 80089c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80089c8:	f001 f89e 	bl	8009b08 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80089cc:	f001 f86e 	bl	8009aac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089d6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80089d8:	e011      	b.n	80089fe <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d012      	beq.n	8008a08 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	3310      	adds	r3, #16
 80089e6:	4618      	mov	r0, r3
 80089e8:	f000 fc74 	bl	80092d4 <xTaskRemoveFromEventList>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d001      	beq.n	80089f6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80089f2:	f000 fd47 	bl	8009484 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80089f6:	7bbb      	ldrb	r3, [r7, #14]
 80089f8:	3b01      	subs	r3, #1
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80089fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	dce9      	bgt.n	80089da <prvUnlockQueue+0x60>
 8008a06:	e000      	b.n	8008a0a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008a08:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	22ff      	movs	r2, #255	; 0xff
 8008a0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008a12:	f001 f879 	bl	8009b08 <vPortExitCritical>
}
 8008a16:	bf00      	nop
 8008a18:	3710      	adds	r7, #16
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b084      	sub	sp, #16
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a26:	f001 f841 	bl	8009aac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d102      	bne.n	8008a38 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008a32:	2301      	movs	r3, #1
 8008a34:	60fb      	str	r3, [r7, #12]
 8008a36:	e001      	b.n	8008a3c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a3c:	f001 f864 	bl	8009b08 <vPortExitCritical>

	return xReturn;
 8008a40:	68fb      	ldr	r3, [r7, #12]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3710      	adds	r7, #16
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b084      	sub	sp, #16
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a52:	f001 f82b 	bl	8009aac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d102      	bne.n	8008a68 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008a62:	2301      	movs	r3, #1
 8008a64:	60fb      	str	r3, [r7, #12]
 8008a66:	e001      	b.n	8008a6c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a6c:	f001 f84c 	bl	8009b08 <vPortExitCritical>

	return xReturn;
 8008a70:	68fb      	ldr	r3, [r7, #12]
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b08e      	sub	sp, #56	; 0x38
 8008a7e:	af04      	add	r7, sp, #16
 8008a80:	60f8      	str	r0, [r7, #12]
 8008a82:	60b9      	str	r1, [r7, #8]
 8008a84:	607a      	str	r2, [r7, #4]
 8008a86:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d109      	bne.n	8008aa2 <xTaskCreateStatic+0x28>
	__asm volatile
 8008a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a92:	f383 8811 	msr	BASEPRI, r3
 8008a96:	f3bf 8f6f 	isb	sy
 8008a9a:	f3bf 8f4f 	dsb	sy
 8008a9e:	623b      	str	r3, [r7, #32]
 8008aa0:	e7fe      	b.n	8008aa0 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8008aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d109      	bne.n	8008abc <xTaskCreateStatic+0x42>
 8008aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aac:	f383 8811 	msr	BASEPRI, r3
 8008ab0:	f3bf 8f6f 	isb	sy
 8008ab4:	f3bf 8f4f 	dsb	sy
 8008ab8:	61fb      	str	r3, [r7, #28]
 8008aba:	e7fe      	b.n	8008aba <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008abc:	2358      	movs	r3, #88	; 0x58
 8008abe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	2b58      	cmp	r3, #88	; 0x58
 8008ac4:	d009      	beq.n	8008ada <xTaskCreateStatic+0x60>
 8008ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aca:	f383 8811 	msr	BASEPRI, r3
 8008ace:	f3bf 8f6f 	isb	sy
 8008ad2:	f3bf 8f4f 	dsb	sy
 8008ad6:	61bb      	str	r3, [r7, #24]
 8008ad8:	e7fe      	b.n	8008ad8 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d01e      	beq.n	8008b1e <xTaskCreateStatic+0xa4>
 8008ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d01b      	beq.n	8008b1e <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008aee:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af2:	2202      	movs	r2, #2
 8008af4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008af8:	2300      	movs	r3, #0
 8008afa:	9303      	str	r3, [sp, #12]
 8008afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afe:	9302      	str	r3, [sp, #8]
 8008b00:	f107 0314 	add.w	r3, r7, #20
 8008b04:	9301      	str	r3, [sp, #4]
 8008b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b08:	9300      	str	r3, [sp, #0]
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	68b9      	ldr	r1, [r7, #8]
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	f000 f850 	bl	8008bb6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b18:	f000 f8d6 	bl	8008cc8 <prvAddNewTaskToReadyList>
 8008b1c:	e001      	b.n	8008b22 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008b22:	697b      	ldr	r3, [r7, #20]
	}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3728      	adds	r7, #40	; 0x28
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b08c      	sub	sp, #48	; 0x30
 8008b30:	af04      	add	r7, sp, #16
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	60b9      	str	r1, [r7, #8]
 8008b36:	603b      	str	r3, [r7, #0]
 8008b38:	4613      	mov	r3, r2
 8008b3a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b3c:	88fb      	ldrh	r3, [r7, #6]
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	4618      	mov	r0, r3
 8008b42:	f001 f8cd 	bl	8009ce0 <pvPortMalloc>
 8008b46:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00e      	beq.n	8008b6c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008b4e:	2058      	movs	r0, #88	; 0x58
 8008b50:	f001 f8c6 	bl	8009ce0 <pvPortMalloc>
 8008b54:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d003      	beq.n	8008b64 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	697a      	ldr	r2, [r7, #20]
 8008b60:	631a      	str	r2, [r3, #48]	; 0x30
 8008b62:	e005      	b.n	8008b70 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008b64:	6978      	ldr	r0, [r7, #20]
 8008b66:	f001 f981 	bl	8009e6c <vPortFree>
 8008b6a:	e001      	b.n	8008b70 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d017      	beq.n	8008ba6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b7e:	88fa      	ldrh	r2, [r7, #6]
 8008b80:	2300      	movs	r3, #0
 8008b82:	9303      	str	r3, [sp, #12]
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	9302      	str	r3, [sp, #8]
 8008b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8a:	9301      	str	r3, [sp, #4]
 8008b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8e:	9300      	str	r3, [sp, #0]
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	68b9      	ldr	r1, [r7, #8]
 8008b94:	68f8      	ldr	r0, [r7, #12]
 8008b96:	f000 f80e 	bl	8008bb6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b9a:	69f8      	ldr	r0, [r7, #28]
 8008b9c:	f000 f894 	bl	8008cc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	61bb      	str	r3, [r7, #24]
 8008ba4:	e002      	b.n	8008bac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8008baa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008bac:	69bb      	ldr	r3, [r7, #24]
	}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3720      	adds	r7, #32
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b088      	sub	sp, #32
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	60f8      	str	r0, [r7, #12]
 8008bbe:	60b9      	str	r1, [r7, #8]
 8008bc0:	607a      	str	r2, [r7, #4]
 8008bc2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	461a      	mov	r2, r3
 8008bce:	21a5      	movs	r1, #165	; 0xa5
 8008bd0:	f002 fe4b 	bl	800b86a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008bde:	3b01      	subs	r3, #1
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	4413      	add	r3, r2
 8008be4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	f023 0307 	bic.w	r3, r3, #7
 8008bec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008bee:	69bb      	ldr	r3, [r7, #24]
 8008bf0:	f003 0307 	and.w	r3, r3, #7
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d009      	beq.n	8008c0c <prvInitialiseNewTask+0x56>
 8008bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfc:	f383 8811 	msr	BASEPRI, r3
 8008c00:	f3bf 8f6f 	isb	sy
 8008c04:	f3bf 8f4f 	dsb	sy
 8008c08:	617b      	str	r3, [r7, #20]
 8008c0a:	e7fe      	b.n	8008c0a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	61fb      	str	r3, [r7, #28]
 8008c10:	e012      	b.n	8008c38 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c12:	68ba      	ldr	r2, [r7, #8]
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	4413      	add	r3, r2
 8008c18:	7819      	ldrb	r1, [r3, #0]
 8008c1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	4413      	add	r3, r2
 8008c20:	3334      	adds	r3, #52	; 0x34
 8008c22:	460a      	mov	r2, r1
 8008c24:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008c26:	68ba      	ldr	r2, [r7, #8]
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d006      	beq.n	8008c40 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	3301      	adds	r3, #1
 8008c36:	61fb      	str	r3, [r7, #28]
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	2b0f      	cmp	r3, #15
 8008c3c:	d9e9      	bls.n	8008c12 <prvInitialiseNewTask+0x5c>
 8008c3e:	e000      	b.n	8008c42 <prvInitialiseNewTask+0x8c>
		{
			break;
 8008c40:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c44:	2200      	movs	r2, #0
 8008c46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4c:	2b06      	cmp	r3, #6
 8008c4e:	d901      	bls.n	8008c54 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008c50:	2306      	movs	r3, #6
 8008c52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c5e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c62:	2200      	movs	r2, #0
 8008c64:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c68:	3304      	adds	r3, #4
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7ff f944 	bl	8007ef8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c72:	3318      	adds	r3, #24
 8008c74:	4618      	mov	r0, r3
 8008c76:	f7ff f93f 	bl	8007ef8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c82:	f1c3 0207 	rsb	r2, r3, #7
 8008c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8008c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c92:	2200      	movs	r2, #0
 8008c94:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c98:	2200      	movs	r2, #0
 8008c9a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008ca4:	683a      	ldr	r2, [r7, #0]
 8008ca6:	68f9      	ldr	r1, [r7, #12]
 8008ca8:	69b8      	ldr	r0, [r7, #24]
 8008caa:	f000 fdd9 	bl	8009860 <pxPortInitialiseStack>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d002      	beq.n	8008cc0 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cbe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cc0:	bf00      	nop
 8008cc2:	3720      	adds	r7, #32
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008cd0:	f000 feec 	bl	8009aac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008cd4:	4b2a      	ldr	r3, [pc, #168]	; (8008d80 <prvAddNewTaskToReadyList+0xb8>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	3301      	adds	r3, #1
 8008cda:	4a29      	ldr	r2, [pc, #164]	; (8008d80 <prvAddNewTaskToReadyList+0xb8>)
 8008cdc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008cde:	4b29      	ldr	r3, [pc, #164]	; (8008d84 <prvAddNewTaskToReadyList+0xbc>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d109      	bne.n	8008cfa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008ce6:	4a27      	ldr	r2, [pc, #156]	; (8008d84 <prvAddNewTaskToReadyList+0xbc>)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008cec:	4b24      	ldr	r3, [pc, #144]	; (8008d80 <prvAddNewTaskToReadyList+0xb8>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d110      	bne.n	8008d16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008cf4:	f000 fbec 	bl	80094d0 <prvInitialiseTaskLists>
 8008cf8:	e00d      	b.n	8008d16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008cfa:	4b23      	ldr	r3, [pc, #140]	; (8008d88 <prvAddNewTaskToReadyList+0xc0>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d109      	bne.n	8008d16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008d02:	4b20      	ldr	r3, [pc, #128]	; (8008d84 <prvAddNewTaskToReadyList+0xbc>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d802      	bhi.n	8008d16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008d10:	4a1c      	ldr	r2, [pc, #112]	; (8008d84 <prvAddNewTaskToReadyList+0xbc>)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008d16:	4b1d      	ldr	r3, [pc, #116]	; (8008d8c <prvAddNewTaskToReadyList+0xc4>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	4a1b      	ldr	r2, [pc, #108]	; (8008d8c <prvAddNewTaskToReadyList+0xc4>)
 8008d1e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d24:	2201      	movs	r2, #1
 8008d26:	409a      	lsls	r2, r3
 8008d28:	4b19      	ldr	r3, [pc, #100]	; (8008d90 <prvAddNewTaskToReadyList+0xc8>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	4a18      	ldr	r2, [pc, #96]	; (8008d90 <prvAddNewTaskToReadyList+0xc8>)
 8008d30:	6013      	str	r3, [r2, #0]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d36:	4613      	mov	r3, r2
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	4413      	add	r3, r2
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	4a15      	ldr	r2, [pc, #84]	; (8008d94 <prvAddNewTaskToReadyList+0xcc>)
 8008d40:	441a      	add	r2, r3
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	3304      	adds	r3, #4
 8008d46:	4619      	mov	r1, r3
 8008d48:	4610      	mov	r0, r2
 8008d4a:	f7ff f8e2 	bl	8007f12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008d4e:	f000 fedb 	bl	8009b08 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008d52:	4b0d      	ldr	r3, [pc, #52]	; (8008d88 <prvAddNewTaskToReadyList+0xc0>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00e      	beq.n	8008d78 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008d5a:	4b0a      	ldr	r3, [pc, #40]	; (8008d84 <prvAddNewTaskToReadyList+0xbc>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d207      	bcs.n	8008d78 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008d68:	4b0b      	ldr	r3, [pc, #44]	; (8008d98 <prvAddNewTaskToReadyList+0xd0>)
 8008d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d6e:	601a      	str	r2, [r3, #0]
 8008d70:	f3bf 8f4f 	dsb	sy
 8008d74:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d78:	bf00      	nop
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	200001b0 	.word	0x200001b0
 8008d84:	200000b0 	.word	0x200000b0
 8008d88:	200001bc 	.word	0x200001bc
 8008d8c:	200001cc 	.word	0x200001cc
 8008d90:	200001b8 	.word	0x200001b8
 8008d94:	200000b4 	.word	0x200000b4
 8008d98:	e000ed04 	.word	0xe000ed04

08008d9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008da4:	2300      	movs	r3, #0
 8008da6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d016      	beq.n	8008ddc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008dae:	4b13      	ldr	r3, [pc, #76]	; (8008dfc <vTaskDelay+0x60>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d009      	beq.n	8008dca <vTaskDelay+0x2e>
 8008db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dba:	f383 8811 	msr	BASEPRI, r3
 8008dbe:	f3bf 8f6f 	isb	sy
 8008dc2:	f3bf 8f4f 	dsb	sy
 8008dc6:	60bb      	str	r3, [r7, #8]
 8008dc8:	e7fe      	b.n	8008dc8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8008dca:	f000 f879 	bl	8008ec0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008dce:	2100      	movs	r1, #0
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 fcdf 	bl	8009794 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008dd6:	f000 f881 	bl	8008edc <xTaskResumeAll>
 8008dda:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d107      	bne.n	8008df2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8008de2:	4b07      	ldr	r3, [pc, #28]	; (8008e00 <vTaskDelay+0x64>)
 8008de4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008de8:	601a      	str	r2, [r3, #0]
 8008dea:	f3bf 8f4f 	dsb	sy
 8008dee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008df2:	bf00      	nop
 8008df4:	3710      	adds	r7, #16
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	bf00      	nop
 8008dfc:	200001d8 	.word	0x200001d8
 8008e00:	e000ed04 	.word	0xe000ed04

08008e04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b08a      	sub	sp, #40	; 0x28
 8008e08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008e12:	463a      	mov	r2, r7
 8008e14:	1d39      	adds	r1, r7, #4
 8008e16:	f107 0308 	add.w	r3, r7, #8
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f001 fad0 	bl	800a3c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008e20:	6839      	ldr	r1, [r7, #0]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	68ba      	ldr	r2, [r7, #8]
 8008e26:	9202      	str	r2, [sp, #8]
 8008e28:	9301      	str	r3, [sp, #4]
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	9300      	str	r3, [sp, #0]
 8008e2e:	2300      	movs	r3, #0
 8008e30:	460a      	mov	r2, r1
 8008e32:	491d      	ldr	r1, [pc, #116]	; (8008ea8 <vTaskStartScheduler+0xa4>)
 8008e34:	481d      	ldr	r0, [pc, #116]	; (8008eac <vTaskStartScheduler+0xa8>)
 8008e36:	f7ff fe20 	bl	8008a7a <xTaskCreateStatic>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	4b1c      	ldr	r3, [pc, #112]	; (8008eb0 <vTaskStartScheduler+0xac>)
 8008e3e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008e40:	4b1b      	ldr	r3, [pc, #108]	; (8008eb0 <vTaskStartScheduler+0xac>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d002      	beq.n	8008e4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	617b      	str	r3, [r7, #20]
 8008e4c:	e001      	b.n	8008e52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d115      	bne.n	8008e84 <vTaskStartScheduler+0x80>
 8008e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5c:	f383 8811 	msr	BASEPRI, r3
 8008e60:	f3bf 8f6f 	isb	sy
 8008e64:	f3bf 8f4f 	dsb	sy
 8008e68:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008e6a:	4b12      	ldr	r3, [pc, #72]	; (8008eb4 <vTaskStartScheduler+0xb0>)
 8008e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e70:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008e72:	4b11      	ldr	r3, [pc, #68]	; (8008eb8 <vTaskStartScheduler+0xb4>)
 8008e74:	2201      	movs	r2, #1
 8008e76:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008e78:	4b10      	ldr	r3, [pc, #64]	; (8008ebc <vTaskStartScheduler+0xb8>)
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008e7e:	f000 fd77 	bl	8009970 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008e82:	e00d      	b.n	8008ea0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e8a:	d109      	bne.n	8008ea0 <vTaskStartScheduler+0x9c>
 8008e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e90:	f383 8811 	msr	BASEPRI, r3
 8008e94:	f3bf 8f6f 	isb	sy
 8008e98:	f3bf 8f4f 	dsb	sy
 8008e9c:	60fb      	str	r3, [r7, #12]
 8008e9e:	e7fe      	b.n	8008e9e <vTaskStartScheduler+0x9a>
}
 8008ea0:	bf00      	nop
 8008ea2:	3718      	adds	r7, #24
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	0800ba44 	.word	0x0800ba44
 8008eac:	0800949d 	.word	0x0800949d
 8008eb0:	200001d4 	.word	0x200001d4
 8008eb4:	200001d0 	.word	0x200001d0
 8008eb8:	200001bc 	.word	0x200001bc
 8008ebc:	200001b4 	.word	0x200001b4

08008ec0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008ec4:	4b04      	ldr	r3, [pc, #16]	; (8008ed8 <vTaskSuspendAll+0x18>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	4a03      	ldr	r2, [pc, #12]	; (8008ed8 <vTaskSuspendAll+0x18>)
 8008ecc:	6013      	str	r3, [r2, #0]
}
 8008ece:	bf00      	nop
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr
 8008ed8:	200001d8 	.word	0x200001d8

08008edc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008eea:	4b41      	ldr	r3, [pc, #260]	; (8008ff0 <xTaskResumeAll+0x114>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d109      	bne.n	8008f06 <xTaskResumeAll+0x2a>
 8008ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef6:	f383 8811 	msr	BASEPRI, r3
 8008efa:	f3bf 8f6f 	isb	sy
 8008efe:	f3bf 8f4f 	dsb	sy
 8008f02:	603b      	str	r3, [r7, #0]
 8008f04:	e7fe      	b.n	8008f04 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008f06:	f000 fdd1 	bl	8009aac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008f0a:	4b39      	ldr	r3, [pc, #228]	; (8008ff0 <xTaskResumeAll+0x114>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	3b01      	subs	r3, #1
 8008f10:	4a37      	ldr	r2, [pc, #220]	; (8008ff0 <xTaskResumeAll+0x114>)
 8008f12:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f14:	4b36      	ldr	r3, [pc, #216]	; (8008ff0 <xTaskResumeAll+0x114>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d161      	bne.n	8008fe0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008f1c:	4b35      	ldr	r3, [pc, #212]	; (8008ff4 <xTaskResumeAll+0x118>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d05d      	beq.n	8008fe0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f24:	e02e      	b.n	8008f84 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008f26:	4b34      	ldr	r3, [pc, #208]	; (8008ff8 <xTaskResumeAll+0x11c>)
 8008f28:	68db      	ldr	r3, [r3, #12]
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	3318      	adds	r3, #24
 8008f32:	4618      	mov	r0, r3
 8008f34:	f7ff f84a 	bl	8007fcc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	3304      	adds	r3, #4
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f7ff f845 	bl	8007fcc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f46:	2201      	movs	r2, #1
 8008f48:	409a      	lsls	r2, r3
 8008f4a:	4b2c      	ldr	r3, [pc, #176]	; (8008ffc <xTaskResumeAll+0x120>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	4a2a      	ldr	r2, [pc, #168]	; (8008ffc <xTaskResumeAll+0x120>)
 8008f52:	6013      	str	r3, [r2, #0]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f58:	4613      	mov	r3, r2
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	4413      	add	r3, r2
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	4a27      	ldr	r2, [pc, #156]	; (8009000 <xTaskResumeAll+0x124>)
 8008f62:	441a      	add	r2, r3
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	3304      	adds	r3, #4
 8008f68:	4619      	mov	r1, r3
 8008f6a:	4610      	mov	r0, r2
 8008f6c:	f7fe ffd1 	bl	8007f12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f74:	4b23      	ldr	r3, [pc, #140]	; (8009004 <xTaskResumeAll+0x128>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d302      	bcc.n	8008f84 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8008f7e:	4b22      	ldr	r3, [pc, #136]	; (8009008 <xTaskResumeAll+0x12c>)
 8008f80:	2201      	movs	r2, #1
 8008f82:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f84:	4b1c      	ldr	r3, [pc, #112]	; (8008ff8 <xTaskResumeAll+0x11c>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d1cc      	bne.n	8008f26 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d001      	beq.n	8008f96 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008f92:	f000 fb37 	bl	8009604 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008f96:	4b1d      	ldr	r3, [pc, #116]	; (800900c <xTaskResumeAll+0x130>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d010      	beq.n	8008fc4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008fa2:	f000 f837 	bl	8009014 <xTaskIncrementTick>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d002      	beq.n	8008fb2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8008fac:	4b16      	ldr	r3, [pc, #88]	; (8009008 <xTaskResumeAll+0x12c>)
 8008fae:	2201      	movs	r2, #1
 8008fb0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	3b01      	subs	r3, #1
 8008fb6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d1f1      	bne.n	8008fa2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8008fbe:	4b13      	ldr	r3, [pc, #76]	; (800900c <xTaskResumeAll+0x130>)
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008fc4:	4b10      	ldr	r3, [pc, #64]	; (8009008 <xTaskResumeAll+0x12c>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d009      	beq.n	8008fe0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008fd0:	4b0f      	ldr	r3, [pc, #60]	; (8009010 <xTaskResumeAll+0x134>)
 8008fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fd6:	601a      	str	r2, [r3, #0]
 8008fd8:	f3bf 8f4f 	dsb	sy
 8008fdc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008fe0:	f000 fd92 	bl	8009b08 <vPortExitCritical>

	return xAlreadyYielded;
 8008fe4:	68bb      	ldr	r3, [r7, #8]
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3710      	adds	r7, #16
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	200001d8 	.word	0x200001d8
 8008ff4:	200001b0 	.word	0x200001b0
 8008ff8:	20000170 	.word	0x20000170
 8008ffc:	200001b8 	.word	0x200001b8
 8009000:	200000b4 	.word	0x200000b4
 8009004:	200000b0 	.word	0x200000b0
 8009008:	200001c4 	.word	0x200001c4
 800900c:	200001c0 	.word	0x200001c0
 8009010:	e000ed04 	.word	0xe000ed04

08009014 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b086      	sub	sp, #24
 8009018:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800901a:	2300      	movs	r3, #0
 800901c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800901e:	4b50      	ldr	r3, [pc, #320]	; (8009160 <xTaskIncrementTick+0x14c>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2b00      	cmp	r3, #0
 8009024:	f040 808c 	bne.w	8009140 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009028:	4b4e      	ldr	r3, [pc, #312]	; (8009164 <xTaskIncrementTick+0x150>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	3301      	adds	r3, #1
 800902e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009030:	4a4c      	ldr	r2, [pc, #304]	; (8009164 <xTaskIncrementTick+0x150>)
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d11f      	bne.n	800907c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800903c:	4b4a      	ldr	r3, [pc, #296]	; (8009168 <xTaskIncrementTick+0x154>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d009      	beq.n	800905a <xTaskIncrementTick+0x46>
 8009046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904a:	f383 8811 	msr	BASEPRI, r3
 800904e:	f3bf 8f6f 	isb	sy
 8009052:	f3bf 8f4f 	dsb	sy
 8009056:	603b      	str	r3, [r7, #0]
 8009058:	e7fe      	b.n	8009058 <xTaskIncrementTick+0x44>
 800905a:	4b43      	ldr	r3, [pc, #268]	; (8009168 <xTaskIncrementTick+0x154>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	60fb      	str	r3, [r7, #12]
 8009060:	4b42      	ldr	r3, [pc, #264]	; (800916c <xTaskIncrementTick+0x158>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a40      	ldr	r2, [pc, #256]	; (8009168 <xTaskIncrementTick+0x154>)
 8009066:	6013      	str	r3, [r2, #0]
 8009068:	4a40      	ldr	r2, [pc, #256]	; (800916c <xTaskIncrementTick+0x158>)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6013      	str	r3, [r2, #0]
 800906e:	4b40      	ldr	r3, [pc, #256]	; (8009170 <xTaskIncrementTick+0x15c>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	3301      	adds	r3, #1
 8009074:	4a3e      	ldr	r2, [pc, #248]	; (8009170 <xTaskIncrementTick+0x15c>)
 8009076:	6013      	str	r3, [r2, #0]
 8009078:	f000 fac4 	bl	8009604 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800907c:	4b3d      	ldr	r3, [pc, #244]	; (8009174 <xTaskIncrementTick+0x160>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	693a      	ldr	r2, [r7, #16]
 8009082:	429a      	cmp	r2, r3
 8009084:	d34d      	bcc.n	8009122 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009086:	4b38      	ldr	r3, [pc, #224]	; (8009168 <xTaskIncrementTick+0x154>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d101      	bne.n	8009094 <xTaskIncrementTick+0x80>
 8009090:	2301      	movs	r3, #1
 8009092:	e000      	b.n	8009096 <xTaskIncrementTick+0x82>
 8009094:	2300      	movs	r3, #0
 8009096:	2b00      	cmp	r3, #0
 8009098:	d004      	beq.n	80090a4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800909a:	4b36      	ldr	r3, [pc, #216]	; (8009174 <xTaskIncrementTick+0x160>)
 800909c:	f04f 32ff 	mov.w	r2, #4294967295
 80090a0:	601a      	str	r2, [r3, #0]
					break;
 80090a2:	e03e      	b.n	8009122 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80090a4:	4b30      	ldr	r3, [pc, #192]	; (8009168 <xTaskIncrementTick+0x154>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80090b4:	693a      	ldr	r2, [r7, #16]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d203      	bcs.n	80090c4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80090bc:	4a2d      	ldr	r2, [pc, #180]	; (8009174 <xTaskIncrementTick+0x160>)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6013      	str	r3, [r2, #0]
						break;
 80090c2:	e02e      	b.n	8009122 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	3304      	adds	r3, #4
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7fe ff7f 	bl	8007fcc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d004      	beq.n	80090e0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	3318      	adds	r3, #24
 80090da:	4618      	mov	r0, r3
 80090dc:	f7fe ff76 	bl	8007fcc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e4:	2201      	movs	r2, #1
 80090e6:	409a      	lsls	r2, r3
 80090e8:	4b23      	ldr	r3, [pc, #140]	; (8009178 <xTaskIncrementTick+0x164>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	4a22      	ldr	r2, [pc, #136]	; (8009178 <xTaskIncrementTick+0x164>)
 80090f0:	6013      	str	r3, [r2, #0]
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090f6:	4613      	mov	r3, r2
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	4413      	add	r3, r2
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	4a1f      	ldr	r2, [pc, #124]	; (800917c <xTaskIncrementTick+0x168>)
 8009100:	441a      	add	r2, r3
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	3304      	adds	r3, #4
 8009106:	4619      	mov	r1, r3
 8009108:	4610      	mov	r0, r2
 800910a:	f7fe ff02 	bl	8007f12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009112:	4b1b      	ldr	r3, [pc, #108]	; (8009180 <xTaskIncrementTick+0x16c>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009118:	429a      	cmp	r2, r3
 800911a:	d3b4      	bcc.n	8009086 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800911c:	2301      	movs	r3, #1
 800911e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009120:	e7b1      	b.n	8009086 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009122:	4b17      	ldr	r3, [pc, #92]	; (8009180 <xTaskIncrementTick+0x16c>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009128:	4914      	ldr	r1, [pc, #80]	; (800917c <xTaskIncrementTick+0x168>)
 800912a:	4613      	mov	r3, r2
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	4413      	add	r3, r2
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	440b      	add	r3, r1
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	2b01      	cmp	r3, #1
 8009138:	d907      	bls.n	800914a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800913a:	2301      	movs	r3, #1
 800913c:	617b      	str	r3, [r7, #20]
 800913e:	e004      	b.n	800914a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009140:	4b10      	ldr	r3, [pc, #64]	; (8009184 <xTaskIncrementTick+0x170>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	3301      	adds	r3, #1
 8009146:	4a0f      	ldr	r2, [pc, #60]	; (8009184 <xTaskIncrementTick+0x170>)
 8009148:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800914a:	4b0f      	ldr	r3, [pc, #60]	; (8009188 <xTaskIncrementTick+0x174>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d001      	beq.n	8009156 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8009152:	2301      	movs	r3, #1
 8009154:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009156:	697b      	ldr	r3, [r7, #20]
}
 8009158:	4618      	mov	r0, r3
 800915a:	3718      	adds	r7, #24
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}
 8009160:	200001d8 	.word	0x200001d8
 8009164:	200001b4 	.word	0x200001b4
 8009168:	20000168 	.word	0x20000168
 800916c:	2000016c 	.word	0x2000016c
 8009170:	200001c8 	.word	0x200001c8
 8009174:	200001d0 	.word	0x200001d0
 8009178:	200001b8 	.word	0x200001b8
 800917c:	200000b4 	.word	0x200000b4
 8009180:	200000b0 	.word	0x200000b0
 8009184:	200001c0 	.word	0x200001c0
 8009188:	200001c4 	.word	0x200001c4

0800918c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b088      	sub	sp, #32
 8009190:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009192:	4b39      	ldr	r3, [pc, #228]	; (8009278 <vTaskSwitchContext+0xec>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d003      	beq.n	80091a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800919a:	4b38      	ldr	r3, [pc, #224]	; (800927c <vTaskSwitchContext+0xf0>)
 800919c:	2201      	movs	r2, #1
 800919e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80091a0:	e065      	b.n	800926e <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 80091a2:	4b36      	ldr	r3, [pc, #216]	; (800927c <vTaskSwitchContext+0xf0>)
 80091a4:	2200      	movs	r2, #0
 80091a6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80091a8:	4b35      	ldr	r3, [pc, #212]	; (8009280 <vTaskSwitchContext+0xf4>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ae:	61fb      	str	r3, [r7, #28]
 80091b0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80091b4:	61bb      	str	r3, [r7, #24]
 80091b6:	69fb      	ldr	r3, [r7, #28]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	69ba      	ldr	r2, [r7, #24]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d111      	bne.n	80091e4 <vTaskSwitchContext+0x58>
 80091c0:	69fb      	ldr	r3, [r7, #28]
 80091c2:	3304      	adds	r3, #4
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	69ba      	ldr	r2, [r7, #24]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d10b      	bne.n	80091e4 <vTaskSwitchContext+0x58>
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	3308      	adds	r3, #8
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	69ba      	ldr	r2, [r7, #24]
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d105      	bne.n	80091e4 <vTaskSwitchContext+0x58>
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	330c      	adds	r3, #12
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	69ba      	ldr	r2, [r7, #24]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d008      	beq.n	80091f6 <vTaskSwitchContext+0x6a>
 80091e4:	4b26      	ldr	r3, [pc, #152]	; (8009280 <vTaskSwitchContext+0xf4>)
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	4b25      	ldr	r3, [pc, #148]	; (8009280 <vTaskSwitchContext+0xf4>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	3334      	adds	r3, #52	; 0x34
 80091ee:	4619      	mov	r1, r3
 80091f0:	4610      	mov	r0, r2
 80091f2:	f001 f8d2 	bl	800a39a <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80091f6:	4b23      	ldr	r3, [pc, #140]	; (8009284 <vTaskSwitchContext+0xf8>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	fab3 f383 	clz	r3, r3
 8009202:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009204:	7afb      	ldrb	r3, [r7, #11]
 8009206:	f1c3 031f 	rsb	r3, r3, #31
 800920a:	617b      	str	r3, [r7, #20]
 800920c:	491e      	ldr	r1, [pc, #120]	; (8009288 <vTaskSwitchContext+0xfc>)
 800920e:	697a      	ldr	r2, [r7, #20]
 8009210:	4613      	mov	r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	4413      	add	r3, r2
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	440b      	add	r3, r1
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d109      	bne.n	8009234 <vTaskSwitchContext+0xa8>
	__asm volatile
 8009220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009224:	f383 8811 	msr	BASEPRI, r3
 8009228:	f3bf 8f6f 	isb	sy
 800922c:	f3bf 8f4f 	dsb	sy
 8009230:	607b      	str	r3, [r7, #4]
 8009232:	e7fe      	b.n	8009232 <vTaskSwitchContext+0xa6>
 8009234:	697a      	ldr	r2, [r7, #20]
 8009236:	4613      	mov	r3, r2
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	4413      	add	r3, r2
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	4a12      	ldr	r2, [pc, #72]	; (8009288 <vTaskSwitchContext+0xfc>)
 8009240:	4413      	add	r3, r2
 8009242:	613b      	str	r3, [r7, #16]
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	685a      	ldr	r2, [r3, #4]
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	605a      	str	r2, [r3, #4]
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	685a      	ldr	r2, [r3, #4]
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	3308      	adds	r3, #8
 8009256:	429a      	cmp	r2, r3
 8009258:	d104      	bne.n	8009264 <vTaskSwitchContext+0xd8>
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	685a      	ldr	r2, [r3, #4]
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	605a      	str	r2, [r3, #4]
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	4a05      	ldr	r2, [pc, #20]	; (8009280 <vTaskSwitchContext+0xf4>)
 800926c:	6013      	str	r3, [r2, #0]
}
 800926e:	bf00      	nop
 8009270:	3720      	adds	r7, #32
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	200001d8 	.word	0x200001d8
 800927c:	200001c4 	.word	0x200001c4
 8009280:	200000b0 	.word	0x200000b0
 8009284:	200001b8 	.word	0x200001b8
 8009288:	200000b4 	.word	0x200000b4

0800928c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d109      	bne.n	80092b0 <vTaskPlaceOnEventList+0x24>
 800929c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a0:	f383 8811 	msr	BASEPRI, r3
 80092a4:	f3bf 8f6f 	isb	sy
 80092a8:	f3bf 8f4f 	dsb	sy
 80092ac:	60fb      	str	r3, [r7, #12]
 80092ae:	e7fe      	b.n	80092ae <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80092b0:	4b07      	ldr	r3, [pc, #28]	; (80092d0 <vTaskPlaceOnEventList+0x44>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	3318      	adds	r3, #24
 80092b6:	4619      	mov	r1, r3
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f7fe fe4e 	bl	8007f5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80092be:	2101      	movs	r1, #1
 80092c0:	6838      	ldr	r0, [r7, #0]
 80092c2:	f000 fa67 	bl	8009794 <prvAddCurrentTaskToDelayedList>
}
 80092c6:	bf00      	nop
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	200000b0 	.word	0x200000b0

080092d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b086      	sub	sp, #24
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	68db      	ldr	r3, [r3, #12]
 80092e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d109      	bne.n	80092fe <xTaskRemoveFromEventList+0x2a>
 80092ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ee:	f383 8811 	msr	BASEPRI, r3
 80092f2:	f3bf 8f6f 	isb	sy
 80092f6:	f3bf 8f4f 	dsb	sy
 80092fa:	60fb      	str	r3, [r7, #12]
 80092fc:	e7fe      	b.n	80092fc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	3318      	adds	r3, #24
 8009302:	4618      	mov	r0, r3
 8009304:	f7fe fe62 	bl	8007fcc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009308:	4b1d      	ldr	r3, [pc, #116]	; (8009380 <xTaskRemoveFromEventList+0xac>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d11c      	bne.n	800934a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	3304      	adds	r3, #4
 8009314:	4618      	mov	r0, r3
 8009316:	f7fe fe59 	bl	8007fcc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800931e:	2201      	movs	r2, #1
 8009320:	409a      	lsls	r2, r3
 8009322:	4b18      	ldr	r3, [pc, #96]	; (8009384 <xTaskRemoveFromEventList+0xb0>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4313      	orrs	r3, r2
 8009328:	4a16      	ldr	r2, [pc, #88]	; (8009384 <xTaskRemoveFromEventList+0xb0>)
 800932a:	6013      	str	r3, [r2, #0]
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009330:	4613      	mov	r3, r2
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	4413      	add	r3, r2
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	4a13      	ldr	r2, [pc, #76]	; (8009388 <xTaskRemoveFromEventList+0xb4>)
 800933a:	441a      	add	r2, r3
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	3304      	adds	r3, #4
 8009340:	4619      	mov	r1, r3
 8009342:	4610      	mov	r0, r2
 8009344:	f7fe fde5 	bl	8007f12 <vListInsertEnd>
 8009348:	e005      	b.n	8009356 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	3318      	adds	r3, #24
 800934e:	4619      	mov	r1, r3
 8009350:	480e      	ldr	r0, [pc, #56]	; (800938c <xTaskRemoveFromEventList+0xb8>)
 8009352:	f7fe fdde 	bl	8007f12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800935a:	4b0d      	ldr	r3, [pc, #52]	; (8009390 <xTaskRemoveFromEventList+0xbc>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009360:	429a      	cmp	r2, r3
 8009362:	d905      	bls.n	8009370 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009364:	2301      	movs	r3, #1
 8009366:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009368:	4b0a      	ldr	r3, [pc, #40]	; (8009394 <xTaskRemoveFromEventList+0xc0>)
 800936a:	2201      	movs	r2, #1
 800936c:	601a      	str	r2, [r3, #0]
 800936e:	e001      	b.n	8009374 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8009370:	2300      	movs	r3, #0
 8009372:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009374:	697b      	ldr	r3, [r7, #20]
}
 8009376:	4618      	mov	r0, r3
 8009378:	3718      	adds	r7, #24
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	200001d8 	.word	0x200001d8
 8009384:	200001b8 	.word	0x200001b8
 8009388:	200000b4 	.word	0x200000b4
 800938c:	20000170 	.word	0x20000170
 8009390:	200000b0 	.word	0x200000b0
 8009394:	200001c4 	.word	0x200001c4

08009398 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80093a0:	4b06      	ldr	r3, [pc, #24]	; (80093bc <vTaskInternalSetTimeOutState+0x24>)
 80093a2:	681a      	ldr	r2, [r3, #0]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80093a8:	4b05      	ldr	r3, [pc, #20]	; (80093c0 <vTaskInternalSetTimeOutState+0x28>)
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	605a      	str	r2, [r3, #4]
}
 80093b0:	bf00      	nop
 80093b2:	370c      	adds	r7, #12
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr
 80093bc:	200001c8 	.word	0x200001c8
 80093c0:	200001b4 	.word	0x200001b4

080093c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b088      	sub	sp, #32
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d109      	bne.n	80093e8 <xTaskCheckForTimeOut+0x24>
 80093d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d8:	f383 8811 	msr	BASEPRI, r3
 80093dc:	f3bf 8f6f 	isb	sy
 80093e0:	f3bf 8f4f 	dsb	sy
 80093e4:	613b      	str	r3, [r7, #16]
 80093e6:	e7fe      	b.n	80093e6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d109      	bne.n	8009402 <xTaskCheckForTimeOut+0x3e>
 80093ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f2:	f383 8811 	msr	BASEPRI, r3
 80093f6:	f3bf 8f6f 	isb	sy
 80093fa:	f3bf 8f4f 	dsb	sy
 80093fe:	60fb      	str	r3, [r7, #12]
 8009400:	e7fe      	b.n	8009400 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8009402:	f000 fb53 	bl	8009aac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009406:	4b1d      	ldr	r3, [pc, #116]	; (800947c <xTaskCheckForTimeOut+0xb8>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	69ba      	ldr	r2, [r7, #24]
 8009412:	1ad3      	subs	r3, r2, r3
 8009414:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800941e:	d102      	bne.n	8009426 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009420:	2300      	movs	r3, #0
 8009422:	61fb      	str	r3, [r7, #28]
 8009424:	e023      	b.n	800946e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	4b15      	ldr	r3, [pc, #84]	; (8009480 <xTaskCheckForTimeOut+0xbc>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	429a      	cmp	r2, r3
 8009430:	d007      	beq.n	8009442 <xTaskCheckForTimeOut+0x7e>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	69ba      	ldr	r2, [r7, #24]
 8009438:	429a      	cmp	r2, r3
 800943a:	d302      	bcc.n	8009442 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800943c:	2301      	movs	r3, #1
 800943e:	61fb      	str	r3, [r7, #28]
 8009440:	e015      	b.n	800946e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	697a      	ldr	r2, [r7, #20]
 8009448:	429a      	cmp	r2, r3
 800944a:	d20b      	bcs.n	8009464 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	1ad2      	subs	r2, r2, r3
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f7ff ff9d 	bl	8009398 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800945e:	2300      	movs	r3, #0
 8009460:	61fb      	str	r3, [r7, #28]
 8009462:	e004      	b.n	800946e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	2200      	movs	r2, #0
 8009468:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800946a:	2301      	movs	r3, #1
 800946c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800946e:	f000 fb4b 	bl	8009b08 <vPortExitCritical>

	return xReturn;
 8009472:	69fb      	ldr	r3, [r7, #28]
}
 8009474:	4618      	mov	r0, r3
 8009476:	3720      	adds	r7, #32
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}
 800947c:	200001b4 	.word	0x200001b4
 8009480:	200001c8 	.word	0x200001c8

08009484 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009484:	b480      	push	{r7}
 8009486:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009488:	4b03      	ldr	r3, [pc, #12]	; (8009498 <vTaskMissedYield+0x14>)
 800948a:	2201      	movs	r2, #1
 800948c:	601a      	str	r2, [r3, #0]
}
 800948e:	bf00      	nop
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr
 8009498:	200001c4 	.word	0x200001c4

0800949c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80094a4:	f000 f854 	bl	8009550 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80094a8:	4b07      	ldr	r3, [pc, #28]	; (80094c8 <prvIdleTask+0x2c>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d907      	bls.n	80094c0 <prvIdleTask+0x24>
			{
				taskYIELD();
 80094b0:	4b06      	ldr	r3, [pc, #24]	; (80094cc <prvIdleTask+0x30>)
 80094b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094b6:	601a      	str	r2, [r3, #0]
 80094b8:	f3bf 8f4f 	dsb	sy
 80094bc:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80094c0:	f000 ff64 	bl	800a38c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80094c4:	e7ee      	b.n	80094a4 <prvIdleTask+0x8>
 80094c6:	bf00      	nop
 80094c8:	200000b4 	.word	0x200000b4
 80094cc:	e000ed04 	.word	0xe000ed04

080094d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094d6:	2300      	movs	r3, #0
 80094d8:	607b      	str	r3, [r7, #4]
 80094da:	e00c      	b.n	80094f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80094dc:	687a      	ldr	r2, [r7, #4]
 80094de:	4613      	mov	r3, r2
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	4413      	add	r3, r2
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	4a12      	ldr	r2, [pc, #72]	; (8009530 <prvInitialiseTaskLists+0x60>)
 80094e8:	4413      	add	r3, r2
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7fe fce4 	bl	8007eb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	3301      	adds	r3, #1
 80094f4:	607b      	str	r3, [r7, #4]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2b06      	cmp	r3, #6
 80094fa:	d9ef      	bls.n	80094dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80094fc:	480d      	ldr	r0, [pc, #52]	; (8009534 <prvInitialiseTaskLists+0x64>)
 80094fe:	f7fe fcdb 	bl	8007eb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009502:	480d      	ldr	r0, [pc, #52]	; (8009538 <prvInitialiseTaskLists+0x68>)
 8009504:	f7fe fcd8 	bl	8007eb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009508:	480c      	ldr	r0, [pc, #48]	; (800953c <prvInitialiseTaskLists+0x6c>)
 800950a:	f7fe fcd5 	bl	8007eb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800950e:	480c      	ldr	r0, [pc, #48]	; (8009540 <prvInitialiseTaskLists+0x70>)
 8009510:	f7fe fcd2 	bl	8007eb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009514:	480b      	ldr	r0, [pc, #44]	; (8009544 <prvInitialiseTaskLists+0x74>)
 8009516:	f7fe fccf 	bl	8007eb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800951a:	4b0b      	ldr	r3, [pc, #44]	; (8009548 <prvInitialiseTaskLists+0x78>)
 800951c:	4a05      	ldr	r2, [pc, #20]	; (8009534 <prvInitialiseTaskLists+0x64>)
 800951e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009520:	4b0a      	ldr	r3, [pc, #40]	; (800954c <prvInitialiseTaskLists+0x7c>)
 8009522:	4a05      	ldr	r2, [pc, #20]	; (8009538 <prvInitialiseTaskLists+0x68>)
 8009524:	601a      	str	r2, [r3, #0]
}
 8009526:	bf00      	nop
 8009528:	3708      	adds	r7, #8
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	200000b4 	.word	0x200000b4
 8009534:	20000140 	.word	0x20000140
 8009538:	20000154 	.word	0x20000154
 800953c:	20000170 	.word	0x20000170
 8009540:	20000184 	.word	0x20000184
 8009544:	2000019c 	.word	0x2000019c
 8009548:	20000168 	.word	0x20000168
 800954c:	2000016c 	.word	0x2000016c

08009550 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009556:	e019      	b.n	800958c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009558:	f000 faa8 	bl	8009aac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800955c:	4b0f      	ldr	r3, [pc, #60]	; (800959c <prvCheckTasksWaitingTermination+0x4c>)
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	3304      	adds	r3, #4
 8009568:	4618      	mov	r0, r3
 800956a:	f7fe fd2f 	bl	8007fcc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800956e:	4b0c      	ldr	r3, [pc, #48]	; (80095a0 <prvCheckTasksWaitingTermination+0x50>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	3b01      	subs	r3, #1
 8009574:	4a0a      	ldr	r2, [pc, #40]	; (80095a0 <prvCheckTasksWaitingTermination+0x50>)
 8009576:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009578:	4b0a      	ldr	r3, [pc, #40]	; (80095a4 <prvCheckTasksWaitingTermination+0x54>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	3b01      	subs	r3, #1
 800957e:	4a09      	ldr	r2, [pc, #36]	; (80095a4 <prvCheckTasksWaitingTermination+0x54>)
 8009580:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009582:	f000 fac1 	bl	8009b08 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 f80e 	bl	80095a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800958c:	4b05      	ldr	r3, [pc, #20]	; (80095a4 <prvCheckTasksWaitingTermination+0x54>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d1e1      	bne.n	8009558 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009594:	bf00      	nop
 8009596:	3708      	adds	r7, #8
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}
 800959c:	20000184 	.word	0x20000184
 80095a0:	200001b0 	.word	0x200001b0
 80095a4:	20000198 	.word	0x20000198

080095a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d108      	bne.n	80095cc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095be:	4618      	mov	r0, r3
 80095c0:	f000 fc54 	bl	8009e6c <vPortFree>
				vPortFree( pxTCB );
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 fc51 	bl	8009e6c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80095ca:	e017      	b.n	80095fc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d103      	bne.n	80095de <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 fc48 	bl	8009e6c <vPortFree>
	}
 80095dc:	e00e      	b.n	80095fc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80095e4:	2b02      	cmp	r3, #2
 80095e6:	d009      	beq.n	80095fc <prvDeleteTCB+0x54>
 80095e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ec:	f383 8811 	msr	BASEPRI, r3
 80095f0:	f3bf 8f6f 	isb	sy
 80095f4:	f3bf 8f4f 	dsb	sy
 80095f8:	60fb      	str	r3, [r7, #12]
 80095fa:	e7fe      	b.n	80095fa <prvDeleteTCB+0x52>
	}
 80095fc:	bf00      	nop
 80095fe:	3710      	adds	r7, #16
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800960a:	4b0f      	ldr	r3, [pc, #60]	; (8009648 <prvResetNextTaskUnblockTime+0x44>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d101      	bne.n	8009618 <prvResetNextTaskUnblockTime+0x14>
 8009614:	2301      	movs	r3, #1
 8009616:	e000      	b.n	800961a <prvResetNextTaskUnblockTime+0x16>
 8009618:	2300      	movs	r3, #0
 800961a:	2b00      	cmp	r3, #0
 800961c:	d004      	beq.n	8009628 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800961e:	4b0b      	ldr	r3, [pc, #44]	; (800964c <prvResetNextTaskUnblockTime+0x48>)
 8009620:	f04f 32ff 	mov.w	r2, #4294967295
 8009624:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009626:	e008      	b.n	800963a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009628:	4b07      	ldr	r3, [pc, #28]	; (8009648 <prvResetNextTaskUnblockTime+0x44>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	4a05      	ldr	r2, [pc, #20]	; (800964c <prvResetNextTaskUnblockTime+0x48>)
 8009638:	6013      	str	r3, [r2, #0]
}
 800963a:	bf00      	nop
 800963c:	370c      	adds	r7, #12
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop
 8009648:	20000168 	.word	0x20000168
 800964c:	200001d0 	.word	0x200001d0

08009650 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009650:	b480      	push	{r7}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009656:	4b0b      	ldr	r3, [pc, #44]	; (8009684 <xTaskGetSchedulerState+0x34>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d102      	bne.n	8009664 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800965e:	2301      	movs	r3, #1
 8009660:	607b      	str	r3, [r7, #4]
 8009662:	e008      	b.n	8009676 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009664:	4b08      	ldr	r3, [pc, #32]	; (8009688 <xTaskGetSchedulerState+0x38>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d102      	bne.n	8009672 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800966c:	2302      	movs	r3, #2
 800966e:	607b      	str	r3, [r7, #4]
 8009670:	e001      	b.n	8009676 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009672:	2300      	movs	r3, #0
 8009674:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009676:	687b      	ldr	r3, [r7, #4]
	}
 8009678:	4618      	mov	r0, r3
 800967a:	370c      	adds	r7, #12
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr
 8009684:	200001bc 	.word	0x200001bc
 8009688:	200001d8 	.word	0x200001d8

0800968c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800968c:	b580      	push	{r7, lr}
 800968e:	b086      	sub	sp, #24
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009698:	2300      	movs	r3, #0
 800969a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d06c      	beq.n	800977c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80096a2:	4b39      	ldr	r3, [pc, #228]	; (8009788 <xTaskPriorityDisinherit+0xfc>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	693a      	ldr	r2, [r7, #16]
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d009      	beq.n	80096c0 <xTaskPriorityDisinherit+0x34>
 80096ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b0:	f383 8811 	msr	BASEPRI, r3
 80096b4:	f3bf 8f6f 	isb	sy
 80096b8:	f3bf 8f4f 	dsb	sy
 80096bc:	60fb      	str	r3, [r7, #12]
 80096be:	e7fe      	b.n	80096be <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d109      	bne.n	80096dc <xTaskPriorityDisinherit+0x50>
 80096c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096cc:	f383 8811 	msr	BASEPRI, r3
 80096d0:	f3bf 8f6f 	isb	sy
 80096d4:	f3bf 8f4f 	dsb	sy
 80096d8:	60bb      	str	r3, [r7, #8]
 80096da:	e7fe      	b.n	80096da <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096e0:	1e5a      	subs	r2, r3, #1
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d044      	beq.n	800977c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d140      	bne.n	800977c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	3304      	adds	r3, #4
 80096fe:	4618      	mov	r0, r3
 8009700:	f7fe fc64 	bl	8007fcc <uxListRemove>
 8009704:	4603      	mov	r3, r0
 8009706:	2b00      	cmp	r3, #0
 8009708:	d115      	bne.n	8009736 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800970e:	491f      	ldr	r1, [pc, #124]	; (800978c <xTaskPriorityDisinherit+0x100>)
 8009710:	4613      	mov	r3, r2
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	4413      	add	r3, r2
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	440b      	add	r3, r1
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d10a      	bne.n	8009736 <xTaskPriorityDisinherit+0xaa>
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009724:	2201      	movs	r2, #1
 8009726:	fa02 f303 	lsl.w	r3, r2, r3
 800972a:	43da      	mvns	r2, r3
 800972c:	4b18      	ldr	r3, [pc, #96]	; (8009790 <xTaskPriorityDisinherit+0x104>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4013      	ands	r3, r2
 8009732:	4a17      	ldr	r2, [pc, #92]	; (8009790 <xTaskPriorityDisinherit+0x104>)
 8009734:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009742:	f1c3 0207 	rsb	r2, r3, #7
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800974e:	2201      	movs	r2, #1
 8009750:	409a      	lsls	r2, r3
 8009752:	4b0f      	ldr	r3, [pc, #60]	; (8009790 <xTaskPriorityDisinherit+0x104>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4313      	orrs	r3, r2
 8009758:	4a0d      	ldr	r2, [pc, #52]	; (8009790 <xTaskPriorityDisinherit+0x104>)
 800975a:	6013      	str	r3, [r2, #0]
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009760:	4613      	mov	r3, r2
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	4413      	add	r3, r2
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	4a08      	ldr	r2, [pc, #32]	; (800978c <xTaskPriorityDisinherit+0x100>)
 800976a:	441a      	add	r2, r3
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	3304      	adds	r3, #4
 8009770:	4619      	mov	r1, r3
 8009772:	4610      	mov	r0, r2
 8009774:	f7fe fbcd 	bl	8007f12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009778:	2301      	movs	r3, #1
 800977a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800977c:	697b      	ldr	r3, [r7, #20]
	}
 800977e:	4618      	mov	r0, r3
 8009780:	3718      	adds	r7, #24
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop
 8009788:	200000b0 	.word	0x200000b0
 800978c:	200000b4 	.word	0x200000b4
 8009790:	200001b8 	.word	0x200001b8

08009794 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800979e:	4b29      	ldr	r3, [pc, #164]	; (8009844 <prvAddCurrentTaskToDelayedList+0xb0>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097a4:	4b28      	ldr	r3, [pc, #160]	; (8009848 <prvAddCurrentTaskToDelayedList+0xb4>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	3304      	adds	r3, #4
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7fe fc0e 	bl	8007fcc <uxListRemove>
 80097b0:	4603      	mov	r3, r0
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d10b      	bne.n	80097ce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80097b6:	4b24      	ldr	r3, [pc, #144]	; (8009848 <prvAddCurrentTaskToDelayedList+0xb4>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097bc:	2201      	movs	r2, #1
 80097be:	fa02 f303 	lsl.w	r3, r2, r3
 80097c2:	43da      	mvns	r2, r3
 80097c4:	4b21      	ldr	r3, [pc, #132]	; (800984c <prvAddCurrentTaskToDelayedList+0xb8>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4013      	ands	r3, r2
 80097ca:	4a20      	ldr	r2, [pc, #128]	; (800984c <prvAddCurrentTaskToDelayedList+0xb8>)
 80097cc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097d4:	d10a      	bne.n	80097ec <prvAddCurrentTaskToDelayedList+0x58>
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d007      	beq.n	80097ec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097dc:	4b1a      	ldr	r3, [pc, #104]	; (8009848 <prvAddCurrentTaskToDelayedList+0xb4>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	3304      	adds	r3, #4
 80097e2:	4619      	mov	r1, r3
 80097e4:	481a      	ldr	r0, [pc, #104]	; (8009850 <prvAddCurrentTaskToDelayedList+0xbc>)
 80097e6:	f7fe fb94 	bl	8007f12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80097ea:	e026      	b.n	800983a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80097ec:	68fa      	ldr	r2, [r7, #12]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	4413      	add	r3, r2
 80097f2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80097f4:	4b14      	ldr	r3, [pc, #80]	; (8009848 <prvAddCurrentTaskToDelayedList+0xb4>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	68ba      	ldr	r2, [r7, #8]
 80097fa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80097fc:	68ba      	ldr	r2, [r7, #8]
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	429a      	cmp	r2, r3
 8009802:	d209      	bcs.n	8009818 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009804:	4b13      	ldr	r3, [pc, #76]	; (8009854 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	4b0f      	ldr	r3, [pc, #60]	; (8009848 <prvAddCurrentTaskToDelayedList+0xb4>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	3304      	adds	r3, #4
 800980e:	4619      	mov	r1, r3
 8009810:	4610      	mov	r0, r2
 8009812:	f7fe fba2 	bl	8007f5a <vListInsert>
}
 8009816:	e010      	b.n	800983a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009818:	4b0f      	ldr	r3, [pc, #60]	; (8009858 <prvAddCurrentTaskToDelayedList+0xc4>)
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	4b0a      	ldr	r3, [pc, #40]	; (8009848 <prvAddCurrentTaskToDelayedList+0xb4>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	3304      	adds	r3, #4
 8009822:	4619      	mov	r1, r3
 8009824:	4610      	mov	r0, r2
 8009826:	f7fe fb98 	bl	8007f5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800982a:	4b0c      	ldr	r3, [pc, #48]	; (800985c <prvAddCurrentTaskToDelayedList+0xc8>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	68ba      	ldr	r2, [r7, #8]
 8009830:	429a      	cmp	r2, r3
 8009832:	d202      	bcs.n	800983a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009834:	4a09      	ldr	r2, [pc, #36]	; (800985c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	6013      	str	r3, [r2, #0]
}
 800983a:	bf00      	nop
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	200001b4 	.word	0x200001b4
 8009848:	200000b0 	.word	0x200000b0
 800984c:	200001b8 	.word	0x200001b8
 8009850:	2000019c 	.word	0x2000019c
 8009854:	2000016c 	.word	0x2000016c
 8009858:	20000168 	.word	0x20000168
 800985c:	200001d0 	.word	0x200001d0

08009860 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009860:	b480      	push	{r7}
 8009862:	b085      	sub	sp, #20
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	3b04      	subs	r3, #4
 8009870:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009878:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	3b04      	subs	r3, #4
 800987e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	f023 0201 	bic.w	r2, r3, #1
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	3b04      	subs	r3, #4
 800988e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009890:	4a0c      	ldr	r2, [pc, #48]	; (80098c4 <pxPortInitialiseStack+0x64>)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	3b14      	subs	r3, #20
 800989a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	3b04      	subs	r3, #4
 80098a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f06f 0202 	mvn.w	r2, #2
 80098ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	3b20      	subs	r3, #32
 80098b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80098b6:	68fb      	ldr	r3, [r7, #12]
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3714      	adds	r7, #20
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr
 80098c4:	080098c9 	.word	0x080098c9

080098c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80098c8:	b480      	push	{r7}
 80098ca:	b085      	sub	sp, #20
 80098cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80098ce:	2300      	movs	r3, #0
 80098d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80098d2:	4b11      	ldr	r3, [pc, #68]	; (8009918 <prvTaskExitError+0x50>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098da:	d009      	beq.n	80098f0 <prvTaskExitError+0x28>
 80098dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e0:	f383 8811 	msr	BASEPRI, r3
 80098e4:	f3bf 8f6f 	isb	sy
 80098e8:	f3bf 8f4f 	dsb	sy
 80098ec:	60fb      	str	r3, [r7, #12]
 80098ee:	e7fe      	b.n	80098ee <prvTaskExitError+0x26>
 80098f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f4:	f383 8811 	msr	BASEPRI, r3
 80098f8:	f3bf 8f6f 	isb	sy
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009902:	bf00      	nop
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d0fc      	beq.n	8009904 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800990a:	bf00      	nop
 800990c:	3714      	adds	r7, #20
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr
 8009916:	bf00      	nop
 8009918:	20000024 	.word	0x20000024
 800991c:	00000000 	.word	0x00000000

08009920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009920:	4b07      	ldr	r3, [pc, #28]	; (8009940 <pxCurrentTCBConst2>)
 8009922:	6819      	ldr	r1, [r3, #0]
 8009924:	6808      	ldr	r0, [r1, #0]
 8009926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800992a:	f380 8809 	msr	PSP, r0
 800992e:	f3bf 8f6f 	isb	sy
 8009932:	f04f 0000 	mov.w	r0, #0
 8009936:	f380 8811 	msr	BASEPRI, r0
 800993a:	4770      	bx	lr
 800993c:	f3af 8000 	nop.w

08009940 <pxCurrentTCBConst2>:
 8009940:	200000b0 	.word	0x200000b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009944:	bf00      	nop
 8009946:	bf00      	nop

08009948 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009948:	4808      	ldr	r0, [pc, #32]	; (800996c <prvPortStartFirstTask+0x24>)
 800994a:	6800      	ldr	r0, [r0, #0]
 800994c:	6800      	ldr	r0, [r0, #0]
 800994e:	f380 8808 	msr	MSP, r0
 8009952:	f04f 0000 	mov.w	r0, #0
 8009956:	f380 8814 	msr	CONTROL, r0
 800995a:	b662      	cpsie	i
 800995c:	b661      	cpsie	f
 800995e:	f3bf 8f4f 	dsb	sy
 8009962:	f3bf 8f6f 	isb	sy
 8009966:	df00      	svc	0
 8009968:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800996a:	bf00      	nop
 800996c:	e000ed08 	.word	0xe000ed08

08009970 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b086      	sub	sp, #24
 8009974:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009976:	4b44      	ldr	r3, [pc, #272]	; (8009a88 <xPortStartScheduler+0x118>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4a44      	ldr	r2, [pc, #272]	; (8009a8c <xPortStartScheduler+0x11c>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d109      	bne.n	8009994 <xPortStartScheduler+0x24>
 8009980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009984:	f383 8811 	msr	BASEPRI, r3
 8009988:	f3bf 8f6f 	isb	sy
 800998c:	f3bf 8f4f 	dsb	sy
 8009990:	613b      	str	r3, [r7, #16]
 8009992:	e7fe      	b.n	8009992 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009994:	4b3c      	ldr	r3, [pc, #240]	; (8009a88 <xPortStartScheduler+0x118>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4a3d      	ldr	r2, [pc, #244]	; (8009a90 <xPortStartScheduler+0x120>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d109      	bne.n	80099b2 <xPortStartScheduler+0x42>
 800999e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a2:	f383 8811 	msr	BASEPRI, r3
 80099a6:	f3bf 8f6f 	isb	sy
 80099aa:	f3bf 8f4f 	dsb	sy
 80099ae:	60fb      	str	r3, [r7, #12]
 80099b0:	e7fe      	b.n	80099b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80099b2:	4b38      	ldr	r3, [pc, #224]	; (8009a94 <xPortStartScheduler+0x124>)
 80099b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	22ff      	movs	r2, #255	; 0xff
 80099c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80099cc:	78fb      	ldrb	r3, [r7, #3]
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80099d4:	b2da      	uxtb	r2, r3
 80099d6:	4b30      	ldr	r3, [pc, #192]	; (8009a98 <xPortStartScheduler+0x128>)
 80099d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80099da:	4b30      	ldr	r3, [pc, #192]	; (8009a9c <xPortStartScheduler+0x12c>)
 80099dc:	2207      	movs	r2, #7
 80099de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099e0:	e009      	b.n	80099f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80099e2:	4b2e      	ldr	r3, [pc, #184]	; (8009a9c <xPortStartScheduler+0x12c>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	3b01      	subs	r3, #1
 80099e8:	4a2c      	ldr	r2, [pc, #176]	; (8009a9c <xPortStartScheduler+0x12c>)
 80099ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80099ec:	78fb      	ldrb	r3, [r7, #3]
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	005b      	lsls	r3, r3, #1
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099f6:	78fb      	ldrb	r3, [r7, #3]
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099fe:	2b80      	cmp	r3, #128	; 0x80
 8009a00:	d0ef      	beq.n	80099e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009a02:	4b26      	ldr	r3, [pc, #152]	; (8009a9c <xPortStartScheduler+0x12c>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f1c3 0307 	rsb	r3, r3, #7
 8009a0a:	2b04      	cmp	r3, #4
 8009a0c:	d009      	beq.n	8009a22 <xPortStartScheduler+0xb2>
 8009a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a12:	f383 8811 	msr	BASEPRI, r3
 8009a16:	f3bf 8f6f 	isb	sy
 8009a1a:	f3bf 8f4f 	dsb	sy
 8009a1e:	60bb      	str	r3, [r7, #8]
 8009a20:	e7fe      	b.n	8009a20 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009a22:	4b1e      	ldr	r3, [pc, #120]	; (8009a9c <xPortStartScheduler+0x12c>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	021b      	lsls	r3, r3, #8
 8009a28:	4a1c      	ldr	r2, [pc, #112]	; (8009a9c <xPortStartScheduler+0x12c>)
 8009a2a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009a2c:	4b1b      	ldr	r3, [pc, #108]	; (8009a9c <xPortStartScheduler+0x12c>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009a34:	4a19      	ldr	r2, [pc, #100]	; (8009a9c <xPortStartScheduler+0x12c>)
 8009a36:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	b2da      	uxtb	r2, r3
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009a40:	4b17      	ldr	r3, [pc, #92]	; (8009aa0 <xPortStartScheduler+0x130>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a16      	ldr	r2, [pc, #88]	; (8009aa0 <xPortStartScheduler+0x130>)
 8009a46:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009a4a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009a4c:	4b14      	ldr	r3, [pc, #80]	; (8009aa0 <xPortStartScheduler+0x130>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a13      	ldr	r2, [pc, #76]	; (8009aa0 <xPortStartScheduler+0x130>)
 8009a52:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009a56:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009a58:	f000 f8d6 	bl	8009c08 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009a5c:	4b11      	ldr	r3, [pc, #68]	; (8009aa4 <xPortStartScheduler+0x134>)
 8009a5e:	2200      	movs	r2, #0
 8009a60:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009a62:	f000 f8f5 	bl	8009c50 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009a66:	4b10      	ldr	r3, [pc, #64]	; (8009aa8 <xPortStartScheduler+0x138>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a0f      	ldr	r2, [pc, #60]	; (8009aa8 <xPortStartScheduler+0x138>)
 8009a6c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009a70:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009a72:	f7ff ff69 	bl	8009948 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009a76:	f7ff fb89 	bl	800918c <vTaskSwitchContext>
	prvTaskExitError();
 8009a7a:	f7ff ff25 	bl	80098c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009a7e:	2300      	movs	r3, #0
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3718      	adds	r7, #24
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	e000ed00 	.word	0xe000ed00
 8009a8c:	410fc271 	.word	0x410fc271
 8009a90:	410fc270 	.word	0x410fc270
 8009a94:	e000e400 	.word	0xe000e400
 8009a98:	200001dc 	.word	0x200001dc
 8009a9c:	200001e0 	.word	0x200001e0
 8009aa0:	e000ed20 	.word	0xe000ed20
 8009aa4:	20000024 	.word	0x20000024
 8009aa8:	e000ef34 	.word	0xe000ef34

08009aac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab6:	f383 8811 	msr	BASEPRI, r3
 8009aba:	f3bf 8f6f 	isb	sy
 8009abe:	f3bf 8f4f 	dsb	sy
 8009ac2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009ac4:	4b0e      	ldr	r3, [pc, #56]	; (8009b00 <vPortEnterCritical+0x54>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	3301      	adds	r3, #1
 8009aca:	4a0d      	ldr	r2, [pc, #52]	; (8009b00 <vPortEnterCritical+0x54>)
 8009acc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009ace:	4b0c      	ldr	r3, [pc, #48]	; (8009b00 <vPortEnterCritical+0x54>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d10e      	bne.n	8009af4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009ad6:	4b0b      	ldr	r3, [pc, #44]	; (8009b04 <vPortEnterCritical+0x58>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d009      	beq.n	8009af4 <vPortEnterCritical+0x48>
 8009ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae4:	f383 8811 	msr	BASEPRI, r3
 8009ae8:	f3bf 8f6f 	isb	sy
 8009aec:	f3bf 8f4f 	dsb	sy
 8009af0:	603b      	str	r3, [r7, #0]
 8009af2:	e7fe      	b.n	8009af2 <vPortEnterCritical+0x46>
	}
}
 8009af4:	bf00      	nop
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr
 8009b00:	20000024 	.word	0x20000024
 8009b04:	e000ed04 	.word	0xe000ed04

08009b08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b083      	sub	sp, #12
 8009b0c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009b0e:	4b11      	ldr	r3, [pc, #68]	; (8009b54 <vPortExitCritical+0x4c>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d109      	bne.n	8009b2a <vPortExitCritical+0x22>
 8009b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1a:	f383 8811 	msr	BASEPRI, r3
 8009b1e:	f3bf 8f6f 	isb	sy
 8009b22:	f3bf 8f4f 	dsb	sy
 8009b26:	607b      	str	r3, [r7, #4]
 8009b28:	e7fe      	b.n	8009b28 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009b2a:	4b0a      	ldr	r3, [pc, #40]	; (8009b54 <vPortExitCritical+0x4c>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	4a08      	ldr	r2, [pc, #32]	; (8009b54 <vPortExitCritical+0x4c>)
 8009b32:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009b34:	4b07      	ldr	r3, [pc, #28]	; (8009b54 <vPortExitCritical+0x4c>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d104      	bne.n	8009b46 <vPortExitCritical+0x3e>
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009b46:	bf00      	nop
 8009b48:	370c      	adds	r7, #12
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b50:	4770      	bx	lr
 8009b52:	bf00      	nop
 8009b54:	20000024 	.word	0x20000024
	...

08009b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009b60:	f3ef 8009 	mrs	r0, PSP
 8009b64:	f3bf 8f6f 	isb	sy
 8009b68:	4b15      	ldr	r3, [pc, #84]	; (8009bc0 <pxCurrentTCBConst>)
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	f01e 0f10 	tst.w	lr, #16
 8009b70:	bf08      	it	eq
 8009b72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009b76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b7a:	6010      	str	r0, [r2, #0]
 8009b7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009b80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009b84:	f380 8811 	msr	BASEPRI, r0
 8009b88:	f3bf 8f4f 	dsb	sy
 8009b8c:	f3bf 8f6f 	isb	sy
 8009b90:	f7ff fafc 	bl	800918c <vTaskSwitchContext>
 8009b94:	f04f 0000 	mov.w	r0, #0
 8009b98:	f380 8811 	msr	BASEPRI, r0
 8009b9c:	bc09      	pop	{r0, r3}
 8009b9e:	6819      	ldr	r1, [r3, #0]
 8009ba0:	6808      	ldr	r0, [r1, #0]
 8009ba2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ba6:	f01e 0f10 	tst.w	lr, #16
 8009baa:	bf08      	it	eq
 8009bac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009bb0:	f380 8809 	msr	PSP, r0
 8009bb4:	f3bf 8f6f 	isb	sy
 8009bb8:	4770      	bx	lr
 8009bba:	bf00      	nop
 8009bbc:	f3af 8000 	nop.w

08009bc0 <pxCurrentTCBConst>:
 8009bc0:	200000b0 	.word	0x200000b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009bc4:	bf00      	nop
 8009bc6:	bf00      	nop

08009bc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
	__asm volatile
 8009bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd2:	f383 8811 	msr	BASEPRI, r3
 8009bd6:	f3bf 8f6f 	isb	sy
 8009bda:	f3bf 8f4f 	dsb	sy
 8009bde:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009be0:	f7ff fa18 	bl	8009014 <xTaskIncrementTick>
 8009be4:	4603      	mov	r3, r0
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d003      	beq.n	8009bf2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009bea:	4b06      	ldr	r3, [pc, #24]	; (8009c04 <SysTick_Handler+0x3c>)
 8009bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bf0:	601a      	str	r2, [r3, #0]
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009bfc:	bf00      	nop
 8009bfe:	3708      	adds	r7, #8
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}
 8009c04:	e000ed04 	.word	0xe000ed04

08009c08 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009c08:	b480      	push	{r7}
 8009c0a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009c0c:	4b0b      	ldr	r3, [pc, #44]	; (8009c3c <vPortSetupTimerInterrupt+0x34>)
 8009c0e:	2200      	movs	r2, #0
 8009c10:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009c12:	4b0b      	ldr	r3, [pc, #44]	; (8009c40 <vPortSetupTimerInterrupt+0x38>)
 8009c14:	2200      	movs	r2, #0
 8009c16:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009c18:	4b0a      	ldr	r3, [pc, #40]	; (8009c44 <vPortSetupTimerInterrupt+0x3c>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4a0a      	ldr	r2, [pc, #40]	; (8009c48 <vPortSetupTimerInterrupt+0x40>)
 8009c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8009c22:	099b      	lsrs	r3, r3, #6
 8009c24:	4a09      	ldr	r2, [pc, #36]	; (8009c4c <vPortSetupTimerInterrupt+0x44>)
 8009c26:	3b01      	subs	r3, #1
 8009c28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009c2a:	4b04      	ldr	r3, [pc, #16]	; (8009c3c <vPortSetupTimerInterrupt+0x34>)
 8009c2c:	2207      	movs	r2, #7
 8009c2e:	601a      	str	r2, [r3, #0]
}
 8009c30:	bf00      	nop
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr
 8009c3a:	bf00      	nop
 8009c3c:	e000e010 	.word	0xe000e010
 8009c40:	e000e018 	.word	0xe000e018
 8009c44:	20000028 	.word	0x20000028
 8009c48:	10624dd3 	.word	0x10624dd3
 8009c4c:	e000e014 	.word	0xe000e014

08009c50 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009c50:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009c60 <vPortEnableVFP+0x10>
 8009c54:	6801      	ldr	r1, [r0, #0]
 8009c56:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009c5a:	6001      	str	r1, [r0, #0]
 8009c5c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009c5e:	bf00      	nop
 8009c60:	e000ed88 	.word	0xe000ed88

08009c64 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009c64:	b480      	push	{r7}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009c6a:	f3ef 8305 	mrs	r3, IPSR
 8009c6e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2b0f      	cmp	r3, #15
 8009c74:	d913      	bls.n	8009c9e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009c76:	4a16      	ldr	r2, [pc, #88]	; (8009cd0 <vPortValidateInterruptPriority+0x6c>)
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	4413      	add	r3, r2
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009c80:	4b14      	ldr	r3, [pc, #80]	; (8009cd4 <vPortValidateInterruptPriority+0x70>)
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	7afa      	ldrb	r2, [r7, #11]
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d209      	bcs.n	8009c9e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8009c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8e:	f383 8811 	msr	BASEPRI, r3
 8009c92:	f3bf 8f6f 	isb	sy
 8009c96:	f3bf 8f4f 	dsb	sy
 8009c9a:	607b      	str	r3, [r7, #4]
 8009c9c:	e7fe      	b.n	8009c9c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009c9e:	4b0e      	ldr	r3, [pc, #56]	; (8009cd8 <vPortValidateInterruptPriority+0x74>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009ca6:	4b0d      	ldr	r3, [pc, #52]	; (8009cdc <vPortValidateInterruptPriority+0x78>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d909      	bls.n	8009cc2 <vPortValidateInterruptPriority+0x5e>
 8009cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb2:	f383 8811 	msr	BASEPRI, r3
 8009cb6:	f3bf 8f6f 	isb	sy
 8009cba:	f3bf 8f4f 	dsb	sy
 8009cbe:	603b      	str	r3, [r7, #0]
 8009cc0:	e7fe      	b.n	8009cc0 <vPortValidateInterruptPriority+0x5c>
	}
 8009cc2:	bf00      	nop
 8009cc4:	3714      	adds	r7, #20
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr
 8009cce:	bf00      	nop
 8009cd0:	e000e3f0 	.word	0xe000e3f0
 8009cd4:	200001dc 	.word	0x200001dc
 8009cd8:	e000ed0c 	.word	0xe000ed0c
 8009cdc:	200001e0 	.word	0x200001e0

08009ce0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b08a      	sub	sp, #40	; 0x28
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009cec:	f7ff f8e8 	bl	8008ec0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009cf0:	4b59      	ldr	r3, [pc, #356]	; (8009e58 <pvPortMalloc+0x178>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d101      	bne.n	8009cfc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009cf8:	f000 f910 	bl	8009f1c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009cfc:	4b57      	ldr	r3, [pc, #348]	; (8009e5c <pvPortMalloc+0x17c>)
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	4013      	ands	r3, r2
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	f040 808c 	bne.w	8009e22 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d01c      	beq.n	8009d4a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009d10:	2208      	movs	r2, #8
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	4413      	add	r3, r2
 8009d16:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f003 0307 	and.w	r3, r3, #7
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d013      	beq.n	8009d4a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f023 0307 	bic.w	r3, r3, #7
 8009d28:	3308      	adds	r3, #8
 8009d2a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f003 0307 	and.w	r3, r3, #7
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d009      	beq.n	8009d4a <pvPortMalloc+0x6a>
 8009d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d3a:	f383 8811 	msr	BASEPRI, r3
 8009d3e:	f3bf 8f6f 	isb	sy
 8009d42:	f3bf 8f4f 	dsb	sy
 8009d46:	617b      	str	r3, [r7, #20]
 8009d48:	e7fe      	b.n	8009d48 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d068      	beq.n	8009e22 <pvPortMalloc+0x142>
 8009d50:	4b43      	ldr	r3, [pc, #268]	; (8009e60 <pvPortMalloc+0x180>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d863      	bhi.n	8009e22 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009d5a:	4b42      	ldr	r3, [pc, #264]	; (8009e64 <pvPortMalloc+0x184>)
 8009d5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009d5e:	4b41      	ldr	r3, [pc, #260]	; (8009e64 <pvPortMalloc+0x184>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d64:	e004      	b.n	8009d70 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d903      	bls.n	8009d82 <pvPortMalloc+0xa2>
 8009d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d1f1      	bne.n	8009d66 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009d82:	4b35      	ldr	r3, [pc, #212]	; (8009e58 <pvPortMalloc+0x178>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d04a      	beq.n	8009e22 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009d8c:	6a3b      	ldr	r3, [r7, #32]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	2208      	movs	r2, #8
 8009d92:	4413      	add	r3, r2
 8009d94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d98:	681a      	ldr	r2, [r3, #0]
 8009d9a:	6a3b      	ldr	r3, [r7, #32]
 8009d9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da0:	685a      	ldr	r2, [r3, #4]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	1ad2      	subs	r2, r2, r3
 8009da6:	2308      	movs	r3, #8
 8009da8:	005b      	lsls	r3, r3, #1
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d91e      	bls.n	8009dec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	4413      	add	r3, r2
 8009db4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009db6:	69bb      	ldr	r3, [r7, #24]
 8009db8:	f003 0307 	and.w	r3, r3, #7
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d009      	beq.n	8009dd4 <pvPortMalloc+0xf4>
 8009dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc4:	f383 8811 	msr	BASEPRI, r3
 8009dc8:	f3bf 8f6f 	isb	sy
 8009dcc:	f3bf 8f4f 	dsb	sy
 8009dd0:	613b      	str	r3, [r7, #16]
 8009dd2:	e7fe      	b.n	8009dd2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd6:	685a      	ldr	r2, [r3, #4]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	1ad2      	subs	r2, r2, r3
 8009ddc:	69bb      	ldr	r3, [r7, #24]
 8009dde:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009de6:	69b8      	ldr	r0, [r7, #24]
 8009de8:	f000 f8fa 	bl	8009fe0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009dec:	4b1c      	ldr	r3, [pc, #112]	; (8009e60 <pvPortMalloc+0x180>)
 8009dee:	681a      	ldr	r2, [r3, #0]
 8009df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	1ad3      	subs	r3, r2, r3
 8009df6:	4a1a      	ldr	r2, [pc, #104]	; (8009e60 <pvPortMalloc+0x180>)
 8009df8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009dfa:	4b19      	ldr	r3, [pc, #100]	; (8009e60 <pvPortMalloc+0x180>)
 8009dfc:	681a      	ldr	r2, [r3, #0]
 8009dfe:	4b1a      	ldr	r3, [pc, #104]	; (8009e68 <pvPortMalloc+0x188>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d203      	bcs.n	8009e0e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009e06:	4b16      	ldr	r3, [pc, #88]	; (8009e60 <pvPortMalloc+0x180>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4a17      	ldr	r2, [pc, #92]	; (8009e68 <pvPortMalloc+0x188>)
 8009e0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e10:	685a      	ldr	r2, [r3, #4]
 8009e12:	4b12      	ldr	r3, [pc, #72]	; (8009e5c <pvPortMalloc+0x17c>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	431a      	orrs	r2, r3
 8009e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1e:	2200      	movs	r2, #0
 8009e20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009e22:	f7ff f85b 	bl	8008edc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8009e26:	69fb      	ldr	r3, [r7, #28]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d101      	bne.n	8009e30 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8009e2c:	f000 fac0 	bl	800a3b0 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e30:	69fb      	ldr	r3, [r7, #28]
 8009e32:	f003 0307 	and.w	r3, r3, #7
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d009      	beq.n	8009e4e <pvPortMalloc+0x16e>
 8009e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3e:	f383 8811 	msr	BASEPRI, r3
 8009e42:	f3bf 8f6f 	isb	sy
 8009e46:	f3bf 8f4f 	dsb	sy
 8009e4a:	60fb      	str	r3, [r7, #12]
 8009e4c:	e7fe      	b.n	8009e4c <pvPortMalloc+0x16c>
	return pvReturn;
 8009e4e:	69fb      	ldr	r3, [r7, #28]
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3728      	adds	r7, #40	; 0x28
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	200081ec 	.word	0x200081ec
 8009e5c:	200081f8 	.word	0x200081f8
 8009e60:	200081f0 	.word	0x200081f0
 8009e64:	200081e4 	.word	0x200081e4
 8009e68:	200081f4 	.word	0x200081f4

08009e6c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b086      	sub	sp, #24
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d046      	beq.n	8009f0c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009e7e:	2308      	movs	r3, #8
 8009e80:	425b      	negs	r3, r3
 8009e82:	697a      	ldr	r2, [r7, #20]
 8009e84:	4413      	add	r3, r2
 8009e86:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	685a      	ldr	r2, [r3, #4]
 8009e90:	4b20      	ldr	r3, [pc, #128]	; (8009f14 <vPortFree+0xa8>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4013      	ands	r3, r2
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d109      	bne.n	8009eae <vPortFree+0x42>
 8009e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9e:	f383 8811 	msr	BASEPRI, r3
 8009ea2:	f3bf 8f6f 	isb	sy
 8009ea6:	f3bf 8f4f 	dsb	sy
 8009eaa:	60fb      	str	r3, [r7, #12]
 8009eac:	e7fe      	b.n	8009eac <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d009      	beq.n	8009eca <vPortFree+0x5e>
 8009eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eba:	f383 8811 	msr	BASEPRI, r3
 8009ebe:	f3bf 8f6f 	isb	sy
 8009ec2:	f3bf 8f4f 	dsb	sy
 8009ec6:	60bb      	str	r3, [r7, #8]
 8009ec8:	e7fe      	b.n	8009ec8 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	685a      	ldr	r2, [r3, #4]
 8009ece:	4b11      	ldr	r3, [pc, #68]	; (8009f14 <vPortFree+0xa8>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4013      	ands	r3, r2
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d019      	beq.n	8009f0c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d115      	bne.n	8009f0c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	685a      	ldr	r2, [r3, #4]
 8009ee4:	4b0b      	ldr	r3, [pc, #44]	; (8009f14 <vPortFree+0xa8>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	43db      	mvns	r3, r3
 8009eea:	401a      	ands	r2, r3
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ef0:	f7fe ffe6 	bl	8008ec0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	685a      	ldr	r2, [r3, #4]
 8009ef8:	4b07      	ldr	r3, [pc, #28]	; (8009f18 <vPortFree+0xac>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4413      	add	r3, r2
 8009efe:	4a06      	ldr	r2, [pc, #24]	; (8009f18 <vPortFree+0xac>)
 8009f00:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009f02:	6938      	ldr	r0, [r7, #16]
 8009f04:	f000 f86c 	bl	8009fe0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009f08:	f7fe ffe8 	bl	8008edc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009f0c:	bf00      	nop
 8009f0e:	3718      	adds	r7, #24
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	200081f8 	.word	0x200081f8
 8009f18:	200081f0 	.word	0x200081f0

08009f1c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b085      	sub	sp, #20
 8009f20:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009f22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f26:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009f28:	4b27      	ldr	r3, [pc, #156]	; (8009fc8 <prvHeapInit+0xac>)
 8009f2a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f003 0307 	and.w	r3, r3, #7
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d00c      	beq.n	8009f50 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	3307      	adds	r3, #7
 8009f3a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f023 0307 	bic.w	r3, r3, #7
 8009f42:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009f44:	68ba      	ldr	r2, [r7, #8]
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	1ad3      	subs	r3, r2, r3
 8009f4a:	4a1f      	ldr	r2, [pc, #124]	; (8009fc8 <prvHeapInit+0xac>)
 8009f4c:	4413      	add	r3, r2
 8009f4e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009f54:	4a1d      	ldr	r2, [pc, #116]	; (8009fcc <prvHeapInit+0xb0>)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009f5a:	4b1c      	ldr	r3, [pc, #112]	; (8009fcc <prvHeapInit+0xb0>)
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	68ba      	ldr	r2, [r7, #8]
 8009f64:	4413      	add	r3, r2
 8009f66:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009f68:	2208      	movs	r2, #8
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	1a9b      	subs	r3, r3, r2
 8009f6e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f023 0307 	bic.w	r3, r3, #7
 8009f76:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	4a15      	ldr	r2, [pc, #84]	; (8009fd0 <prvHeapInit+0xb4>)
 8009f7c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009f7e:	4b14      	ldr	r3, [pc, #80]	; (8009fd0 <prvHeapInit+0xb4>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	2200      	movs	r2, #0
 8009f84:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009f86:	4b12      	ldr	r3, [pc, #72]	; (8009fd0 <prvHeapInit+0xb4>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	68fa      	ldr	r2, [r7, #12]
 8009f96:	1ad2      	subs	r2, r2, r3
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009f9c:	4b0c      	ldr	r3, [pc, #48]	; (8009fd0 <prvHeapInit+0xb4>)
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	4a0a      	ldr	r2, [pc, #40]	; (8009fd4 <prvHeapInit+0xb8>)
 8009faa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	4a09      	ldr	r2, [pc, #36]	; (8009fd8 <prvHeapInit+0xbc>)
 8009fb2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009fb4:	4b09      	ldr	r3, [pc, #36]	; (8009fdc <prvHeapInit+0xc0>)
 8009fb6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009fba:	601a      	str	r2, [r3, #0]
}
 8009fbc:	bf00      	nop
 8009fbe:	3714      	adds	r7, #20
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr
 8009fc8:	200001e4 	.word	0x200001e4
 8009fcc:	200081e4 	.word	0x200081e4
 8009fd0:	200081ec 	.word	0x200081ec
 8009fd4:	200081f4 	.word	0x200081f4
 8009fd8:	200081f0 	.word	0x200081f0
 8009fdc:	200081f8 	.word	0x200081f8

08009fe0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b085      	sub	sp, #20
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009fe8:	4b28      	ldr	r3, [pc, #160]	; (800a08c <prvInsertBlockIntoFreeList+0xac>)
 8009fea:	60fb      	str	r3, [r7, #12]
 8009fec:	e002      	b.n	8009ff4 <prvInsertBlockIntoFreeList+0x14>
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	60fb      	str	r3, [r7, #12]
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	687a      	ldr	r2, [r7, #4]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d8f7      	bhi.n	8009fee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	68ba      	ldr	r2, [r7, #8]
 800a008:	4413      	add	r3, r2
 800a00a:	687a      	ldr	r2, [r7, #4]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d108      	bne.n	800a022 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	685a      	ldr	r2, [r3, #4]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	441a      	add	r2, r3
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	68ba      	ldr	r2, [r7, #8]
 800a02c:	441a      	add	r2, r3
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	429a      	cmp	r2, r3
 800a034:	d118      	bne.n	800a068 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	4b15      	ldr	r3, [pc, #84]	; (800a090 <prvInsertBlockIntoFreeList+0xb0>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	429a      	cmp	r2, r3
 800a040:	d00d      	beq.n	800a05e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	685a      	ldr	r2, [r3, #4]
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	441a      	add	r2, r3
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	601a      	str	r2, [r3, #0]
 800a05c:	e008      	b.n	800a070 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a05e:	4b0c      	ldr	r3, [pc, #48]	; (800a090 <prvInsertBlockIntoFreeList+0xb0>)
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	601a      	str	r2, [r3, #0]
 800a066:	e003      	b.n	800a070 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681a      	ldr	r2, [r3, #0]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a070:	68fa      	ldr	r2, [r7, #12]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	429a      	cmp	r2, r3
 800a076:	d002      	beq.n	800a07e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a07e:	bf00      	nop
 800a080:	3714      	adds	r7, #20
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr
 800a08a:	bf00      	nop
 800a08c:	200081e4 	.word	0x200081e4
 800a090:	200081ec 	.word	0x200081ec

0800a094 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 800a098:	4b06      	ldr	r3, [pc, #24]	; (800a0b4 <MX_CRC_Init+0x20>)
 800a09a:	4a07      	ldr	r2, [pc, #28]	; (800a0b8 <MX_CRC_Init+0x24>)
 800a09c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800a09e:	4805      	ldr	r0, [pc, #20]	; (800a0b4 <MX_CRC_Init+0x20>)
 800a0a0:	f7f6 fb6c 	bl	800077c <HAL_CRC_Init>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d001      	beq.n	800a0ae <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800a0aa:	f000 fdd3 	bl	800ac54 <Error_Handler>
  }

}
 800a0ae:	bf00      	nop
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	2000846c 	.word	0x2000846c
 800a0b8:	40023000 	.word	0x40023000

0800a0bc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b085      	sub	sp, #20
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a0b      	ldr	r2, [pc, #44]	; (800a0f8 <HAL_CRC_MspInit+0x3c>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d10d      	bne.n	800a0ea <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	60fb      	str	r3, [r7, #12]
 800a0d2:	4b0a      	ldr	r3, [pc, #40]	; (800a0fc <HAL_CRC_MspInit+0x40>)
 800a0d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0d6:	4a09      	ldr	r2, [pc, #36]	; (800a0fc <HAL_CRC_MspInit+0x40>)
 800a0d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a0dc:	6313      	str	r3, [r2, #48]	; 0x30
 800a0de:	4b07      	ldr	r3, [pc, #28]	; (800a0fc <HAL_CRC_MspInit+0x40>)
 800a0e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a0e6:	60fb      	str	r3, [r7, #12]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800a0ea:	bf00      	nop
 800a0ec:	3714      	adds	r7, #20
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop
 800a0f8:	40023000 	.word	0x40023000
 800a0fc:	40023800 	.word	0x40023800

0800a100 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 800a104:	4b15      	ldr	r3, [pc, #84]	; (800a15c <MX_DMA2D_Init+0x5c>)
 800a106:	4a16      	ldr	r2, [pc, #88]	; (800a160 <MX_DMA2D_Init+0x60>)
 800a108:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800a10a:	4b14      	ldr	r3, [pc, #80]	; (800a15c <MX_DMA2D_Init+0x5c>)
 800a10c:	2200      	movs	r2, #0
 800a10e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800a110:	4b12      	ldr	r3, [pc, #72]	; (800a15c <MX_DMA2D_Init+0x5c>)
 800a112:	2200      	movs	r2, #0
 800a114:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800a116:	4b11      	ldr	r3, [pc, #68]	; (800a15c <MX_DMA2D_Init+0x5c>)
 800a118:	2200      	movs	r2, #0
 800a11a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800a11c:	4b0f      	ldr	r3, [pc, #60]	; (800a15c <MX_DMA2D_Init+0x5c>)
 800a11e:	2200      	movs	r2, #0
 800a120:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800a122:	4b0e      	ldr	r3, [pc, #56]	; (800a15c <MX_DMA2D_Init+0x5c>)
 800a124:	2200      	movs	r2, #0
 800a126:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800a128:	4b0c      	ldr	r3, [pc, #48]	; (800a15c <MX_DMA2D_Init+0x5c>)
 800a12a:	2200      	movs	r2, #0
 800a12c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800a12e:	4b0b      	ldr	r3, [pc, #44]	; (800a15c <MX_DMA2D_Init+0x5c>)
 800a130:	2200      	movs	r2, #0
 800a132:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800a134:	4809      	ldr	r0, [pc, #36]	; (800a15c <MX_DMA2D_Init+0x5c>)
 800a136:	f7f6 fb40 	bl	80007ba <HAL_DMA2D_Init>
 800a13a:	4603      	mov	r3, r0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d001      	beq.n	800a144 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800a140:	f000 fd88 	bl	800ac54 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800a144:	2101      	movs	r1, #1
 800a146:	4805      	ldr	r0, [pc, #20]	; (800a15c <MX_DMA2D_Init+0x5c>)
 800a148:	f7f6 fc90 	bl	8000a6c <HAL_DMA2D_ConfigLayer>
 800a14c:	4603      	mov	r3, r0
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d001      	beq.n	800a156 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800a152:	f000 fd7f 	bl	800ac54 <Error_Handler>
  }

}
 800a156:	bf00      	nop
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	20008474 	.word	0x20008474
 800a160:	4002b000 	.word	0x4002b000

0800a164 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a0e      	ldr	r2, [pc, #56]	; (800a1ac <HAL_DMA2D_MspInit+0x48>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d115      	bne.n	800a1a2 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800a176:	2300      	movs	r3, #0
 800a178:	60fb      	str	r3, [r7, #12]
 800a17a:	4b0d      	ldr	r3, [pc, #52]	; (800a1b0 <HAL_DMA2D_MspInit+0x4c>)
 800a17c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a17e:	4a0c      	ldr	r2, [pc, #48]	; (800a1b0 <HAL_DMA2D_MspInit+0x4c>)
 800a180:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a184:	6313      	str	r3, [r2, #48]	; 0x30
 800a186:	4b0a      	ldr	r3, [pc, #40]	; (800a1b0 <HAL_DMA2D_MspInit+0x4c>)
 800a188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a18a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a18e:	60fb      	str	r3, [r7, #12]
 800a190:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800a192:	2200      	movs	r2, #0
 800a194:	2105      	movs	r1, #5
 800a196:	205a      	movs	r0, #90	; 0x5a
 800a198:	f7f6 fac6 	bl	8000728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800a19c:	205a      	movs	r0, #90	; 0x5a
 800a19e:	f7f6 fadf 	bl	8000760 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800a1a2:	bf00      	nop
 800a1a4:	3710      	adds	r7, #16
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}
 800a1aa:	bf00      	nop
 800a1ac:	4002b000 	.word	0x4002b000
 800a1b0:	40023800 	.word	0x40023800

0800a1b4 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b088      	sub	sp, #32
 800a1b8:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800a1ba:	1d3b      	adds	r3, r7, #4
 800a1bc:	2200      	movs	r2, #0
 800a1be:	601a      	str	r2, [r3, #0]
 800a1c0:	605a      	str	r2, [r3, #4]
 800a1c2:	609a      	str	r2, [r3, #8]
 800a1c4:	60da      	str	r2, [r3, #12]
 800a1c6:	611a      	str	r2, [r3, #16]
 800a1c8:	615a      	str	r2, [r3, #20]
 800a1ca:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800a1cc:	4b1f      	ldr	r3, [pc, #124]	; (800a24c <MX_FMC_Init+0x98>)
 800a1ce:	4a20      	ldr	r2, [pc, #128]	; (800a250 <MX_FMC_Init+0x9c>)
 800a1d0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800a1d2:	4b1e      	ldr	r3, [pc, #120]	; (800a24c <MX_FMC_Init+0x98>)
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800a1d8:	4b1c      	ldr	r3, [pc, #112]	; (800a24c <MX_FMC_Init+0x98>)
 800a1da:	2200      	movs	r2, #0
 800a1dc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800a1de:	4b1b      	ldr	r3, [pc, #108]	; (800a24c <MX_FMC_Init+0x98>)
 800a1e0:	2204      	movs	r2, #4
 800a1e2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800a1e4:	4b19      	ldr	r3, [pc, #100]	; (800a24c <MX_FMC_Init+0x98>)
 800a1e6:	2210      	movs	r2, #16
 800a1e8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800a1ea:	4b18      	ldr	r3, [pc, #96]	; (800a24c <MX_FMC_Init+0x98>)
 800a1ec:	2240      	movs	r2, #64	; 0x40
 800a1ee:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800a1f0:	4b16      	ldr	r3, [pc, #88]	; (800a24c <MX_FMC_Init+0x98>)
 800a1f2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800a1f6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800a1f8:	4b14      	ldr	r3, [pc, #80]	; (800a24c <MX_FMC_Init+0x98>)
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800a1fe:	4b13      	ldr	r3, [pc, #76]	; (800a24c <MX_FMC_Init+0x98>)
 800a200:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a204:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800a206:	4b11      	ldr	r3, [pc, #68]	; (800a24c <MX_FMC_Init+0x98>)
 800a208:	2200      	movs	r2, #0
 800a20a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800a20c:	4b0f      	ldr	r3, [pc, #60]	; (800a24c <MX_FMC_Init+0x98>)
 800a20e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a212:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800a214:	2302      	movs	r3, #2
 800a216:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800a218:	2307      	movs	r3, #7
 800a21a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800a21c:	2304      	movs	r3, #4
 800a21e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800a220:	2307      	movs	r3, #7
 800a222:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800a224:	2303      	movs	r3, #3
 800a226:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800a228:	2302      	movs	r3, #2
 800a22a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800a22c:	2302      	movs	r3, #2
 800a22e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800a230:	1d3b      	adds	r3, r7, #4
 800a232:	4619      	mov	r1, r3
 800a234:	4805      	ldr	r0, [pc, #20]	; (800a24c <MX_FMC_Init+0x98>)
 800a236:	f7f9 fe03 	bl	8003e40 <HAL_SDRAM_Init>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d001      	beq.n	800a244 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800a240:	f000 fd08 	bl	800ac54 <Error_Handler>
  }

}
 800a244:	bf00      	nop
 800a246:	3720      	adds	r7, #32
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}
 800a24c:	200084b4 	.word	0x200084b4
 800a250:	a0000140 	.word	0xa0000140

0800a254 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800a254:	b580      	push	{r7, lr}
 800a256:	b086      	sub	sp, #24
 800a258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a25a:	1d3b      	adds	r3, r7, #4
 800a25c:	2200      	movs	r2, #0
 800a25e:	601a      	str	r2, [r3, #0]
 800a260:	605a      	str	r2, [r3, #4]
 800a262:	609a      	str	r2, [r3, #8]
 800a264:	60da      	str	r2, [r3, #12]
 800a266:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800a268:	4b3b      	ldr	r3, [pc, #236]	; (800a358 <HAL_FMC_MspInit+0x104>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d16f      	bne.n	800a350 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800a270:	4b39      	ldr	r3, [pc, #228]	; (800a358 <HAL_FMC_MspInit+0x104>)
 800a272:	2201      	movs	r2, #1
 800a274:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800a276:	2300      	movs	r3, #0
 800a278:	603b      	str	r3, [r7, #0]
 800a27a:	4b38      	ldr	r3, [pc, #224]	; (800a35c <HAL_FMC_MspInit+0x108>)
 800a27c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a27e:	4a37      	ldr	r2, [pc, #220]	; (800a35c <HAL_FMC_MspInit+0x108>)
 800a280:	f043 0301 	orr.w	r3, r3, #1
 800a284:	6393      	str	r3, [r2, #56]	; 0x38
 800a286:	4b35      	ldr	r3, [pc, #212]	; (800a35c <HAL_FMC_MspInit+0x108>)
 800a288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a28a:	f003 0301 	and.w	r3, r3, #1
 800a28e:	603b      	str	r3, [r7, #0]
 800a290:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 800a292:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800a296:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin 
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a298:	2302      	movs	r3, #2
 800a29a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a29c:	2300      	movs	r3, #0
 800a29e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a2a0:	2303      	movs	r3, #3
 800a2a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a2a4:	230c      	movs	r3, #12
 800a2a6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a2a8:	1d3b      	adds	r3, r7, #4
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	482c      	ldr	r0, [pc, #176]	; (800a360 <HAL_FMC_MspInit+0x10c>)
 800a2ae:	f7f6 fc6f 	bl	8000b90 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2b6:	2302      	movs	r3, #2
 800a2b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a2be:	2303      	movs	r3, #3
 800a2c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a2c2:	230c      	movs	r3, #12
 800a2c4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800a2c6:	1d3b      	adds	r3, r7, #4
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	4826      	ldr	r0, [pc, #152]	; (800a364 <HAL_FMC_MspInit+0x110>)
 800a2cc:	f7f6 fc60 	bl	8000b90 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 800a2d0:	f248 1333 	movw	r3, #33075	; 0x8133
 800a2d4:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2d6:	2302      	movs	r3, #2
 800a2d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a2de:	2303      	movs	r3, #3
 800a2e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a2e2:	230c      	movs	r3, #12
 800a2e4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a2e6:	1d3b      	adds	r3, r7, #4
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	481f      	ldr	r0, [pc, #124]	; (800a368 <HAL_FMC_MspInit+0x114>)
 800a2ec:	f7f6 fc50 	bl	8000b90 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 800a2f0:	f64f 7383 	movw	r3, #65411	; 0xff83
 800a2f4:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin 
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2f6:	2302      	movs	r3, #2
 800a2f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a2fe:	2303      	movs	r3, #3
 800a300:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a302:	230c      	movs	r3, #12
 800a304:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a306:	1d3b      	adds	r3, r7, #4
 800a308:	4619      	mov	r1, r3
 800a30a:	4818      	ldr	r0, [pc, #96]	; (800a36c <HAL_FMC_MspInit+0x118>)
 800a30c:	f7f6 fc40 	bl	8000b90 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 800a310:	f24c 7303 	movw	r3, #50947	; 0xc703
 800a314:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a316:	2302      	movs	r3, #2
 800a318:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a31a:	2300      	movs	r3, #0
 800a31c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a31e:	2303      	movs	r3, #3
 800a320:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a322:	230c      	movs	r3, #12
 800a324:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a326:	1d3b      	adds	r3, r7, #4
 800a328:	4619      	mov	r1, r3
 800a32a:	4811      	ldr	r0, [pc, #68]	; (800a370 <HAL_FMC_MspInit+0x11c>)
 800a32c:	f7f6 fc30 	bl	8000b90 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800a330:	2360      	movs	r3, #96	; 0x60
 800a332:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a334:	2302      	movs	r3, #2
 800a336:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a338:	2300      	movs	r3, #0
 800a33a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a33c:	2303      	movs	r3, #3
 800a33e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a340:	230c      	movs	r3, #12
 800a342:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a344:	1d3b      	adds	r3, r7, #4
 800a346:	4619      	mov	r1, r3
 800a348:	480a      	ldr	r0, [pc, #40]	; (800a374 <HAL_FMC_MspInit+0x120>)
 800a34a:	f7f6 fc21 	bl	8000b90 <HAL_GPIO_Init>
 800a34e:	e000      	b.n	800a352 <HAL_FMC_MspInit+0xfe>
    return;
 800a350:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800a352:	3718      	adds	r7, #24
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}
 800a358:	200081fc 	.word	0x200081fc
 800a35c:	40023800 	.word	0x40023800
 800a360:	40021400 	.word	0x40021400
 800a364:	40020800 	.word	0x40020800
 800a368:	40021800 	.word	0x40021800
 800a36c:	40021000 	.word	0x40021000
 800a370:	40020c00 	.word	0x40020c00
 800a374:	40020400 	.word	0x40020400

0800a378 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800a378:	b580      	push	{r7, lr}
 800a37a:	b082      	sub	sp, #8
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800a380:	f7ff ff68 	bl	800a254 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800a384:	bf00      	nop
 800a386:	3708      	adds	r7, #8
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 800a38c:	b480      	push	{r7}
 800a38e:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800a390:	bf00      	nop
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr

0800a39a <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800a39a:	b480      	push	{r7}
 800a39c:	b083      	sub	sp, #12
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
 800a3a2:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800a3a4:	bf00      	nop
 800a3a6:	370c      	adds	r7, #12
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800a3b4:	bf00      	nop
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr
	...

0800a3c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b085      	sub	sp, #20
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	60f8      	str	r0, [r7, #12]
 800a3c8:	60b9      	str	r1, [r7, #8]
 800a3ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	4a07      	ldr	r2, [pc, #28]	; (800a3ec <vApplicationGetIdleTaskMemory+0x2c>)
 800a3d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	4a06      	ldr	r2, [pc, #24]	; (800a3f0 <vApplicationGetIdleTaskMemory+0x30>)
 800a3d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2280      	movs	r2, #128	; 0x80
 800a3dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800a3de:	bf00      	nop
 800a3e0:	3714      	adds	r7, #20
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr
 800a3ea:	bf00      	nop
 800a3ec:	20008200 	.word	0x20008200
 800a3f0:	20008258 	.word	0x20008258

0800a3f4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800a3f4:	b5b0      	push	{r4, r5, r7, lr}
 800a3f6:	b088      	sub	sp, #32
 800a3f8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 800a3fa:	4b0a      	ldr	r3, [pc, #40]	; (800a424 <MX_FREERTOS_Init+0x30>)
 800a3fc:	1d3c      	adds	r4, r7, #4
 800a3fe:	461d      	mov	r5, r3
 800a400:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a404:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a408:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800a40c:	1d3b      	adds	r3, r7, #4
 800a40e:	2100      	movs	r1, #0
 800a410:	4618      	mov	r0, r3
 800a412:	f7fd fc14 	bl	8007c3e <osThreadCreate>
 800a416:	4602      	mov	r2, r0
 800a418:	4b03      	ldr	r3, [pc, #12]	; (800a428 <MX_FREERTOS_Init+0x34>)
 800a41a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800a41c:	bf00      	nop
 800a41e:	3720      	adds	r7, #32
 800a420:	46bd      	mov	sp, r7
 800a422:	bdb0      	pop	{r4, r5, r7, pc}
 800a424:	0800ba58 	.word	0x0800ba58
 800a428:	200084e8 	.word	0x200084e8

0800a42c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800a434:	f000 fea2 	bl	800b17c <MX_USB_HOST_Init>

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800a438:	2001      	movs	r0, #1
 800a43a:	f7fd fc4c 	bl	8007cd6 <osDelay>
 800a43e:	e7fb      	b.n	800a438 <StartDefaultTask+0xc>

0800a440 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b08e      	sub	sp, #56	; 0x38
 800a444:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a44a:	2200      	movs	r2, #0
 800a44c:	601a      	str	r2, [r3, #0]
 800a44e:	605a      	str	r2, [r3, #4]
 800a450:	609a      	str	r2, [r3, #8]
 800a452:	60da      	str	r2, [r3, #12]
 800a454:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a456:	2300      	movs	r3, #0
 800a458:	623b      	str	r3, [r7, #32]
 800a45a:	4b7a      	ldr	r3, [pc, #488]	; (800a644 <MX_GPIO_Init+0x204>)
 800a45c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a45e:	4a79      	ldr	r2, [pc, #484]	; (800a644 <MX_GPIO_Init+0x204>)
 800a460:	f043 0304 	orr.w	r3, r3, #4
 800a464:	6313      	str	r3, [r2, #48]	; 0x30
 800a466:	4b77      	ldr	r3, [pc, #476]	; (800a644 <MX_GPIO_Init+0x204>)
 800a468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a46a:	f003 0304 	and.w	r3, r3, #4
 800a46e:	623b      	str	r3, [r7, #32]
 800a470:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a472:	2300      	movs	r3, #0
 800a474:	61fb      	str	r3, [r7, #28]
 800a476:	4b73      	ldr	r3, [pc, #460]	; (800a644 <MX_GPIO_Init+0x204>)
 800a478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a47a:	4a72      	ldr	r2, [pc, #456]	; (800a644 <MX_GPIO_Init+0x204>)
 800a47c:	f043 0320 	orr.w	r3, r3, #32
 800a480:	6313      	str	r3, [r2, #48]	; 0x30
 800a482:	4b70      	ldr	r3, [pc, #448]	; (800a644 <MX_GPIO_Init+0x204>)
 800a484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a486:	f003 0320 	and.w	r3, r3, #32
 800a48a:	61fb      	str	r3, [r7, #28]
 800a48c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a48e:	2300      	movs	r3, #0
 800a490:	61bb      	str	r3, [r7, #24]
 800a492:	4b6c      	ldr	r3, [pc, #432]	; (800a644 <MX_GPIO_Init+0x204>)
 800a494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a496:	4a6b      	ldr	r2, [pc, #428]	; (800a644 <MX_GPIO_Init+0x204>)
 800a498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a49c:	6313      	str	r3, [r2, #48]	; 0x30
 800a49e:	4b69      	ldr	r3, [pc, #420]	; (800a644 <MX_GPIO_Init+0x204>)
 800a4a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4a6:	61bb      	str	r3, [r7, #24]
 800a4a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	617b      	str	r3, [r7, #20]
 800a4ae:	4b65      	ldr	r3, [pc, #404]	; (800a644 <MX_GPIO_Init+0x204>)
 800a4b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4b2:	4a64      	ldr	r2, [pc, #400]	; (800a644 <MX_GPIO_Init+0x204>)
 800a4b4:	f043 0301 	orr.w	r3, r3, #1
 800a4b8:	6313      	str	r3, [r2, #48]	; 0x30
 800a4ba:	4b62      	ldr	r3, [pc, #392]	; (800a644 <MX_GPIO_Init+0x204>)
 800a4bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4be:	f003 0301 	and.w	r3, r3, #1
 800a4c2:	617b      	str	r3, [r7, #20]
 800a4c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	613b      	str	r3, [r7, #16]
 800a4ca:	4b5e      	ldr	r3, [pc, #376]	; (800a644 <MX_GPIO_Init+0x204>)
 800a4cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ce:	4a5d      	ldr	r2, [pc, #372]	; (800a644 <MX_GPIO_Init+0x204>)
 800a4d0:	f043 0302 	orr.w	r3, r3, #2
 800a4d4:	6313      	str	r3, [r2, #48]	; 0x30
 800a4d6:	4b5b      	ldr	r3, [pc, #364]	; (800a644 <MX_GPIO_Init+0x204>)
 800a4d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4da:	f003 0302 	and.w	r3, r3, #2
 800a4de:	613b      	str	r3, [r7, #16]
 800a4e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	60fb      	str	r3, [r7, #12]
 800a4e6:	4b57      	ldr	r3, [pc, #348]	; (800a644 <MX_GPIO_Init+0x204>)
 800a4e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ea:	4a56      	ldr	r2, [pc, #344]	; (800a644 <MX_GPIO_Init+0x204>)
 800a4ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4f0:	6313      	str	r3, [r2, #48]	; 0x30
 800a4f2:	4b54      	ldr	r3, [pc, #336]	; (800a644 <MX_GPIO_Init+0x204>)
 800a4f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4fa:	60fb      	str	r3, [r7, #12]
 800a4fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a4fe:	2300      	movs	r3, #0
 800a500:	60bb      	str	r3, [r7, #8]
 800a502:	4b50      	ldr	r3, [pc, #320]	; (800a644 <MX_GPIO_Init+0x204>)
 800a504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a506:	4a4f      	ldr	r2, [pc, #316]	; (800a644 <MX_GPIO_Init+0x204>)
 800a508:	f043 0310 	orr.w	r3, r3, #16
 800a50c:	6313      	str	r3, [r2, #48]	; 0x30
 800a50e:	4b4d      	ldr	r3, [pc, #308]	; (800a644 <MX_GPIO_Init+0x204>)
 800a510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a512:	f003 0310 	and.w	r3, r3, #16
 800a516:	60bb      	str	r3, [r7, #8]
 800a518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a51a:	2300      	movs	r3, #0
 800a51c:	607b      	str	r3, [r7, #4]
 800a51e:	4b49      	ldr	r3, [pc, #292]	; (800a644 <MX_GPIO_Init+0x204>)
 800a520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a522:	4a48      	ldr	r2, [pc, #288]	; (800a644 <MX_GPIO_Init+0x204>)
 800a524:	f043 0308 	orr.w	r3, r3, #8
 800a528:	6313      	str	r3, [r2, #48]	; 0x30
 800a52a:	4b46      	ldr	r3, [pc, #280]	; (800a644 <MX_GPIO_Init+0x204>)
 800a52c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a52e:	f003 0308 	and.w	r3, r3, #8
 800a532:	607b      	str	r3, [r7, #4]
 800a534:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800a536:	2200      	movs	r2, #0
 800a538:	2116      	movs	r1, #22
 800a53a:	4843      	ldr	r0, [pc, #268]	; (800a648 <MX_GPIO_Init+0x208>)
 800a53c:	f7f6 fcd2 	bl	8000ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800a540:	2200      	movs	r2, #0
 800a542:	2180      	movs	r1, #128	; 0x80
 800a544:	4841      	ldr	r0, [pc, #260]	; (800a64c <MX_GPIO_Init+0x20c>)
 800a546:	f7f6 fccd 	bl	8000ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800a54a:	2200      	movs	r2, #0
 800a54c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800a550:	483f      	ldr	r0, [pc, #252]	; (800a650 <MX_GPIO_Init+0x210>)
 800a552:	f7f6 fcc7 	bl	8000ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800a556:	2200      	movs	r2, #0
 800a558:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800a55c:	483d      	ldr	r0, [pc, #244]	; (800a654 <MX_GPIO_Init+0x214>)
 800a55e:	f7f6 fcc1 	bl	8000ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800a562:	2316      	movs	r3, #22
 800a564:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a566:	2301      	movs	r3, #1
 800a568:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a56a:	2300      	movs	r3, #0
 800a56c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a56e:	2300      	movs	r3, #0
 800a570:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a576:	4619      	mov	r1, r3
 800a578:	4833      	ldr	r0, [pc, #204]	; (800a648 <MX_GPIO_Init+0x208>)
 800a57a:	f7f6 fb09 	bl	8000b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800a57e:	f248 0307 	movw	r3, #32775	; 0x8007
 800a582:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800a584:	4b34      	ldr	r3, [pc, #208]	; (800a658 <MX_GPIO_Init+0x218>)
 800a586:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a588:	2300      	movs	r3, #0
 800a58a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a58c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a590:	4619      	mov	r1, r3
 800a592:	482e      	ldr	r0, [pc, #184]	; (800a64c <MX_GPIO_Init+0x20c>)
 800a594:	f7f6 fafc 	bl	8000b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800a598:	2380      	movs	r3, #128	; 0x80
 800a59a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a59c:	2301      	movs	r3, #1
 800a59e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800a5a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	4827      	ldr	r0, [pc, #156]	; (800a64c <MX_GPIO_Init+0x20c>)
 800a5b0:	f7f6 faee 	bl	8000b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800a5b4:	2320      	movs	r3, #32
 800a5b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800a5b8:	4b27      	ldr	r3, [pc, #156]	; (800a658 <MX_GPIO_Init+0x218>)
 800a5ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800a5c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5c4:	4619      	mov	r1, r3
 800a5c6:	4820      	ldr	r0, [pc, #128]	; (800a648 <MX_GPIO_Init+0x208>)
 800a5c8:	f7f6 fae2 	bl	8000b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800a5cc:	2304      	movs	r3, #4
 800a5ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800a5d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5dc:	4619      	mov	r1, r3
 800a5de:	481f      	ldr	r0, [pc, #124]	; (800a65c <MX_GPIO_Init+0x21c>)
 800a5e0:	f7f6 fad6 	bl	8000b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 800a5e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a5e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800a5f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	4815      	ldr	r0, [pc, #84]	; (800a650 <MX_GPIO_Init+0x210>)
 800a5fa:	f7f6 fac9 	bl	8000b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800a5fe:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800a602:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a604:	2301      	movs	r3, #1
 800a606:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a608:	2300      	movs	r3, #0
 800a60a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a60c:	2300      	movs	r3, #0
 800a60e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a614:	4619      	mov	r1, r3
 800a616:	480e      	ldr	r0, [pc, #56]	; (800a650 <MX_GPIO_Init+0x210>)
 800a618:	f7f6 faba 	bl	8000b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800a61c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800a620:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a622:	2301      	movs	r3, #1
 800a624:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a626:	2300      	movs	r3, #0
 800a628:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a62a:	2300      	movs	r3, #0
 800a62c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a62e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a632:	4619      	mov	r1, r3
 800a634:	4807      	ldr	r0, [pc, #28]	; (800a654 <MX_GPIO_Init+0x214>)
 800a636:	f7f6 faab 	bl	8000b90 <HAL_GPIO_Init>

}
 800a63a:	bf00      	nop
 800a63c:	3738      	adds	r7, #56	; 0x38
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	40023800 	.word	0x40023800
 800a648:	40020800 	.word	0x40020800
 800a64c:	40020000 	.word	0x40020000
 800a650:	40020c00 	.word	0x40020c00
 800a654:	40021800 	.word	0x40021800
 800a658:	10120000 	.word	0x10120000
 800a65c:	40020400 	.word	0x40020400

0800a660 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 800a664:	4b1b      	ldr	r3, [pc, #108]	; (800a6d4 <MX_I2C3_Init+0x74>)
 800a666:	4a1c      	ldr	r2, [pc, #112]	; (800a6d8 <MX_I2C3_Init+0x78>)
 800a668:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800a66a:	4b1a      	ldr	r3, [pc, #104]	; (800a6d4 <MX_I2C3_Init+0x74>)
 800a66c:	4a1b      	ldr	r2, [pc, #108]	; (800a6dc <MX_I2C3_Init+0x7c>)
 800a66e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800a670:	4b18      	ldr	r3, [pc, #96]	; (800a6d4 <MX_I2C3_Init+0x74>)
 800a672:	2200      	movs	r2, #0
 800a674:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800a676:	4b17      	ldr	r3, [pc, #92]	; (800a6d4 <MX_I2C3_Init+0x74>)
 800a678:	2200      	movs	r2, #0
 800a67a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a67c:	4b15      	ldr	r3, [pc, #84]	; (800a6d4 <MX_I2C3_Init+0x74>)
 800a67e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a682:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a684:	4b13      	ldr	r3, [pc, #76]	; (800a6d4 <MX_I2C3_Init+0x74>)
 800a686:	2200      	movs	r2, #0
 800a688:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800a68a:	4b12      	ldr	r3, [pc, #72]	; (800a6d4 <MX_I2C3_Init+0x74>)
 800a68c:	2200      	movs	r2, #0
 800a68e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a690:	4b10      	ldr	r3, [pc, #64]	; (800a6d4 <MX_I2C3_Init+0x74>)
 800a692:	2200      	movs	r2, #0
 800a694:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a696:	4b0f      	ldr	r3, [pc, #60]	; (800a6d4 <MX_I2C3_Init+0x74>)
 800a698:	2200      	movs	r2, #0
 800a69a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800a69c:	480d      	ldr	r0, [pc, #52]	; (800a6d4 <MX_I2C3_Init+0x74>)
 800a69e:	f7f8 f8bd 	bl	800281c <HAL_I2C_Init>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d001      	beq.n	800a6ac <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800a6a8:	f000 fad4 	bl	800ac54 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a6ac:	2100      	movs	r1, #0
 800a6ae:	4809      	ldr	r0, [pc, #36]	; (800a6d4 <MX_I2C3_Init+0x74>)
 800a6b0:	f7f8 f9dc 	bl	8002a6c <HAL_I2CEx_ConfigAnalogFilter>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d001      	beq.n	800a6be <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800a6ba:	f000 facb 	bl	800ac54 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800a6be:	2100      	movs	r1, #0
 800a6c0:	4804      	ldr	r0, [pc, #16]	; (800a6d4 <MX_I2C3_Init+0x74>)
 800a6c2:	f7f8 fa0f 	bl	8002ae4 <HAL_I2CEx_ConfigDigitalFilter>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d001      	beq.n	800a6d0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800a6cc:	f000 fac2 	bl	800ac54 <Error_Handler>
  }

}
 800a6d0:	bf00      	nop
 800a6d2:	bd80      	pop	{r7, pc}
 800a6d4:	200084ec 	.word	0x200084ec
 800a6d8:	40005c00 	.word	0x40005c00
 800a6dc:	000186a0 	.word	0x000186a0

0800a6e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b08a      	sub	sp, #40	; 0x28
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a6e8:	f107 0314 	add.w	r3, r7, #20
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	601a      	str	r2, [r3, #0]
 800a6f0:	605a      	str	r2, [r3, #4]
 800a6f2:	609a      	str	r2, [r3, #8]
 800a6f4:	60da      	str	r2, [r3, #12]
 800a6f6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a29      	ldr	r2, [pc, #164]	; (800a7a4 <HAL_I2C_MspInit+0xc4>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d14b      	bne.n	800a79a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a702:	2300      	movs	r3, #0
 800a704:	613b      	str	r3, [r7, #16]
 800a706:	4b28      	ldr	r3, [pc, #160]	; (800a7a8 <HAL_I2C_MspInit+0xc8>)
 800a708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a70a:	4a27      	ldr	r2, [pc, #156]	; (800a7a8 <HAL_I2C_MspInit+0xc8>)
 800a70c:	f043 0304 	orr.w	r3, r3, #4
 800a710:	6313      	str	r3, [r2, #48]	; 0x30
 800a712:	4b25      	ldr	r3, [pc, #148]	; (800a7a8 <HAL_I2C_MspInit+0xc8>)
 800a714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a716:	f003 0304 	and.w	r3, r3, #4
 800a71a:	613b      	str	r3, [r7, #16]
 800a71c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a71e:	2300      	movs	r3, #0
 800a720:	60fb      	str	r3, [r7, #12]
 800a722:	4b21      	ldr	r3, [pc, #132]	; (800a7a8 <HAL_I2C_MspInit+0xc8>)
 800a724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a726:	4a20      	ldr	r2, [pc, #128]	; (800a7a8 <HAL_I2C_MspInit+0xc8>)
 800a728:	f043 0301 	orr.w	r3, r3, #1
 800a72c:	6313      	str	r3, [r2, #48]	; 0x30
 800a72e:	4b1e      	ldr	r3, [pc, #120]	; (800a7a8 <HAL_I2C_MspInit+0xc8>)
 800a730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a732:	f003 0301 	and.w	r3, r3, #1
 800a736:	60fb      	str	r3, [r7, #12]
 800a738:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800a73a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a73e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a740:	2312      	movs	r3, #18
 800a742:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a744:	2301      	movs	r3, #1
 800a746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a748:	2300      	movs	r3, #0
 800a74a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800a74c:	2304      	movs	r3, #4
 800a74e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800a750:	f107 0314 	add.w	r3, r7, #20
 800a754:	4619      	mov	r1, r3
 800a756:	4815      	ldr	r0, [pc, #84]	; (800a7ac <HAL_I2C_MspInit+0xcc>)
 800a758:	f7f6 fa1a 	bl	8000b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800a75c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a762:	2312      	movs	r3, #18
 800a764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a766:	2301      	movs	r3, #1
 800a768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a76a:	2300      	movs	r3, #0
 800a76c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800a76e:	2304      	movs	r3, #4
 800a770:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800a772:	f107 0314 	add.w	r3, r7, #20
 800a776:	4619      	mov	r1, r3
 800a778:	480d      	ldr	r0, [pc, #52]	; (800a7b0 <HAL_I2C_MspInit+0xd0>)
 800a77a:	f7f6 fa09 	bl	8000b90 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800a77e:	2300      	movs	r3, #0
 800a780:	60bb      	str	r3, [r7, #8]
 800a782:	4b09      	ldr	r3, [pc, #36]	; (800a7a8 <HAL_I2C_MspInit+0xc8>)
 800a784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a786:	4a08      	ldr	r2, [pc, #32]	; (800a7a8 <HAL_I2C_MspInit+0xc8>)
 800a788:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a78c:	6413      	str	r3, [r2, #64]	; 0x40
 800a78e:	4b06      	ldr	r3, [pc, #24]	; (800a7a8 <HAL_I2C_MspInit+0xc8>)
 800a790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a792:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a796:	60bb      	str	r3, [r7, #8]
 800a798:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800a79a:	bf00      	nop
 800a79c:	3728      	adds	r7, #40	; 0x28
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	40005c00 	.word	0x40005c00
 800a7a8:	40023800 	.word	0x40023800
 800a7ac:	40020800 	.word	0x40020800
 800a7b0:	40020000 	.word	0x40020000

0800a7b4 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b08e      	sub	sp, #56	; 0x38
 800a7b8:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800a7ba:	1d3b      	adds	r3, r7, #4
 800a7bc:	2234      	movs	r2, #52	; 0x34
 800a7be:	2100      	movs	r1, #0
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f001 f852 	bl	800b86a <memset>

  hltdc.Instance = LTDC;
 800a7c6:	4b39      	ldr	r3, [pc, #228]	; (800a8ac <MX_LTDC_Init+0xf8>)
 800a7c8:	4a39      	ldr	r2, [pc, #228]	; (800a8b0 <MX_LTDC_Init+0xfc>)
 800a7ca:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800a7cc:	4b37      	ldr	r3, [pc, #220]	; (800a8ac <MX_LTDC_Init+0xf8>)
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800a7d2:	4b36      	ldr	r3, [pc, #216]	; (800a8ac <MX_LTDC_Init+0xf8>)
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800a7d8:	4b34      	ldr	r3, [pc, #208]	; (800a8ac <MX_LTDC_Init+0xf8>)
 800a7da:	2200      	movs	r2, #0
 800a7dc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800a7de:	4b33      	ldr	r3, [pc, #204]	; (800a8ac <MX_LTDC_Init+0xf8>)
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 800a7e4:	4b31      	ldr	r3, [pc, #196]	; (800a8ac <MX_LTDC_Init+0xf8>)
 800a7e6:	2209      	movs	r2, #9
 800a7e8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800a7ea:	4b30      	ldr	r3, [pc, #192]	; (800a8ac <MX_LTDC_Init+0xf8>)
 800a7ec:	2201      	movs	r2, #1
 800a7ee:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 800a7f0:	4b2e      	ldr	r3, [pc, #184]	; (800a8ac <MX_LTDC_Init+0xf8>)
 800a7f2:	221d      	movs	r2, #29
 800a7f4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800a7f6:	4b2d      	ldr	r3, [pc, #180]	; (800a8ac <MX_LTDC_Init+0xf8>)
 800a7f8:	2203      	movs	r2, #3
 800a7fa:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 800a7fc:	4b2b      	ldr	r3, [pc, #172]	; (800a8ac <MX_LTDC_Init+0xf8>)
 800a7fe:	f240 120d 	movw	r2, #269	; 0x10d
 800a802:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 800a804:	4b29      	ldr	r3, [pc, #164]	; (800a8ac <MX_LTDC_Init+0xf8>)
 800a806:	f240 1243 	movw	r2, #323	; 0x143
 800a80a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 800a80c:	4b27      	ldr	r3, [pc, #156]	; (800a8ac <MX_LTDC_Init+0xf8>)
 800a80e:	f240 1217 	movw	r2, #279	; 0x117
 800a812:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 800a814:	4b25      	ldr	r3, [pc, #148]	; (800a8ac <MX_LTDC_Init+0xf8>)
 800a816:	f240 1247 	movw	r2, #327	; 0x147
 800a81a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800a81c:	4b23      	ldr	r3, [pc, #140]	; (800a8ac <MX_LTDC_Init+0xf8>)
 800a81e:	2200      	movs	r2, #0
 800a820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800a824:	4b21      	ldr	r3, [pc, #132]	; (800a8ac <MX_LTDC_Init+0xf8>)
 800a826:	2200      	movs	r2, #0
 800a828:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800a82c:	4b1f      	ldr	r3, [pc, #124]	; (800a8ac <MX_LTDC_Init+0xf8>)
 800a82e:	2200      	movs	r2, #0
 800a830:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800a834:	481d      	ldr	r0, [pc, #116]	; (800a8ac <MX_LTDC_Init+0xf8>)
 800a836:	f7f8 f995 	bl	8002b64 <HAL_LTDC_Init>
 800a83a:	4603      	mov	r3, r0
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d001      	beq.n	800a844 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800a840:	f000 fa08 	bl	800ac54 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800a844:	2300      	movs	r3, #0
 800a846:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 800a848:	23f0      	movs	r3, #240	; 0xf0
 800a84a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800a84c:	2300      	movs	r3, #0
 800a84e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 800a850:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a854:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800a856:	2302      	movs	r3, #2
 800a858:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800a85a:	23ff      	movs	r3, #255	; 0xff
 800a85c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800a85e:	2300      	movs	r3, #0
 800a860:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800a862:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800a866:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800a868:	2307      	movs	r3, #7
 800a86a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800a86c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800a870:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 800a872:	23f0      	movs	r3, #240	; 0xf0
 800a874:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 800a876:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a87a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800a87c:	2300      	movs	r3, #0
 800a87e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800a882:	2300      	movs	r3, #0
 800a884:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800a888:	2300      	movs	r3, #0
 800a88a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800a88e:	1d3b      	adds	r3, r7, #4
 800a890:	2200      	movs	r2, #0
 800a892:	4619      	mov	r1, r3
 800a894:	4805      	ldr	r0, [pc, #20]	; (800a8ac <MX_LTDC_Init+0xf8>)
 800a896:	f7f8 faf7 	bl	8002e88 <HAL_LTDC_ConfigLayer>
 800a89a:	4603      	mov	r3, r0
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d001      	beq.n	800a8a4 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 800a8a0:	f000 f9d8 	bl	800ac54 <Error_Handler>
  }

}
 800a8a4:	bf00      	nop
 800a8a6:	3738      	adds	r7, #56	; 0x38
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}
 800a8ac:	20008540 	.word	0x20008540
 800a8b0:	40016800 	.word	0x40016800

0800a8b4 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b08e      	sub	sp, #56	; 0x38
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a8bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	601a      	str	r2, [r3, #0]
 800a8c4:	605a      	str	r2, [r3, #4]
 800a8c6:	609a      	str	r2, [r3, #8]
 800a8c8:	60da      	str	r2, [r3, #12]
 800a8ca:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a7b      	ldr	r2, [pc, #492]	; (800aac0 <HAL_LTDC_MspInit+0x20c>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	f040 80f0 	bne.w	800aab8 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800a8d8:	2300      	movs	r3, #0
 800a8da:	623b      	str	r3, [r7, #32]
 800a8dc:	4b79      	ldr	r3, [pc, #484]	; (800aac4 <HAL_LTDC_MspInit+0x210>)
 800a8de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8e0:	4a78      	ldr	r2, [pc, #480]	; (800aac4 <HAL_LTDC_MspInit+0x210>)
 800a8e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a8e6:	6453      	str	r3, [r2, #68]	; 0x44
 800a8e8:	4b76      	ldr	r3, [pc, #472]	; (800aac4 <HAL_LTDC_MspInit+0x210>)
 800a8ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a8f0:	623b      	str	r3, [r7, #32]
 800a8f2:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	61fb      	str	r3, [r7, #28]
 800a8f8:	4b72      	ldr	r3, [pc, #456]	; (800aac4 <HAL_LTDC_MspInit+0x210>)
 800a8fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8fc:	4a71      	ldr	r2, [pc, #452]	; (800aac4 <HAL_LTDC_MspInit+0x210>)
 800a8fe:	f043 0320 	orr.w	r3, r3, #32
 800a902:	6313      	str	r3, [r2, #48]	; 0x30
 800a904:	4b6f      	ldr	r3, [pc, #444]	; (800aac4 <HAL_LTDC_MspInit+0x210>)
 800a906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a908:	f003 0320 	and.w	r3, r3, #32
 800a90c:	61fb      	str	r3, [r7, #28]
 800a90e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a910:	2300      	movs	r3, #0
 800a912:	61bb      	str	r3, [r7, #24]
 800a914:	4b6b      	ldr	r3, [pc, #428]	; (800aac4 <HAL_LTDC_MspInit+0x210>)
 800a916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a918:	4a6a      	ldr	r2, [pc, #424]	; (800aac4 <HAL_LTDC_MspInit+0x210>)
 800a91a:	f043 0301 	orr.w	r3, r3, #1
 800a91e:	6313      	str	r3, [r2, #48]	; 0x30
 800a920:	4b68      	ldr	r3, [pc, #416]	; (800aac4 <HAL_LTDC_MspInit+0x210>)
 800a922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a924:	f003 0301 	and.w	r3, r3, #1
 800a928:	61bb      	str	r3, [r7, #24]
 800a92a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a92c:	2300      	movs	r3, #0
 800a92e:	617b      	str	r3, [r7, #20]
 800a930:	4b64      	ldr	r3, [pc, #400]	; (800aac4 <HAL_LTDC_MspInit+0x210>)
 800a932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a934:	4a63      	ldr	r2, [pc, #396]	; (800aac4 <HAL_LTDC_MspInit+0x210>)
 800a936:	f043 0302 	orr.w	r3, r3, #2
 800a93a:	6313      	str	r3, [r2, #48]	; 0x30
 800a93c:	4b61      	ldr	r3, [pc, #388]	; (800aac4 <HAL_LTDC_MspInit+0x210>)
 800a93e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a940:	f003 0302 	and.w	r3, r3, #2
 800a944:	617b      	str	r3, [r7, #20]
 800a946:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a948:	2300      	movs	r3, #0
 800a94a:	613b      	str	r3, [r7, #16]
 800a94c:	4b5d      	ldr	r3, [pc, #372]	; (800aac4 <HAL_LTDC_MspInit+0x210>)
 800a94e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a950:	4a5c      	ldr	r2, [pc, #368]	; (800aac4 <HAL_LTDC_MspInit+0x210>)
 800a952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a956:	6313      	str	r3, [r2, #48]	; 0x30
 800a958:	4b5a      	ldr	r3, [pc, #360]	; (800aac4 <HAL_LTDC_MspInit+0x210>)
 800a95a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a95c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a960:	613b      	str	r3, [r7, #16]
 800a962:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a964:	2300      	movs	r3, #0
 800a966:	60fb      	str	r3, [r7, #12]
 800a968:	4b56      	ldr	r3, [pc, #344]	; (800aac4 <HAL_LTDC_MspInit+0x210>)
 800a96a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a96c:	4a55      	ldr	r2, [pc, #340]	; (800aac4 <HAL_LTDC_MspInit+0x210>)
 800a96e:	f043 0304 	orr.w	r3, r3, #4
 800a972:	6313      	str	r3, [r2, #48]	; 0x30
 800a974:	4b53      	ldr	r3, [pc, #332]	; (800aac4 <HAL_LTDC_MspInit+0x210>)
 800a976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a978:	f003 0304 	and.w	r3, r3, #4
 800a97c:	60fb      	str	r3, [r7, #12]
 800a97e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a980:	2300      	movs	r3, #0
 800a982:	60bb      	str	r3, [r7, #8]
 800a984:	4b4f      	ldr	r3, [pc, #316]	; (800aac4 <HAL_LTDC_MspInit+0x210>)
 800a986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a988:	4a4e      	ldr	r2, [pc, #312]	; (800aac4 <HAL_LTDC_MspInit+0x210>)
 800a98a:	f043 0308 	orr.w	r3, r3, #8
 800a98e:	6313      	str	r3, [r2, #48]	; 0x30
 800a990:	4b4c      	ldr	r3, [pc, #304]	; (800aac4 <HAL_LTDC_MspInit+0x210>)
 800a992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a994:	f003 0308 	and.w	r3, r3, #8
 800a998:	60bb      	str	r3, [r7, #8]
 800a99a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800a99c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9a2:	2302      	movs	r3, #2
 800a9a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800a9ae:	230e      	movs	r3, #14
 800a9b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800a9b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	4843      	ldr	r0, [pc, #268]	; (800aac8 <HAL_LTDC_MspInit+0x214>)
 800a9ba:	f7f6 f8e9 	bl	8000b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 800a9be:	f641 0358 	movw	r3, #6232	; 0x1858
 800a9c2:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9c4:	2302      	movs	r3, #2
 800a9c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800a9d0:	230e      	movs	r3, #14
 800a9d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9d8:	4619      	mov	r1, r3
 800a9da:	483c      	ldr	r0, [pc, #240]	; (800aacc <HAL_LTDC_MspInit+0x218>)
 800a9dc:	f7f6 f8d8 	bl	8000b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800a9e0:	2303      	movs	r3, #3
 800a9e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9e4:	2302      	movs	r3, #2
 800a9e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800a9f0:	2309      	movs	r3, #9
 800a9f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a9f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	4835      	ldr	r0, [pc, #212]	; (800aad0 <HAL_LTDC_MspInit+0x21c>)
 800a9fc:	f7f6 f8c8 	bl	8000b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800aa00:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800aa04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa06:	2302      	movs	r3, #2
 800aa08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800aa12:	230e      	movs	r3, #14
 800aa14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aa16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	482c      	ldr	r0, [pc, #176]	; (800aad0 <HAL_LTDC_MspInit+0x21c>)
 800aa1e:	f7f6 f8b7 	bl	8000b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800aa22:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800aa26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa28:	2302      	movs	r3, #2
 800aa2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa30:	2300      	movs	r3, #0
 800aa32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800aa34:	230e      	movs	r3, #14
 800aa36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800aa38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	4825      	ldr	r0, [pc, #148]	; (800aad4 <HAL_LTDC_MspInit+0x220>)
 800aa40:	f7f6 f8a6 	bl	8000b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800aa44:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800aa48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa4a:	2302      	movs	r3, #2
 800aa4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa52:	2300      	movs	r3, #0
 800aa54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800aa56:	230e      	movs	r3, #14
 800aa58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aa5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa5e:	4619      	mov	r1, r3
 800aa60:	481d      	ldr	r0, [pc, #116]	; (800aad8 <HAL_LTDC_MspInit+0x224>)
 800aa62:	f7f6 f895 	bl	8000b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800aa66:	2348      	movs	r3, #72	; 0x48
 800aa68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa6a:	2302      	movs	r3, #2
 800aa6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa72:	2300      	movs	r3, #0
 800aa74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800aa76:	230e      	movs	r3, #14
 800aa78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800aa7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa7e:	4619      	mov	r1, r3
 800aa80:	4816      	ldr	r0, [pc, #88]	; (800aadc <HAL_LTDC_MspInit+0x228>)
 800aa82:	f7f6 f885 	bl	8000b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800aa86:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800aa8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa8c:	2302      	movs	r3, #2
 800aa8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa90:	2300      	movs	r3, #0
 800aa92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa94:	2300      	movs	r3, #0
 800aa96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800aa98:	2309      	movs	r3, #9
 800aa9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800aa9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	480c      	ldr	r0, [pc, #48]	; (800aad4 <HAL_LTDC_MspInit+0x220>)
 800aaa4:	f7f6 f874 	bl	8000b90 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	2105      	movs	r1, #5
 800aaac:	2058      	movs	r0, #88	; 0x58
 800aaae:	f7f5 fe3b 	bl	8000728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800aab2:	2058      	movs	r0, #88	; 0x58
 800aab4:	f7f5 fe54 	bl	8000760 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800aab8:	bf00      	nop
 800aaba:	3738      	adds	r7, #56	; 0x38
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	40016800 	.word	0x40016800
 800aac4:	40023800 	.word	0x40023800
 800aac8:	40021400 	.word	0x40021400
 800aacc:	40020000 	.word	0x40020000
 800aad0:	40020400 	.word	0x40020400
 800aad4:	40021800 	.word	0x40021800
 800aad8:	40020800 	.word	0x40020800
 800aadc:	40020c00 	.word	0x40020c00

0800aae0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800aae4:	f7f5 fd04 	bl	80004f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800aae8:	f000 f81e 	bl	800ab28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800aaec:	f7ff fca8 	bl	800a440 <MX_GPIO_Init>
  MX_CRC_Init();
 800aaf0:	f7ff fad0 	bl	800a094 <MX_CRC_Init>
  MX_DMA2D_Init();
 800aaf4:	f7ff fb04 	bl	800a100 <MX_DMA2D_Init>
  MX_FMC_Init();
 800aaf8:	f7ff fb5c 	bl	800a1b4 <MX_FMC_Init>
  MX_I2C3_Init();
 800aafc:	f7ff fdb0 	bl	800a660 <MX_I2C3_Init>
  MX_LTDC_Init();
 800ab00:	f7ff fe58 	bl	800a7b4 <MX_LTDC_Init>
  MX_SPI5_Init();
 800ab04:	f000 f8ae 	bl	800ac64 <MX_SPI5_Init>
  MX_TIM1_Init();
 800ab08:	f000 fa54 	bl	800afb4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800ab0c:	f000 fac4 	bl	800b098 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800ab10:	f7ff fc70 	bl	800a3f4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800ab14:	f7fd f88c 	bl	8007c30 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //MX_TOGGLE_PIN();
	  HAL_GPIO_TogglePin(GPIOG, LD3_Pin);
 800ab18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ab1c:	4801      	ldr	r0, [pc, #4]	; (800ab24 <main+0x44>)
 800ab1e:	f7f6 f9fa 	bl	8000f16 <HAL_GPIO_TogglePin>
 800ab22:	e7f9      	b.n	800ab18 <main+0x38>
 800ab24:	40021800 	.word	0x40021800

0800ab28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b0a0      	sub	sp, #128	; 0x80
 800ab2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ab2e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ab32:	2230      	movs	r2, #48	; 0x30
 800ab34:	2100      	movs	r1, #0
 800ab36:	4618      	mov	r0, r3
 800ab38:	f000 fe97 	bl	800b86a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ab3c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ab40:	2200      	movs	r2, #0
 800ab42:	601a      	str	r2, [r3, #0]
 800ab44:	605a      	str	r2, [r3, #4]
 800ab46:	609a      	str	r2, [r3, #8]
 800ab48:	60da      	str	r2, [r3, #12]
 800ab4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ab4c:	f107 030c 	add.w	r3, r7, #12
 800ab50:	2230      	movs	r2, #48	; 0x30
 800ab52:	2100      	movs	r1, #0
 800ab54:	4618      	mov	r0, r3
 800ab56:	f000 fe88 	bl	800b86a <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	60bb      	str	r3, [r7, #8]
 800ab5e:	4b32      	ldr	r3, [pc, #200]	; (800ac28 <SystemClock_Config+0x100>)
 800ab60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab62:	4a31      	ldr	r2, [pc, #196]	; (800ac28 <SystemClock_Config+0x100>)
 800ab64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab68:	6413      	str	r3, [r2, #64]	; 0x40
 800ab6a:	4b2f      	ldr	r3, [pc, #188]	; (800ac28 <SystemClock_Config+0x100>)
 800ab6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab72:	60bb      	str	r3, [r7, #8]
 800ab74:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800ab76:	2300      	movs	r3, #0
 800ab78:	607b      	str	r3, [r7, #4]
 800ab7a:	4b2c      	ldr	r3, [pc, #176]	; (800ac2c <SystemClock_Config+0x104>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800ab82:	4a2a      	ldr	r2, [pc, #168]	; (800ac2c <SystemClock_Config+0x104>)
 800ab84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ab88:	6013      	str	r3, [r2, #0]
 800ab8a:	4b28      	ldr	r3, [pc, #160]	; (800ac2c <SystemClock_Config+0x104>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ab92:	607b      	str	r3, [r7, #4]
 800ab94:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800ab96:	2301      	movs	r3, #1
 800ab98:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800ab9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ab9e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800aba0:	2302      	movs	r3, #2
 800aba2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800aba4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800aba8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800abaa:	2304      	movs	r3, #4
 800abac:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 800abae:	2348      	movs	r3, #72	; 0x48
 800abb0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800abb2:	2302      	movs	r3, #2
 800abb4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800abb6:	2303      	movs	r3, #3
 800abb8:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800abba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800abbe:	4618      	mov	r0, r3
 800abc0:	f7f8 fb38 	bl	8003234 <HAL_RCC_OscConfig>
 800abc4:	4603      	mov	r3, r0
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d001      	beq.n	800abce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800abca:	f000 f843 	bl	800ac54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800abce:	230f      	movs	r3, #15
 800abd0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800abd2:	2302      	movs	r3, #2
 800abd4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800abd6:	2300      	movs	r3, #0
 800abd8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800abda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800abde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800abe0:	2300      	movs	r3, #0
 800abe2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800abe4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800abe8:	2102      	movs	r1, #2
 800abea:	4618      	mov	r0, r3
 800abec:	f7f8 fd64 	bl	80036b8 <HAL_RCC_ClockConfig>
 800abf0:	4603      	mov	r3, r0
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d001      	beq.n	800abfa <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800abf6:	f000 f82d 	bl	800ac54 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800abfa:	2308      	movs	r3, #8
 800abfc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800abfe:	2332      	movs	r3, #50	; 0x32
 800ac00:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800ac02:	2302      	movs	r3, #2
 800ac04:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800ac06:	2300      	movs	r3, #0
 800ac08:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ac0a:	f107 030c 	add.w	r3, r7, #12
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f7f8 ff72 	bl	8003af8 <HAL_RCCEx_PeriphCLKConfig>
 800ac14:	4603      	mov	r3, r0
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d001      	beq.n	800ac1e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800ac1a:	f000 f81b 	bl	800ac54 <Error_Handler>
  }
}
 800ac1e:	bf00      	nop
 800ac20:	3780      	adds	r7, #128	; 0x80
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	bf00      	nop
 800ac28:	40023800 	.word	0x40023800
 800ac2c:	40007000 	.word	0x40007000

0800ac30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b082      	sub	sp, #8
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4a04      	ldr	r2, [pc, #16]	; (800ac50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d101      	bne.n	800ac46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800ac42:	f7f5 fc77 	bl	8000534 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800ac46:	bf00      	nop
 800ac48:	3708      	adds	r7, #8
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	bf00      	nop
 800ac50:	40001000 	.word	0x40001000

0800ac54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ac54:	b480      	push	{r7}
 800ac56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800ac58:	bf00      	nop
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr
	...

0800ac64 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 800ac68:	4b17      	ldr	r3, [pc, #92]	; (800acc8 <MX_SPI5_Init+0x64>)
 800ac6a:	4a18      	ldr	r2, [pc, #96]	; (800accc <MX_SPI5_Init+0x68>)
 800ac6c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800ac6e:	4b16      	ldr	r3, [pc, #88]	; (800acc8 <MX_SPI5_Init+0x64>)
 800ac70:	f44f 7282 	mov.w	r2, #260	; 0x104
 800ac74:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800ac76:	4b14      	ldr	r3, [pc, #80]	; (800acc8 <MX_SPI5_Init+0x64>)
 800ac78:	2200      	movs	r2, #0
 800ac7a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800ac7c:	4b12      	ldr	r3, [pc, #72]	; (800acc8 <MX_SPI5_Init+0x64>)
 800ac7e:	2200      	movs	r2, #0
 800ac80:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800ac82:	4b11      	ldr	r3, [pc, #68]	; (800acc8 <MX_SPI5_Init+0x64>)
 800ac84:	2200      	movs	r2, #0
 800ac86:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800ac88:	4b0f      	ldr	r3, [pc, #60]	; (800acc8 <MX_SPI5_Init+0x64>)
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800ac8e:	4b0e      	ldr	r3, [pc, #56]	; (800acc8 <MX_SPI5_Init+0x64>)
 800ac90:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac94:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800ac96:	4b0c      	ldr	r3, [pc, #48]	; (800acc8 <MX_SPI5_Init+0x64>)
 800ac98:	2218      	movs	r2, #24
 800ac9a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ac9c:	4b0a      	ldr	r3, [pc, #40]	; (800acc8 <MX_SPI5_Init+0x64>)
 800ac9e:	2200      	movs	r2, #0
 800aca0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800aca2:	4b09      	ldr	r3, [pc, #36]	; (800acc8 <MX_SPI5_Init+0x64>)
 800aca4:	2200      	movs	r2, #0
 800aca6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aca8:	4b07      	ldr	r3, [pc, #28]	; (800acc8 <MX_SPI5_Init+0x64>)
 800acaa:	2200      	movs	r2, #0
 800acac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800acae:	4b06      	ldr	r3, [pc, #24]	; (800acc8 <MX_SPI5_Init+0x64>)
 800acb0:	220a      	movs	r2, #10
 800acb2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800acb4:	4804      	ldr	r0, [pc, #16]	; (800acc8 <MX_SPI5_Init+0x64>)
 800acb6:	f7f9 f8f7 	bl	8003ea8 <HAL_SPI_Init>
 800acba:	4603      	mov	r3, r0
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d001      	beq.n	800acc4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800acc0:	f7ff ffc8 	bl	800ac54 <Error_Handler>
  }

}
 800acc4:	bf00      	nop
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	200085e8 	.word	0x200085e8
 800accc:	40015000 	.word	0x40015000

0800acd0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b08a      	sub	sp, #40	; 0x28
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800acd8:	f107 0314 	add.w	r3, r7, #20
 800acdc:	2200      	movs	r2, #0
 800acde:	601a      	str	r2, [r3, #0]
 800ace0:	605a      	str	r2, [r3, #4]
 800ace2:	609a      	str	r2, [r3, #8]
 800ace4:	60da      	str	r2, [r3, #12]
 800ace6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a19      	ldr	r2, [pc, #100]	; (800ad54 <HAL_SPI_MspInit+0x84>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d12c      	bne.n	800ad4c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800acf2:	2300      	movs	r3, #0
 800acf4:	613b      	str	r3, [r7, #16]
 800acf6:	4b18      	ldr	r3, [pc, #96]	; (800ad58 <HAL_SPI_MspInit+0x88>)
 800acf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acfa:	4a17      	ldr	r2, [pc, #92]	; (800ad58 <HAL_SPI_MspInit+0x88>)
 800acfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad00:	6453      	str	r3, [r2, #68]	; 0x44
 800ad02:	4b15      	ldr	r3, [pc, #84]	; (800ad58 <HAL_SPI_MspInit+0x88>)
 800ad04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad0a:	613b      	str	r3, [r7, #16]
 800ad0c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800ad0e:	2300      	movs	r3, #0
 800ad10:	60fb      	str	r3, [r7, #12]
 800ad12:	4b11      	ldr	r3, [pc, #68]	; (800ad58 <HAL_SPI_MspInit+0x88>)
 800ad14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad16:	4a10      	ldr	r2, [pc, #64]	; (800ad58 <HAL_SPI_MspInit+0x88>)
 800ad18:	f043 0320 	orr.w	r3, r3, #32
 800ad1c:	6313      	str	r3, [r2, #48]	; 0x30
 800ad1e:	4b0e      	ldr	r3, [pc, #56]	; (800ad58 <HAL_SPI_MspInit+0x88>)
 800ad20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad22:	f003 0320 	and.w	r3, r3, #32
 800ad26:	60fb      	str	r3, [r7, #12]
 800ad28:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800ad2a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800ad2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad30:	2302      	movs	r3, #2
 800ad32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad34:	2300      	movs	r3, #0
 800ad36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800ad3c:	2305      	movs	r3, #5
 800ad3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800ad40:	f107 0314 	add.w	r3, r7, #20
 800ad44:	4619      	mov	r1, r3
 800ad46:	4805      	ldr	r0, [pc, #20]	; (800ad5c <HAL_SPI_MspInit+0x8c>)
 800ad48:	f7f5 ff22 	bl	8000b90 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800ad4c:	bf00      	nop
 800ad4e:	3728      	adds	r7, #40	; 0x28
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}
 800ad54:	40015000 	.word	0x40015000
 800ad58:	40023800 	.word	0x40023800
 800ad5c:	40021400 	.word	0x40021400

0800ad60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b082      	sub	sp, #8
 800ad64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ad66:	2300      	movs	r3, #0
 800ad68:	607b      	str	r3, [r7, #4]
 800ad6a:	4b12      	ldr	r3, [pc, #72]	; (800adb4 <HAL_MspInit+0x54>)
 800ad6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad6e:	4a11      	ldr	r2, [pc, #68]	; (800adb4 <HAL_MspInit+0x54>)
 800ad70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ad74:	6453      	str	r3, [r2, #68]	; 0x44
 800ad76:	4b0f      	ldr	r3, [pc, #60]	; (800adb4 <HAL_MspInit+0x54>)
 800ad78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad7e:	607b      	str	r3, [r7, #4]
 800ad80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ad82:	2300      	movs	r3, #0
 800ad84:	603b      	str	r3, [r7, #0]
 800ad86:	4b0b      	ldr	r3, [pc, #44]	; (800adb4 <HAL_MspInit+0x54>)
 800ad88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad8a:	4a0a      	ldr	r2, [pc, #40]	; (800adb4 <HAL_MspInit+0x54>)
 800ad8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad90:	6413      	str	r3, [r2, #64]	; 0x40
 800ad92:	4b08      	ldr	r3, [pc, #32]	; (800adb4 <HAL_MspInit+0x54>)
 800ad94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad9a:	603b      	str	r3, [r7, #0]
 800ad9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800ad9e:	2200      	movs	r2, #0
 800ada0:	210f      	movs	r1, #15
 800ada2:	f06f 0001 	mvn.w	r0, #1
 800ada6:	f7f5 fcbf 	bl	8000728 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800adaa:	bf00      	nop
 800adac:	3708      	adds	r7, #8
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}
 800adb2:	bf00      	nop
 800adb4:	40023800 	.word	0x40023800

0800adb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b08c      	sub	sp, #48	; 0x30
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800adc0:	2300      	movs	r3, #0
 800adc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800adc4:	2300      	movs	r3, #0
 800adc6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800adc8:	2200      	movs	r2, #0
 800adca:	6879      	ldr	r1, [r7, #4]
 800adcc:	2036      	movs	r0, #54	; 0x36
 800adce:	f7f5 fcab 	bl	8000728 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800add2:	2036      	movs	r0, #54	; 0x36
 800add4:	f7f5 fcc4 	bl	8000760 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800add8:	2300      	movs	r3, #0
 800adda:	60fb      	str	r3, [r7, #12]
 800addc:	4b1f      	ldr	r3, [pc, #124]	; (800ae5c <HAL_InitTick+0xa4>)
 800adde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ade0:	4a1e      	ldr	r2, [pc, #120]	; (800ae5c <HAL_InitTick+0xa4>)
 800ade2:	f043 0310 	orr.w	r3, r3, #16
 800ade6:	6413      	str	r3, [r2, #64]	; 0x40
 800ade8:	4b1c      	ldr	r3, [pc, #112]	; (800ae5c <HAL_InitTick+0xa4>)
 800adea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adec:	f003 0310 	and.w	r3, r3, #16
 800adf0:	60fb      	str	r3, [r7, #12]
 800adf2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800adf4:	f107 0210 	add.w	r2, r7, #16
 800adf8:	f107 0314 	add.w	r3, r7, #20
 800adfc:	4611      	mov	r1, r2
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7f8 fe48 	bl	8003a94 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800ae04:	f7f8 fe1e 	bl	8003a44 <HAL_RCC_GetPCLK1Freq>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	005b      	lsls	r3, r3, #1
 800ae0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800ae0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae10:	4a13      	ldr	r2, [pc, #76]	; (800ae60 <HAL_InitTick+0xa8>)
 800ae12:	fba2 2303 	umull	r2, r3, r2, r3
 800ae16:	0c9b      	lsrs	r3, r3, #18
 800ae18:	3b01      	subs	r3, #1
 800ae1a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800ae1c:	4b11      	ldr	r3, [pc, #68]	; (800ae64 <HAL_InitTick+0xac>)
 800ae1e:	4a12      	ldr	r2, [pc, #72]	; (800ae68 <HAL_InitTick+0xb0>)
 800ae20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800ae22:	4b10      	ldr	r3, [pc, #64]	; (800ae64 <HAL_InitTick+0xac>)
 800ae24:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ae28:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800ae2a:	4a0e      	ldr	r2, [pc, #56]	; (800ae64 <HAL_InitTick+0xac>)
 800ae2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae2e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800ae30:	4b0c      	ldr	r3, [pc, #48]	; (800ae64 <HAL_InitTick+0xac>)
 800ae32:	2200      	movs	r2, #0
 800ae34:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ae36:	4b0b      	ldr	r3, [pc, #44]	; (800ae64 <HAL_InitTick+0xac>)
 800ae38:	2200      	movs	r2, #0
 800ae3a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800ae3c:	4809      	ldr	r0, [pc, #36]	; (800ae64 <HAL_InitTick+0xac>)
 800ae3e:	f7f9 f897 	bl	8003f70 <HAL_TIM_Base_Init>
 800ae42:	4603      	mov	r3, r0
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d104      	bne.n	800ae52 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800ae48:	4806      	ldr	r0, [pc, #24]	; (800ae64 <HAL_InitTick+0xac>)
 800ae4a:	f7f9 f8bc 	bl	8003fc6 <HAL_TIM_Base_Start_IT>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	e000      	b.n	800ae54 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800ae52:	2301      	movs	r3, #1
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3730      	adds	r7, #48	; 0x30
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}
 800ae5c:	40023800 	.word	0x40023800
 800ae60:	431bde83 	.word	0x431bde83
 800ae64:	20008640 	.word	0x20008640
 800ae68:	40001000 	.word	0x40001000

0800ae6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ae70:	bf00      	nop
 800ae72:	46bd      	mov	sp, r7
 800ae74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae78:	4770      	bx	lr

0800ae7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ae7a:	b480      	push	{r7}
 800ae7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ae7e:	e7fe      	b.n	800ae7e <HardFault_Handler+0x4>

0800ae80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ae80:	b480      	push	{r7}
 800ae82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ae84:	e7fe      	b.n	800ae84 <MemManage_Handler+0x4>

0800ae86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ae86:	b480      	push	{r7}
 800ae88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ae8a:	e7fe      	b.n	800ae8a <BusFault_Handler+0x4>

0800ae8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ae90:	e7fe      	b.n	800ae90 <UsageFault_Handler+0x4>

0800ae92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ae92:	b480      	push	{r7}
 800ae94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ae96:	bf00      	nop
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800aea4:	4802      	ldr	r0, [pc, #8]	; (800aeb0 <TIM6_DAC_IRQHandler+0x10>)
 800aea6:	f7f9 f8b2 	bl	800400e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800aeaa:	bf00      	nop
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	bf00      	nop
 800aeb0:	20008640 	.word	0x20008640

0800aeb4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 800aeb8:	4802      	ldr	r0, [pc, #8]	; (800aec4 <OTG_HS_IRQHandler+0x10>)
 800aeba:	f7f6 facd 	bl	8001458 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800aebe:	bf00      	nop
 800aec0:	bd80      	pop	{r7, pc}
 800aec2:	bf00      	nop
 800aec4:	20008ad8 	.word	0x20008ad8

0800aec8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800aecc:	4802      	ldr	r0, [pc, #8]	; (800aed8 <LTDC_IRQHandler+0x10>)
 800aece:	f7f7 ff19 	bl	8002d04 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800aed2:	bf00      	nop
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	20008540 	.word	0x20008540

0800aedc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800aee0:	4802      	ldr	r0, [pc, #8]	; (800aeec <DMA2D_IRQHandler+0x10>)
 800aee2:	f7f5 fcb3 	bl	800084c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800aee6:	bf00      	nop
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	bf00      	nop
 800aeec:	20008474 	.word	0x20008474

0800aef0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b084      	sub	sp, #16
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800aef8:	4b11      	ldr	r3, [pc, #68]	; (800af40 <_sbrk+0x50>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d102      	bne.n	800af06 <_sbrk+0x16>
		heap_end = &end;
 800af00:	4b0f      	ldr	r3, [pc, #60]	; (800af40 <_sbrk+0x50>)
 800af02:	4a10      	ldr	r2, [pc, #64]	; (800af44 <_sbrk+0x54>)
 800af04:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800af06:	4b0e      	ldr	r3, [pc, #56]	; (800af40 <_sbrk+0x50>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800af0c:	4b0c      	ldr	r3, [pc, #48]	; (800af40 <_sbrk+0x50>)
 800af0e:	681a      	ldr	r2, [r3, #0]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	4413      	add	r3, r2
 800af14:	466a      	mov	r2, sp
 800af16:	4293      	cmp	r3, r2
 800af18:	d907      	bls.n	800af2a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800af1a:	f000 fc61 	bl	800b7e0 <__errno>
 800af1e:	4602      	mov	r2, r0
 800af20:	230c      	movs	r3, #12
 800af22:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800af24:	f04f 33ff 	mov.w	r3, #4294967295
 800af28:	e006      	b.n	800af38 <_sbrk+0x48>
	}

	heap_end += incr;
 800af2a:	4b05      	ldr	r3, [pc, #20]	; (800af40 <_sbrk+0x50>)
 800af2c:	681a      	ldr	r2, [r3, #0]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	4413      	add	r3, r2
 800af32:	4a03      	ldr	r2, [pc, #12]	; (800af40 <_sbrk+0x50>)
 800af34:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800af36:	68fb      	ldr	r3, [r7, #12]
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3710      	adds	r7, #16
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	20008458 	.word	0x20008458
 800af44:	20008da0 	.word	0x20008da0

0800af48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800af48:	b480      	push	{r7}
 800af4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800af4c:	4b16      	ldr	r3, [pc, #88]	; (800afa8 <SystemInit+0x60>)
 800af4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af52:	4a15      	ldr	r2, [pc, #84]	; (800afa8 <SystemInit+0x60>)
 800af54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800af58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800af5c:	4b13      	ldr	r3, [pc, #76]	; (800afac <SystemInit+0x64>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	4a12      	ldr	r2, [pc, #72]	; (800afac <SystemInit+0x64>)
 800af62:	f043 0301 	orr.w	r3, r3, #1
 800af66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800af68:	4b10      	ldr	r3, [pc, #64]	; (800afac <SystemInit+0x64>)
 800af6a:	2200      	movs	r2, #0
 800af6c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800af6e:	4b0f      	ldr	r3, [pc, #60]	; (800afac <SystemInit+0x64>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4a0e      	ldr	r2, [pc, #56]	; (800afac <SystemInit+0x64>)
 800af74:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800af78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af7c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800af7e:	4b0b      	ldr	r3, [pc, #44]	; (800afac <SystemInit+0x64>)
 800af80:	4a0b      	ldr	r2, [pc, #44]	; (800afb0 <SystemInit+0x68>)
 800af82:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800af84:	4b09      	ldr	r3, [pc, #36]	; (800afac <SystemInit+0x64>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	4a08      	ldr	r2, [pc, #32]	; (800afac <SystemInit+0x64>)
 800af8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800af8e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800af90:	4b06      	ldr	r3, [pc, #24]	; (800afac <SystemInit+0x64>)
 800af92:	2200      	movs	r2, #0
 800af94:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800af96:	4b04      	ldr	r3, [pc, #16]	; (800afa8 <SystemInit+0x60>)
 800af98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800af9c:	609a      	str	r2, [r3, #8]
#endif
}
 800af9e:	bf00      	nop
 800afa0:	46bd      	mov	sp, r7
 800afa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa6:	4770      	bx	lr
 800afa8:	e000ed00 	.word	0xe000ed00
 800afac:	40023800 	.word	0x40023800
 800afb0:	24003010 	.word	0x24003010

0800afb4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b086      	sub	sp, #24
 800afb8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800afba:	f107 0308 	add.w	r3, r7, #8
 800afbe:	2200      	movs	r2, #0
 800afc0:	601a      	str	r2, [r3, #0]
 800afc2:	605a      	str	r2, [r3, #4]
 800afc4:	609a      	str	r2, [r3, #8]
 800afc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800afc8:	463b      	mov	r3, r7
 800afca:	2200      	movs	r2, #0
 800afcc:	601a      	str	r2, [r3, #0]
 800afce:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 800afd0:	4b1e      	ldr	r3, [pc, #120]	; (800b04c <MX_TIM1_Init+0x98>)
 800afd2:	4a1f      	ldr	r2, [pc, #124]	; (800b050 <MX_TIM1_Init+0x9c>)
 800afd4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800afd6:	4b1d      	ldr	r3, [pc, #116]	; (800b04c <MX_TIM1_Init+0x98>)
 800afd8:	2200      	movs	r2, #0
 800afda:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800afdc:	4b1b      	ldr	r3, [pc, #108]	; (800b04c <MX_TIM1_Init+0x98>)
 800afde:	2200      	movs	r2, #0
 800afe0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800afe2:	4b1a      	ldr	r3, [pc, #104]	; (800b04c <MX_TIM1_Init+0x98>)
 800afe4:	2200      	movs	r2, #0
 800afe6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800afe8:	4b18      	ldr	r3, [pc, #96]	; (800b04c <MX_TIM1_Init+0x98>)
 800afea:	2200      	movs	r2, #0
 800afec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800afee:	4b17      	ldr	r3, [pc, #92]	; (800b04c <MX_TIM1_Init+0x98>)
 800aff0:	2200      	movs	r2, #0
 800aff2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800aff4:	4b15      	ldr	r3, [pc, #84]	; (800b04c <MX_TIM1_Init+0x98>)
 800aff6:	2200      	movs	r2, #0
 800aff8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800affa:	4814      	ldr	r0, [pc, #80]	; (800b04c <MX_TIM1_Init+0x98>)
 800affc:	f7f8 ffb8 	bl	8003f70 <HAL_TIM_Base_Init>
 800b000:	4603      	mov	r3, r0
 800b002:	2b00      	cmp	r3, #0
 800b004:	d001      	beq.n	800b00a <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 800b006:	f7ff fe25 	bl	800ac54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b00a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b00e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800b010:	f107 0308 	add.w	r3, r7, #8
 800b014:	4619      	mov	r1, r3
 800b016:	480d      	ldr	r0, [pc, #52]	; (800b04c <MX_TIM1_Init+0x98>)
 800b018:	f7f9 f901 	bl	800421e <HAL_TIM_ConfigClockSource>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d001      	beq.n	800b026 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 800b022:	f7ff fe17 	bl	800ac54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b026:	2300      	movs	r3, #0
 800b028:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b02a:	2300      	movs	r3, #0
 800b02c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800b02e:	463b      	mov	r3, r7
 800b030:	4619      	mov	r1, r3
 800b032:	4806      	ldr	r0, [pc, #24]	; (800b04c <MX_TIM1_Init+0x98>)
 800b034:	f7f9 fb0c 	bl	8004650 <HAL_TIMEx_MasterConfigSynchronization>
 800b038:	4603      	mov	r3, r0
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d001      	beq.n	800b042 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800b03e:	f7ff fe09 	bl	800ac54 <Error_Handler>
  }

}
 800b042:	bf00      	nop
 800b044:	3718      	adds	r7, #24
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}
 800b04a:	bf00      	nop
 800b04c:	20008680 	.word	0x20008680
 800b050:	40010000 	.word	0x40010000

0800b054 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b054:	b480      	push	{r7}
 800b056:	b085      	sub	sp, #20
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	4a0b      	ldr	r2, [pc, #44]	; (800b090 <HAL_TIM_Base_MspInit+0x3c>)
 800b062:	4293      	cmp	r3, r2
 800b064:	d10d      	bne.n	800b082 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800b066:	2300      	movs	r3, #0
 800b068:	60fb      	str	r3, [r7, #12]
 800b06a:	4b0a      	ldr	r3, [pc, #40]	; (800b094 <HAL_TIM_Base_MspInit+0x40>)
 800b06c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b06e:	4a09      	ldr	r2, [pc, #36]	; (800b094 <HAL_TIM_Base_MspInit+0x40>)
 800b070:	f043 0301 	orr.w	r3, r3, #1
 800b074:	6453      	str	r3, [r2, #68]	; 0x44
 800b076:	4b07      	ldr	r3, [pc, #28]	; (800b094 <HAL_TIM_Base_MspInit+0x40>)
 800b078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b07a:	f003 0301 	and.w	r3, r3, #1
 800b07e:	60fb      	str	r3, [r7, #12]
 800b080:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800b082:	bf00      	nop
 800b084:	3714      	adds	r7, #20
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr
 800b08e:	bf00      	nop
 800b090:	40010000 	.word	0x40010000
 800b094:	40023800 	.word	0x40023800

0800b098 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800b09c:	4b11      	ldr	r3, [pc, #68]	; (800b0e4 <MX_USART1_UART_Init+0x4c>)
 800b09e:	4a12      	ldr	r2, [pc, #72]	; (800b0e8 <MX_USART1_UART_Init+0x50>)
 800b0a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800b0a2:	4b10      	ldr	r3, [pc, #64]	; (800b0e4 <MX_USART1_UART_Init+0x4c>)
 800b0a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b0a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b0aa:	4b0e      	ldr	r3, [pc, #56]	; (800b0e4 <MX_USART1_UART_Init+0x4c>)
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800b0b0:	4b0c      	ldr	r3, [pc, #48]	; (800b0e4 <MX_USART1_UART_Init+0x4c>)
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800b0b6:	4b0b      	ldr	r3, [pc, #44]	; (800b0e4 <MX_USART1_UART_Init+0x4c>)
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b0bc:	4b09      	ldr	r3, [pc, #36]	; (800b0e4 <MX_USART1_UART_Init+0x4c>)
 800b0be:	220c      	movs	r2, #12
 800b0c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b0c2:	4b08      	ldr	r3, [pc, #32]	; (800b0e4 <MX_USART1_UART_Init+0x4c>)
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800b0c8:	4b06      	ldr	r3, [pc, #24]	; (800b0e4 <MX_USART1_UART_Init+0x4c>)
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800b0ce:	4805      	ldr	r0, [pc, #20]	; (800b0e4 <MX_USART1_UART_Init+0x4c>)
 800b0d0:	f7f9 fb17 	bl	8004702 <HAL_UART_Init>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d001      	beq.n	800b0de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800b0da:	f7ff fdbb 	bl	800ac54 <Error_Handler>
  }

}
 800b0de:	bf00      	nop
 800b0e0:	bd80      	pop	{r7, pc}
 800b0e2:	bf00      	nop
 800b0e4:	200086c0 	.word	0x200086c0
 800b0e8:	40011000 	.word	0x40011000

0800b0ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b08a      	sub	sp, #40	; 0x28
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b0f4:	f107 0314 	add.w	r3, r7, #20
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	601a      	str	r2, [r3, #0]
 800b0fc:	605a      	str	r2, [r3, #4]
 800b0fe:	609a      	str	r2, [r3, #8]
 800b100:	60da      	str	r2, [r3, #12]
 800b102:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4a19      	ldr	r2, [pc, #100]	; (800b170 <HAL_UART_MspInit+0x84>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d12c      	bne.n	800b168 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b10e:	2300      	movs	r3, #0
 800b110:	613b      	str	r3, [r7, #16]
 800b112:	4b18      	ldr	r3, [pc, #96]	; (800b174 <HAL_UART_MspInit+0x88>)
 800b114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b116:	4a17      	ldr	r2, [pc, #92]	; (800b174 <HAL_UART_MspInit+0x88>)
 800b118:	f043 0310 	orr.w	r3, r3, #16
 800b11c:	6453      	str	r3, [r2, #68]	; 0x44
 800b11e:	4b15      	ldr	r3, [pc, #84]	; (800b174 <HAL_UART_MspInit+0x88>)
 800b120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b122:	f003 0310 	and.w	r3, r3, #16
 800b126:	613b      	str	r3, [r7, #16]
 800b128:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b12a:	2300      	movs	r3, #0
 800b12c:	60fb      	str	r3, [r7, #12]
 800b12e:	4b11      	ldr	r3, [pc, #68]	; (800b174 <HAL_UART_MspInit+0x88>)
 800b130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b132:	4a10      	ldr	r2, [pc, #64]	; (800b174 <HAL_UART_MspInit+0x88>)
 800b134:	f043 0301 	orr.w	r3, r3, #1
 800b138:	6313      	str	r3, [r2, #48]	; 0x30
 800b13a:	4b0e      	ldr	r3, [pc, #56]	; (800b174 <HAL_UART_MspInit+0x88>)
 800b13c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b13e:	f003 0301 	and.w	r3, r3, #1
 800b142:	60fb      	str	r3, [r7, #12]
 800b144:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800b146:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b14a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b14c:	2302      	movs	r3, #2
 800b14e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b150:	2301      	movs	r3, #1
 800b152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b154:	2303      	movs	r3, #3
 800b156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b158:	2307      	movs	r3, #7
 800b15a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b15c:	f107 0314 	add.w	r3, r7, #20
 800b160:	4619      	mov	r1, r3
 800b162:	4805      	ldr	r0, [pc, #20]	; (800b178 <HAL_UART_MspInit+0x8c>)
 800b164:	f7f5 fd14 	bl	8000b90 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800b168:	bf00      	nop
 800b16a:	3728      	adds	r7, #40	; 0x28
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}
 800b170:	40011000 	.word	0x40011000
 800b174:	40023800 	.word	0x40023800
 800b178:	40020000 	.word	0x40020000

0800b17c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800b180:	2200      	movs	r2, #0
 800b182:	490e      	ldr	r1, [pc, #56]	; (800b1bc <MX_USB_HOST_Init+0x40>)
 800b184:	480e      	ldr	r0, [pc, #56]	; (800b1c0 <MX_USB_HOST_Init+0x44>)
 800b186:	f7fb f907 	bl	8006398 <USBH_Init>
 800b18a:	4603      	mov	r3, r0
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d001      	beq.n	800b194 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b190:	f7ff fd60 	bl	800ac54 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800b194:	490b      	ldr	r1, [pc, #44]	; (800b1c4 <MX_USB_HOST_Init+0x48>)
 800b196:	480a      	ldr	r0, [pc, #40]	; (800b1c0 <MX_USB_HOST_Init+0x44>)
 800b198:	f7fb f999 	bl	80064ce <USBH_RegisterClass>
 800b19c:	4603      	mov	r3, r0
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d001      	beq.n	800b1a6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b1a2:	f7ff fd57 	bl	800ac54 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800b1a6:	4806      	ldr	r0, [pc, #24]	; (800b1c0 <MX_USB_HOST_Init+0x44>)
 800b1a8:	f7fb fa1e 	bl	80065e8 <USBH_Start>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d001      	beq.n	800b1b6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b1b2:	f7ff fd4f 	bl	800ac54 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b1b6:	bf00      	nop
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	0800b1c9 	.word	0x0800b1c9
 800b1c0:	20008700 	.word	0x20008700
 800b1c4:	20000004 	.word	0x20000004

0800b1c8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b083      	sub	sp, #12
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	460b      	mov	r3, r1
 800b1d2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b1d4:	78fb      	ldrb	r3, [r7, #3]
 800b1d6:	3b01      	subs	r3, #1
 800b1d8:	2b04      	cmp	r3, #4
 800b1da:	d819      	bhi.n	800b210 <USBH_UserProcess+0x48>
 800b1dc:	a201      	add	r2, pc, #4	; (adr r2, 800b1e4 <USBH_UserProcess+0x1c>)
 800b1de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1e2:	bf00      	nop
 800b1e4:	0800b211 	.word	0x0800b211
 800b1e8:	0800b201 	.word	0x0800b201
 800b1ec:	0800b211 	.word	0x0800b211
 800b1f0:	0800b209 	.word	0x0800b209
 800b1f4:	0800b1f9 	.word	0x0800b1f9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b1f8:	4b09      	ldr	r3, [pc, #36]	; (800b220 <USBH_UserProcess+0x58>)
 800b1fa:	2203      	movs	r2, #3
 800b1fc:	701a      	strb	r2, [r3, #0]
  break;
 800b1fe:	e008      	b.n	800b212 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b200:	4b07      	ldr	r3, [pc, #28]	; (800b220 <USBH_UserProcess+0x58>)
 800b202:	2202      	movs	r2, #2
 800b204:	701a      	strb	r2, [r3, #0]
  break;
 800b206:	e004      	b.n	800b212 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b208:	4b05      	ldr	r3, [pc, #20]	; (800b220 <USBH_UserProcess+0x58>)
 800b20a:	2201      	movs	r2, #1
 800b20c:	701a      	strb	r2, [r3, #0]
  break;
 800b20e:	e000      	b.n	800b212 <USBH_UserProcess+0x4a>

  default:
  break;
 800b210:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b212:	bf00      	nop
 800b214:	370c      	adds	r7, #12
 800b216:	46bd      	mov	sp, r7
 800b218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21c:	4770      	bx	lr
 800b21e:	bf00      	nop
 800b220:	2000845c 	.word	0x2000845c

0800b224 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b08a      	sub	sp, #40	; 0x28
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b22c:	f107 0314 	add.w	r3, r7, #20
 800b230:	2200      	movs	r2, #0
 800b232:	601a      	str	r2, [r3, #0]
 800b234:	605a      	str	r2, [r3, #4]
 800b236:	609a      	str	r2, [r3, #8]
 800b238:	60da      	str	r2, [r3, #12]
 800b23a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4a24      	ldr	r2, [pc, #144]	; (800b2d4 <HAL_HCD_MspInit+0xb0>)
 800b242:	4293      	cmp	r3, r2
 800b244:	d141      	bne.n	800b2ca <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b246:	2300      	movs	r3, #0
 800b248:	613b      	str	r3, [r7, #16]
 800b24a:	4b23      	ldr	r3, [pc, #140]	; (800b2d8 <HAL_HCD_MspInit+0xb4>)
 800b24c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b24e:	4a22      	ldr	r2, [pc, #136]	; (800b2d8 <HAL_HCD_MspInit+0xb4>)
 800b250:	f043 0302 	orr.w	r3, r3, #2
 800b254:	6313      	str	r3, [r2, #48]	; 0x30
 800b256:	4b20      	ldr	r3, [pc, #128]	; (800b2d8 <HAL_HCD_MspInit+0xb4>)
 800b258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b25a:	f003 0302 	and.w	r3, r3, #2
 800b25e:	613b      	str	r3, [r7, #16]
 800b260:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP 
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800b262:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800b266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b268:	2302      	movs	r3, #2
 800b26a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b26c:	2300      	movs	r3, #0
 800b26e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b270:	2300      	movs	r3, #0
 800b272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800b274:	230c      	movs	r3, #12
 800b276:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b278:	f107 0314 	add.w	r3, r7, #20
 800b27c:	4619      	mov	r1, r3
 800b27e:	4817      	ldr	r0, [pc, #92]	; (800b2dc <HAL_HCD_MspInit+0xb8>)
 800b280:	f7f5 fc86 	bl	8000b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800b284:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b28a:	2300      	movs	r3, #0
 800b28c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b28e:	2300      	movs	r3, #0
 800b290:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800b292:	f107 0314 	add.w	r3, r7, #20
 800b296:	4619      	mov	r1, r3
 800b298:	4810      	ldr	r0, [pc, #64]	; (800b2dc <HAL_HCD_MspInit+0xb8>)
 800b29a:	f7f5 fc79 	bl	8000b90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800b29e:	2300      	movs	r3, #0
 800b2a0:	60fb      	str	r3, [r7, #12]
 800b2a2:	4b0d      	ldr	r3, [pc, #52]	; (800b2d8 <HAL_HCD_MspInit+0xb4>)
 800b2a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2a6:	4a0c      	ldr	r2, [pc, #48]	; (800b2d8 <HAL_HCD_MspInit+0xb4>)
 800b2a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b2ac:	6313      	str	r3, [r2, #48]	; 0x30
 800b2ae:	4b0a      	ldr	r3, [pc, #40]	; (800b2d8 <HAL_HCD_MspInit+0xb4>)
 800b2b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2b6:	60fb      	str	r3, [r7, #12]
 800b2b8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	2105      	movs	r1, #5
 800b2be:	204d      	movs	r0, #77	; 0x4d
 800b2c0:	f7f5 fa32 	bl	8000728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800b2c4:	204d      	movs	r0, #77	; 0x4d
 800b2c6:	f7f5 fa4b 	bl	8000760 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800b2ca:	bf00      	nop
 800b2cc:	3728      	adds	r7, #40	; 0x28
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}
 800b2d2:	bf00      	nop
 800b2d4:	40040000 	.word	0x40040000
 800b2d8:	40023800 	.word	0x40023800
 800b2dc:	40020400 	.word	0x40020400

0800b2e0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b082      	sub	sp, #8
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7fb fccd 	bl	8006c8e <USBH_LL_IncTimer>
}
 800b2f4:	bf00      	nop
 800b2f6:	3708      	adds	r7, #8
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b082      	sub	sp, #8
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7fb fd12 	bl	8006d34 <USBH_LL_Connect>
}
 800b310:	bf00      	nop
 800b312:	3708      	adds	r7, #8
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}

0800b318 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b082      	sub	sp, #8
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b326:	4618      	mov	r0, r3
 800b328:	f7fb fd38 	bl	8006d9c <USBH_LL_Disconnect>
}
 800b32c:	bf00      	nop
 800b32e:	3708      	adds	r7, #8
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b082      	sub	sp, #8
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	460b      	mov	r3, r1
 800b33e:	70fb      	strb	r3, [r7, #3]
 800b340:	4613      	mov	r3, r2
 800b342:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b34a:	4618      	mov	r0, r3
 800b34c:	f7fb fd76 	bl	8006e3c <USBH_LL_NotifyURBChange>
#endif
}
 800b350:	bf00      	nop
 800b352:	3708      	adds	r7, #8
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b082      	sub	sp, #8
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b366:	4618      	mov	r0, r3
 800b368:	f7fb fcbb 	bl	8006ce2 <USBH_LL_PortEnabled>
} 
 800b36c:	bf00      	nop
 800b36e:	3708      	adds	r7, #8
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}

0800b374 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b082      	sub	sp, #8
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b382:	4618      	mov	r0, r3
 800b384:	f7fb fcbb 	bl	8006cfe <USBH_LL_PortDisabled>
} 
 800b388:	bf00      	nop
 800b38a:	3708      	adds	r7, #8
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d132      	bne.n	800b408 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800b3a2:	4a1c      	ldr	r2, [pc, #112]	; (800b414 <USBH_LL_Init+0x84>)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_HS;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	4a19      	ldr	r2, [pc, #100]	; (800b414 <USBH_LL_Init+0x84>)
 800b3ae:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800b3b2:	4b18      	ldr	r3, [pc, #96]	; (800b414 <USBH_LL_Init+0x84>)
 800b3b4:	4a18      	ldr	r2, [pc, #96]	; (800b418 <USBH_LL_Init+0x88>)
 800b3b6:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800b3b8:	4b16      	ldr	r3, [pc, #88]	; (800b414 <USBH_LL_Init+0x84>)
 800b3ba:	220c      	movs	r2, #12
 800b3bc:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800b3be:	4b15      	ldr	r3, [pc, #84]	; (800b414 <USBH_LL_Init+0x84>)
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800b3c4:	4b13      	ldr	r3, [pc, #76]	; (800b414 <USBH_LL_Init+0x84>)
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800b3ca:	4b12      	ldr	r3, [pc, #72]	; (800b414 <USBH_LL_Init+0x84>)
 800b3cc:	2202      	movs	r2, #2
 800b3ce:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800b3d0:	4b10      	ldr	r3, [pc, #64]	; (800b414 <USBH_LL_Init+0x84>)
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800b3d6:	4b0f      	ldr	r3, [pc, #60]	; (800b414 <USBH_LL_Init+0x84>)
 800b3d8:	2200      	movs	r2, #0
 800b3da:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800b3dc:	4b0d      	ldr	r3, [pc, #52]	; (800b414 <USBH_LL_Init+0x84>)
 800b3de:	2200      	movs	r2, #0
 800b3e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800b3e2:	4b0c      	ldr	r3, [pc, #48]	; (800b414 <USBH_LL_Init+0x84>)
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800b3e8:	480a      	ldr	r0, [pc, #40]	; (800b414 <USBH_LL_Init+0x84>)
 800b3ea:	f7f5 fdaf 	bl	8000f4c <HAL_HCD_Init>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d001      	beq.n	800b3f8 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800b3f4:	f7ff fc2e 	bl	800ac54 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800b3f8:	4806      	ldr	r0, [pc, #24]	; (800b414 <USBH_LL_Init+0x84>)
 800b3fa:	f7f6 f9ab 	bl	8001754 <HAL_HCD_GetCurrentFrame>
 800b3fe:	4603      	mov	r3, r0
 800b400:	4619      	mov	r1, r3
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f7fb fc34 	bl	8006c70 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b408:	2300      	movs	r3, #0
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3708      	adds	r7, #8
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}
 800b412:	bf00      	nop
 800b414:	20008ad8 	.word	0x20008ad8
 800b418:	40040000 	.word	0x40040000

0800b41c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b084      	sub	sp, #16
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b424:	2300      	movs	r3, #0
 800b426:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b428:	2300      	movs	r3, #0
 800b42a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b432:	4618      	mov	r0, r3
 800b434:	f7f6 f916 	bl	8001664 <HAL_HCD_Start>
 800b438:	4603      	mov	r3, r0
 800b43a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b43c:	7bfb      	ldrb	r3, [r7, #15]
 800b43e:	4618      	mov	r0, r3
 800b440:	f000 f95c 	bl	800b6fc <USBH_Get_USB_Status>
 800b444:	4603      	mov	r3, r0
 800b446:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b448:	7bbb      	ldrb	r3, [r7, #14]
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3710      	adds	r7, #16
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}

0800b452 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b452:	b580      	push	{r7, lr}
 800b454:	b084      	sub	sp, #16
 800b456:	af00      	add	r7, sp, #0
 800b458:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b45a:	2300      	movs	r3, #0
 800b45c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b45e:	2300      	movs	r3, #0
 800b460:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b468:	4618      	mov	r0, r3
 800b46a:	f7f6 f91e 	bl	80016aa <HAL_HCD_Stop>
 800b46e:	4603      	mov	r3, r0
 800b470:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b472:	7bfb      	ldrb	r3, [r7, #15]
 800b474:	4618      	mov	r0, r3
 800b476:	f000 f941 	bl	800b6fc <USBH_Get_USB_Status>
 800b47a:	4603      	mov	r3, r0
 800b47c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800b47e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b480:	4618      	mov	r0, r3
 800b482:	3710      	adds	r7, #16
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b490:	2301      	movs	r3, #1
 800b492:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b49a:	4618      	mov	r0, r3
 800b49c:	f7f6 f968 	bl	8001770 <HAL_HCD_GetCurrentSpeed>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d007      	beq.n	800b4b6 <USBH_LL_GetSpeed+0x2e>
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	d302      	bcc.n	800b4b0 <USBH_LL_GetSpeed+0x28>
 800b4aa:	2b02      	cmp	r3, #2
 800b4ac:	d006      	beq.n	800b4bc <USBH_LL_GetSpeed+0x34>
 800b4ae:	e008      	b.n	800b4c2 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	73fb      	strb	r3, [r7, #15]
    break;
 800b4b4:	e008      	b.n	800b4c8 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	73fb      	strb	r3, [r7, #15]
    break;
 800b4ba:	e005      	b.n	800b4c8 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b4bc:	2302      	movs	r3, #2
 800b4be:	73fb      	strb	r3, [r7, #15]
    break;
 800b4c0:	e002      	b.n	800b4c8 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	73fb      	strb	r3, [r7, #15]
    break;
 800b4c6:	bf00      	nop
  }
  return  speed;
 800b4c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3710      	adds	r7, #16
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}

0800b4d2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b4d2:	b580      	push	{r7, lr}
 800b4d4:	b084      	sub	sp, #16
 800b4d6:	af00      	add	r7, sp, #0
 800b4d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f7f6 f8fb 	bl	80016e4 <HAL_HCD_ResetPort>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800b4f2:	7bfb      	ldrb	r3, [r7, #15]
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f000 f901 	bl	800b6fc <USBH_Get_USB_Status>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b4fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800b500:	4618      	mov	r0, r3
 800b502:	3710      	adds	r7, #16
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}

0800b508 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b082      	sub	sp, #8
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	460b      	mov	r3, r1
 800b512:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b51a:	78fa      	ldrb	r2, [r7, #3]
 800b51c:	4611      	mov	r1, r2
 800b51e:	4618      	mov	r0, r3
 800b520:	f7f6 f903 	bl	800172a <HAL_HCD_HC_GetXferCount>
 800b524:	4603      	mov	r3, r0
}
 800b526:	4618      	mov	r0, r3
 800b528:	3708      	adds	r7, #8
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}

0800b52e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b52e:	b590      	push	{r4, r7, lr}
 800b530:	b089      	sub	sp, #36	; 0x24
 800b532:	af04      	add	r7, sp, #16
 800b534:	6078      	str	r0, [r7, #4]
 800b536:	4608      	mov	r0, r1
 800b538:	4611      	mov	r1, r2
 800b53a:	461a      	mov	r2, r3
 800b53c:	4603      	mov	r3, r0
 800b53e:	70fb      	strb	r3, [r7, #3]
 800b540:	460b      	mov	r3, r1
 800b542:	70bb      	strb	r3, [r7, #2]
 800b544:	4613      	mov	r3, r2
 800b546:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b548:	2300      	movs	r3, #0
 800b54a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b54c:	2300      	movs	r3, #0
 800b54e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800b556:	787c      	ldrb	r4, [r7, #1]
 800b558:	78ba      	ldrb	r2, [r7, #2]
 800b55a:	78f9      	ldrb	r1, [r7, #3]
 800b55c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b55e:	9302      	str	r3, [sp, #8]
 800b560:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b564:	9301      	str	r3, [sp, #4]
 800b566:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b56a:	9300      	str	r3, [sp, #0]
 800b56c:	4623      	mov	r3, r4
 800b56e:	f7f5 fd4f 	bl	8001010 <HAL_HCD_HC_Init>
 800b572:	4603      	mov	r3, r0
 800b574:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b576:	7bfb      	ldrb	r3, [r7, #15]
 800b578:	4618      	mov	r0, r3
 800b57a:	f000 f8bf 	bl	800b6fc <USBH_Get_USB_Status>
 800b57e:	4603      	mov	r3, r0
 800b580:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b582:	7bbb      	ldrb	r3, [r7, #14]
}
 800b584:	4618      	mov	r0, r3
 800b586:	3714      	adds	r7, #20
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd90      	pop	{r4, r7, pc}

0800b58c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b084      	sub	sp, #16
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	460b      	mov	r3, r1
 800b596:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b598:	2300      	movs	r3, #0
 800b59a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b59c:	2300      	movs	r3, #0
 800b59e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b5a6:	78fa      	ldrb	r2, [r7, #3]
 800b5a8:	4611      	mov	r1, r2
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f7f5 fdc8 	bl	8001140 <HAL_HCD_HC_Halt>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b5b4:	7bfb      	ldrb	r3, [r7, #15]
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f000 f8a0 	bl	800b6fc <USBH_Get_USB_Status>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b5c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3710      	adds	r7, #16
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}

0800b5ca <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b5ca:	b590      	push	{r4, r7, lr}
 800b5cc:	b089      	sub	sp, #36	; 0x24
 800b5ce:	af04      	add	r7, sp, #16
 800b5d0:	6078      	str	r0, [r7, #4]
 800b5d2:	4608      	mov	r0, r1
 800b5d4:	4611      	mov	r1, r2
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	4603      	mov	r3, r0
 800b5da:	70fb      	strb	r3, [r7, #3]
 800b5dc:	460b      	mov	r3, r1
 800b5de:	70bb      	strb	r3, [r7, #2]
 800b5e0:	4613      	mov	r3, r2
 800b5e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800b5f2:	787c      	ldrb	r4, [r7, #1]
 800b5f4:	78ba      	ldrb	r2, [r7, #2]
 800b5f6:	78f9      	ldrb	r1, [r7, #3]
 800b5f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b5fc:	9303      	str	r3, [sp, #12]
 800b5fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b600:	9302      	str	r3, [sp, #8]
 800b602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b604:	9301      	str	r3, [sp, #4]
 800b606:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b60a:	9300      	str	r3, [sp, #0]
 800b60c:	4623      	mov	r3, r4
 800b60e:	f7f5 fdbb 	bl	8001188 <HAL_HCD_HC_SubmitRequest>
 800b612:	4603      	mov	r3, r0
 800b614:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b616:	7bfb      	ldrb	r3, [r7, #15]
 800b618:	4618      	mov	r0, r3
 800b61a:	f000 f86f 	bl	800b6fc <USBH_Get_USB_Status>
 800b61e:	4603      	mov	r3, r0
 800b620:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b622:	7bbb      	ldrb	r3, [r7, #14]
}
 800b624:	4618      	mov	r0, r3
 800b626:	3714      	adds	r7, #20
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd90      	pop	{r4, r7, pc}

0800b62c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b082      	sub	sp, #8
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	460b      	mov	r3, r1
 800b636:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b63e:	78fa      	ldrb	r2, [r7, #3]
 800b640:	4611      	mov	r1, r2
 800b642:	4618      	mov	r0, r3
 800b644:	f7f6 f85c 	bl	8001700 <HAL_HCD_HC_GetURBState>
 800b648:	4603      	mov	r3, r0
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3708      	adds	r7, #8
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}

0800b652 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b652:	b580      	push	{r7, lr}
 800b654:	b082      	sub	sp, #8
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
 800b65a:	460b      	mov	r3, r1
 800b65c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800b664:	2b00      	cmp	r3, #0
 800b666:	d103      	bne.n	800b670 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800b668:	78fb      	ldrb	r3, [r7, #3]
 800b66a:	4618      	mov	r0, r3
 800b66c:	f000 f872 	bl	800b754 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b670:	20c8      	movs	r0, #200	; 0xc8
 800b672:	f7f4 ff7f 	bl	8000574 <HAL_Delay>
  return USBH_OK;
 800b676:	2300      	movs	r3, #0
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3708      	adds	r7, #8
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}

0800b680 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b680:	b480      	push	{r7}
 800b682:	b085      	sub	sp, #20
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	460b      	mov	r3, r1
 800b68a:	70fb      	strb	r3, [r7, #3]
 800b68c:	4613      	mov	r3, r2
 800b68e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b696:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b698:	78fa      	ldrb	r2, [r7, #3]
 800b69a:	68f9      	ldr	r1, [r7, #12]
 800b69c:	4613      	mov	r3, r2
 800b69e:	009b      	lsls	r3, r3, #2
 800b6a0:	4413      	add	r3, r2
 800b6a2:	00db      	lsls	r3, r3, #3
 800b6a4:	440b      	add	r3, r1
 800b6a6:	333b      	adds	r3, #59	; 0x3b
 800b6a8:	781b      	ldrb	r3, [r3, #0]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d00a      	beq.n	800b6c4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b6ae:	78fa      	ldrb	r2, [r7, #3]
 800b6b0:	68f9      	ldr	r1, [r7, #12]
 800b6b2:	4613      	mov	r3, r2
 800b6b4:	009b      	lsls	r3, r3, #2
 800b6b6:	4413      	add	r3, r2
 800b6b8:	00db      	lsls	r3, r3, #3
 800b6ba:	440b      	add	r3, r1
 800b6bc:	3350      	adds	r3, #80	; 0x50
 800b6be:	78ba      	ldrb	r2, [r7, #2]
 800b6c0:	701a      	strb	r2, [r3, #0]
 800b6c2:	e009      	b.n	800b6d8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b6c4:	78fa      	ldrb	r2, [r7, #3]
 800b6c6:	68f9      	ldr	r1, [r7, #12]
 800b6c8:	4613      	mov	r3, r2
 800b6ca:	009b      	lsls	r3, r3, #2
 800b6cc:	4413      	add	r3, r2
 800b6ce:	00db      	lsls	r3, r3, #3
 800b6d0:	440b      	add	r3, r1
 800b6d2:	3351      	adds	r3, #81	; 0x51
 800b6d4:	78ba      	ldrb	r2, [r7, #2]
 800b6d6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b6d8:	2300      	movs	r3, #0
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3714      	adds	r7, #20
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr

0800b6e6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b6e6:	b580      	push	{r7, lr}
 800b6e8:	b082      	sub	sp, #8
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f7f4 ff40 	bl	8000574 <HAL_Delay>
}
 800b6f4:	bf00      	nop
 800b6f6:	3708      	adds	r7, #8
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b085      	sub	sp, #20
 800b700:	af00      	add	r7, sp, #0
 800b702:	4603      	mov	r3, r0
 800b704:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b706:	2300      	movs	r3, #0
 800b708:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b70a:	79fb      	ldrb	r3, [r7, #7]
 800b70c:	2b03      	cmp	r3, #3
 800b70e:	d817      	bhi.n	800b740 <USBH_Get_USB_Status+0x44>
 800b710:	a201      	add	r2, pc, #4	; (adr r2, 800b718 <USBH_Get_USB_Status+0x1c>)
 800b712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b716:	bf00      	nop
 800b718:	0800b729 	.word	0x0800b729
 800b71c:	0800b72f 	.word	0x0800b72f
 800b720:	0800b735 	.word	0x0800b735
 800b724:	0800b73b 	.word	0x0800b73b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b728:	2300      	movs	r3, #0
 800b72a:	73fb      	strb	r3, [r7, #15]
    break;
 800b72c:	e00b      	b.n	800b746 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b72e:	2302      	movs	r3, #2
 800b730:	73fb      	strb	r3, [r7, #15]
    break;
 800b732:	e008      	b.n	800b746 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b734:	2301      	movs	r3, #1
 800b736:	73fb      	strb	r3, [r7, #15]
    break;
 800b738:	e005      	b.n	800b746 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b73a:	2302      	movs	r3, #2
 800b73c:	73fb      	strb	r3, [r7, #15]
    break;
 800b73e:	e002      	b.n	800b746 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b740:	2302      	movs	r3, #2
 800b742:	73fb      	strb	r3, [r7, #15]
    break;
 800b744:	bf00      	nop
  }
  return usb_status;
 800b746:	7bfb      	ldrb	r3, [r7, #15]
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3714      	adds	r7, #20
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr

0800b754 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 0 : VBUS Active
  *          - 1 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{ 
 800b754:	b580      	push	{r7, lr}
 800b756:	b084      	sub	sp, #16
 800b758:	af00      	add	r7, sp, #0
 800b75a:	4603      	mov	r3, r0
 800b75c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800b75e:	79fb      	ldrb	r3, [r7, #7]
 800b760:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800b762:	79fb      	ldrb	r3, [r7, #7]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d102      	bne.n	800b76e <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800b768:	2301      	movs	r3, #1
 800b76a:	73fb      	strb	r3, [r7, #15]
 800b76c:	e001      	b.n	800b772 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800b76e:	2300      	movs	r3, #0
 800b770:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800b772:	7bfb      	ldrb	r3, [r7, #15]
 800b774:	461a      	mov	r2, r3
 800b776:	2110      	movs	r1, #16
 800b778:	4803      	ldr	r0, [pc, #12]	; (800b788 <MX_DriverVbusHS+0x34>)
 800b77a:	f7f5 fbb3 	bl	8000ee4 <HAL_GPIO_WritePin>
}
 800b77e:	bf00      	nop
 800b780:	3710      	adds	r7, #16
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}
 800b786:	bf00      	nop
 800b788:	40020800 	.word	0x40020800

0800b78c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800b78c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b7c4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b790:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b792:	e003      	b.n	800b79c <LoopCopyDataInit>

0800b794 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b794:	4b0c      	ldr	r3, [pc, #48]	; (800b7c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b796:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b798:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b79a:	3104      	adds	r1, #4

0800b79c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b79c:	480b      	ldr	r0, [pc, #44]	; (800b7cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b79e:	4b0c      	ldr	r3, [pc, #48]	; (800b7d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b7a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b7a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b7a4:	d3f6      	bcc.n	800b794 <CopyDataInit>
  ldr  r2, =_sbss
 800b7a6:	4a0b      	ldr	r2, [pc, #44]	; (800b7d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b7a8:	e002      	b.n	800b7b0 <LoopFillZerobss>

0800b7aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b7aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b7ac:	f842 3b04 	str.w	r3, [r2], #4

0800b7b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b7b0:	4b09      	ldr	r3, [pc, #36]	; (800b7d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b7b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b7b4:	d3f9      	bcc.n	800b7aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b7b6:	f7ff fbc7 	bl	800af48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b7ba:	f000 f817 	bl	800b7ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b7be:	f7ff f98f 	bl	800aae0 <main>
  bx  lr    
 800b7c2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800b7c4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800b7c8:	0800ba9c 	.word	0x0800ba9c
  ldr  r0, =_sdata
 800b7cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b7d0:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 800b7d4:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 800b7d8:	20008da0 	.word	0x20008da0

0800b7dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b7dc:	e7fe      	b.n	800b7dc <ADC_IRQHandler>
	...

0800b7e0 <__errno>:
 800b7e0:	4b01      	ldr	r3, [pc, #4]	; (800b7e8 <__errno+0x8>)
 800b7e2:	6818      	ldr	r0, [r3, #0]
 800b7e4:	4770      	bx	lr
 800b7e6:	bf00      	nop
 800b7e8:	2000002c 	.word	0x2000002c

0800b7ec <__libc_init_array>:
 800b7ec:	b570      	push	{r4, r5, r6, lr}
 800b7ee:	4e0d      	ldr	r6, [pc, #52]	; (800b824 <__libc_init_array+0x38>)
 800b7f0:	4c0d      	ldr	r4, [pc, #52]	; (800b828 <__libc_init_array+0x3c>)
 800b7f2:	1ba4      	subs	r4, r4, r6
 800b7f4:	10a4      	asrs	r4, r4, #2
 800b7f6:	2500      	movs	r5, #0
 800b7f8:	42a5      	cmp	r5, r4
 800b7fa:	d109      	bne.n	800b810 <__libc_init_array+0x24>
 800b7fc:	4e0b      	ldr	r6, [pc, #44]	; (800b82c <__libc_init_array+0x40>)
 800b7fe:	4c0c      	ldr	r4, [pc, #48]	; (800b830 <__libc_init_array+0x44>)
 800b800:	f000 f8f6 	bl	800b9f0 <_init>
 800b804:	1ba4      	subs	r4, r4, r6
 800b806:	10a4      	asrs	r4, r4, #2
 800b808:	2500      	movs	r5, #0
 800b80a:	42a5      	cmp	r5, r4
 800b80c:	d105      	bne.n	800b81a <__libc_init_array+0x2e>
 800b80e:	bd70      	pop	{r4, r5, r6, pc}
 800b810:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b814:	4798      	blx	r3
 800b816:	3501      	adds	r5, #1
 800b818:	e7ee      	b.n	800b7f8 <__libc_init_array+0xc>
 800b81a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b81e:	4798      	blx	r3
 800b820:	3501      	adds	r5, #1
 800b822:	e7f2      	b.n	800b80a <__libc_init_array+0x1e>
 800b824:	0800ba94 	.word	0x0800ba94
 800b828:	0800ba94 	.word	0x0800ba94
 800b82c:	0800ba94 	.word	0x0800ba94
 800b830:	0800ba98 	.word	0x0800ba98

0800b834 <malloc>:
 800b834:	4b02      	ldr	r3, [pc, #8]	; (800b840 <malloc+0xc>)
 800b836:	4601      	mov	r1, r0
 800b838:	6818      	ldr	r0, [r3, #0]
 800b83a:	f000 b86d 	b.w	800b918 <_malloc_r>
 800b83e:	bf00      	nop
 800b840:	2000002c 	.word	0x2000002c

0800b844 <free>:
 800b844:	4b02      	ldr	r3, [pc, #8]	; (800b850 <free+0xc>)
 800b846:	4601      	mov	r1, r0
 800b848:	6818      	ldr	r0, [r3, #0]
 800b84a:	f000 b817 	b.w	800b87c <_free_r>
 800b84e:	bf00      	nop
 800b850:	2000002c 	.word	0x2000002c

0800b854 <memcpy>:
 800b854:	b510      	push	{r4, lr}
 800b856:	1e43      	subs	r3, r0, #1
 800b858:	440a      	add	r2, r1
 800b85a:	4291      	cmp	r1, r2
 800b85c:	d100      	bne.n	800b860 <memcpy+0xc>
 800b85e:	bd10      	pop	{r4, pc}
 800b860:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b864:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b868:	e7f7      	b.n	800b85a <memcpy+0x6>

0800b86a <memset>:
 800b86a:	4402      	add	r2, r0
 800b86c:	4603      	mov	r3, r0
 800b86e:	4293      	cmp	r3, r2
 800b870:	d100      	bne.n	800b874 <memset+0xa>
 800b872:	4770      	bx	lr
 800b874:	f803 1b01 	strb.w	r1, [r3], #1
 800b878:	e7f9      	b.n	800b86e <memset+0x4>
	...

0800b87c <_free_r>:
 800b87c:	b538      	push	{r3, r4, r5, lr}
 800b87e:	4605      	mov	r5, r0
 800b880:	2900      	cmp	r1, #0
 800b882:	d045      	beq.n	800b910 <_free_r+0x94>
 800b884:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b888:	1f0c      	subs	r4, r1, #4
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	bfb8      	it	lt
 800b88e:	18e4      	addlt	r4, r4, r3
 800b890:	f000 f8ac 	bl	800b9ec <__malloc_lock>
 800b894:	4a1f      	ldr	r2, [pc, #124]	; (800b914 <_free_r+0x98>)
 800b896:	6813      	ldr	r3, [r2, #0]
 800b898:	4610      	mov	r0, r2
 800b89a:	b933      	cbnz	r3, 800b8aa <_free_r+0x2e>
 800b89c:	6063      	str	r3, [r4, #4]
 800b89e:	6014      	str	r4, [r2, #0]
 800b8a0:	4628      	mov	r0, r5
 800b8a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8a6:	f000 b8a2 	b.w	800b9ee <__malloc_unlock>
 800b8aa:	42a3      	cmp	r3, r4
 800b8ac:	d90c      	bls.n	800b8c8 <_free_r+0x4c>
 800b8ae:	6821      	ldr	r1, [r4, #0]
 800b8b0:	1862      	adds	r2, r4, r1
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	bf04      	itt	eq
 800b8b6:	681a      	ldreq	r2, [r3, #0]
 800b8b8:	685b      	ldreq	r3, [r3, #4]
 800b8ba:	6063      	str	r3, [r4, #4]
 800b8bc:	bf04      	itt	eq
 800b8be:	1852      	addeq	r2, r2, r1
 800b8c0:	6022      	streq	r2, [r4, #0]
 800b8c2:	6004      	str	r4, [r0, #0]
 800b8c4:	e7ec      	b.n	800b8a0 <_free_r+0x24>
 800b8c6:	4613      	mov	r3, r2
 800b8c8:	685a      	ldr	r2, [r3, #4]
 800b8ca:	b10a      	cbz	r2, 800b8d0 <_free_r+0x54>
 800b8cc:	42a2      	cmp	r2, r4
 800b8ce:	d9fa      	bls.n	800b8c6 <_free_r+0x4a>
 800b8d0:	6819      	ldr	r1, [r3, #0]
 800b8d2:	1858      	adds	r0, r3, r1
 800b8d4:	42a0      	cmp	r0, r4
 800b8d6:	d10b      	bne.n	800b8f0 <_free_r+0x74>
 800b8d8:	6820      	ldr	r0, [r4, #0]
 800b8da:	4401      	add	r1, r0
 800b8dc:	1858      	adds	r0, r3, r1
 800b8de:	4282      	cmp	r2, r0
 800b8e0:	6019      	str	r1, [r3, #0]
 800b8e2:	d1dd      	bne.n	800b8a0 <_free_r+0x24>
 800b8e4:	6810      	ldr	r0, [r2, #0]
 800b8e6:	6852      	ldr	r2, [r2, #4]
 800b8e8:	605a      	str	r2, [r3, #4]
 800b8ea:	4401      	add	r1, r0
 800b8ec:	6019      	str	r1, [r3, #0]
 800b8ee:	e7d7      	b.n	800b8a0 <_free_r+0x24>
 800b8f0:	d902      	bls.n	800b8f8 <_free_r+0x7c>
 800b8f2:	230c      	movs	r3, #12
 800b8f4:	602b      	str	r3, [r5, #0]
 800b8f6:	e7d3      	b.n	800b8a0 <_free_r+0x24>
 800b8f8:	6820      	ldr	r0, [r4, #0]
 800b8fa:	1821      	adds	r1, r4, r0
 800b8fc:	428a      	cmp	r2, r1
 800b8fe:	bf04      	itt	eq
 800b900:	6811      	ldreq	r1, [r2, #0]
 800b902:	6852      	ldreq	r2, [r2, #4]
 800b904:	6062      	str	r2, [r4, #4]
 800b906:	bf04      	itt	eq
 800b908:	1809      	addeq	r1, r1, r0
 800b90a:	6021      	streq	r1, [r4, #0]
 800b90c:	605c      	str	r4, [r3, #4]
 800b90e:	e7c7      	b.n	800b8a0 <_free_r+0x24>
 800b910:	bd38      	pop	{r3, r4, r5, pc}
 800b912:	bf00      	nop
 800b914:	20008460 	.word	0x20008460

0800b918 <_malloc_r>:
 800b918:	b570      	push	{r4, r5, r6, lr}
 800b91a:	1ccd      	adds	r5, r1, #3
 800b91c:	f025 0503 	bic.w	r5, r5, #3
 800b920:	3508      	adds	r5, #8
 800b922:	2d0c      	cmp	r5, #12
 800b924:	bf38      	it	cc
 800b926:	250c      	movcc	r5, #12
 800b928:	2d00      	cmp	r5, #0
 800b92a:	4606      	mov	r6, r0
 800b92c:	db01      	blt.n	800b932 <_malloc_r+0x1a>
 800b92e:	42a9      	cmp	r1, r5
 800b930:	d903      	bls.n	800b93a <_malloc_r+0x22>
 800b932:	230c      	movs	r3, #12
 800b934:	6033      	str	r3, [r6, #0]
 800b936:	2000      	movs	r0, #0
 800b938:	bd70      	pop	{r4, r5, r6, pc}
 800b93a:	f000 f857 	bl	800b9ec <__malloc_lock>
 800b93e:	4a21      	ldr	r2, [pc, #132]	; (800b9c4 <_malloc_r+0xac>)
 800b940:	6814      	ldr	r4, [r2, #0]
 800b942:	4621      	mov	r1, r4
 800b944:	b991      	cbnz	r1, 800b96c <_malloc_r+0x54>
 800b946:	4c20      	ldr	r4, [pc, #128]	; (800b9c8 <_malloc_r+0xb0>)
 800b948:	6823      	ldr	r3, [r4, #0]
 800b94a:	b91b      	cbnz	r3, 800b954 <_malloc_r+0x3c>
 800b94c:	4630      	mov	r0, r6
 800b94e:	f000 f83d 	bl	800b9cc <_sbrk_r>
 800b952:	6020      	str	r0, [r4, #0]
 800b954:	4629      	mov	r1, r5
 800b956:	4630      	mov	r0, r6
 800b958:	f000 f838 	bl	800b9cc <_sbrk_r>
 800b95c:	1c43      	adds	r3, r0, #1
 800b95e:	d124      	bne.n	800b9aa <_malloc_r+0x92>
 800b960:	230c      	movs	r3, #12
 800b962:	6033      	str	r3, [r6, #0]
 800b964:	4630      	mov	r0, r6
 800b966:	f000 f842 	bl	800b9ee <__malloc_unlock>
 800b96a:	e7e4      	b.n	800b936 <_malloc_r+0x1e>
 800b96c:	680b      	ldr	r3, [r1, #0]
 800b96e:	1b5b      	subs	r3, r3, r5
 800b970:	d418      	bmi.n	800b9a4 <_malloc_r+0x8c>
 800b972:	2b0b      	cmp	r3, #11
 800b974:	d90f      	bls.n	800b996 <_malloc_r+0x7e>
 800b976:	600b      	str	r3, [r1, #0]
 800b978:	50cd      	str	r5, [r1, r3]
 800b97a:	18cc      	adds	r4, r1, r3
 800b97c:	4630      	mov	r0, r6
 800b97e:	f000 f836 	bl	800b9ee <__malloc_unlock>
 800b982:	f104 000b 	add.w	r0, r4, #11
 800b986:	1d23      	adds	r3, r4, #4
 800b988:	f020 0007 	bic.w	r0, r0, #7
 800b98c:	1ac3      	subs	r3, r0, r3
 800b98e:	d0d3      	beq.n	800b938 <_malloc_r+0x20>
 800b990:	425a      	negs	r2, r3
 800b992:	50e2      	str	r2, [r4, r3]
 800b994:	e7d0      	b.n	800b938 <_malloc_r+0x20>
 800b996:	428c      	cmp	r4, r1
 800b998:	684b      	ldr	r3, [r1, #4]
 800b99a:	bf16      	itet	ne
 800b99c:	6063      	strne	r3, [r4, #4]
 800b99e:	6013      	streq	r3, [r2, #0]
 800b9a0:	460c      	movne	r4, r1
 800b9a2:	e7eb      	b.n	800b97c <_malloc_r+0x64>
 800b9a4:	460c      	mov	r4, r1
 800b9a6:	6849      	ldr	r1, [r1, #4]
 800b9a8:	e7cc      	b.n	800b944 <_malloc_r+0x2c>
 800b9aa:	1cc4      	adds	r4, r0, #3
 800b9ac:	f024 0403 	bic.w	r4, r4, #3
 800b9b0:	42a0      	cmp	r0, r4
 800b9b2:	d005      	beq.n	800b9c0 <_malloc_r+0xa8>
 800b9b4:	1a21      	subs	r1, r4, r0
 800b9b6:	4630      	mov	r0, r6
 800b9b8:	f000 f808 	bl	800b9cc <_sbrk_r>
 800b9bc:	3001      	adds	r0, #1
 800b9be:	d0cf      	beq.n	800b960 <_malloc_r+0x48>
 800b9c0:	6025      	str	r5, [r4, #0]
 800b9c2:	e7db      	b.n	800b97c <_malloc_r+0x64>
 800b9c4:	20008460 	.word	0x20008460
 800b9c8:	20008464 	.word	0x20008464

0800b9cc <_sbrk_r>:
 800b9cc:	b538      	push	{r3, r4, r5, lr}
 800b9ce:	4c06      	ldr	r4, [pc, #24]	; (800b9e8 <_sbrk_r+0x1c>)
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	4605      	mov	r5, r0
 800b9d4:	4608      	mov	r0, r1
 800b9d6:	6023      	str	r3, [r4, #0]
 800b9d8:	f7ff fa8a 	bl	800aef0 <_sbrk>
 800b9dc:	1c43      	adds	r3, r0, #1
 800b9de:	d102      	bne.n	800b9e6 <_sbrk_r+0x1a>
 800b9e0:	6823      	ldr	r3, [r4, #0]
 800b9e2:	b103      	cbz	r3, 800b9e6 <_sbrk_r+0x1a>
 800b9e4:	602b      	str	r3, [r5, #0]
 800b9e6:	bd38      	pop	{r3, r4, r5, pc}
 800b9e8:	20008d9c 	.word	0x20008d9c

0800b9ec <__malloc_lock>:
 800b9ec:	4770      	bx	lr

0800b9ee <__malloc_unlock>:
 800b9ee:	4770      	bx	lr

0800b9f0 <_init>:
 800b9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9f2:	bf00      	nop
 800b9f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9f6:	bc08      	pop	{r3}
 800b9f8:	469e      	mov	lr, r3
 800b9fa:	4770      	bx	lr

0800b9fc <_fini>:
 800b9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9fe:	bf00      	nop
 800ba00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba02:	bc08      	pop	{r3}
 800ba04:	469e      	mov	lr, r3
 800ba06:	4770      	bx	lr
